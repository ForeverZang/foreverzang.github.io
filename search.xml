<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C/C++调试工具gdb</title>
    <url>/2023/06/30/c-gdb-notes/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>C/C++</category>
        <category>调试</category>
        <category>gdb/gdb-server</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>gdb</tag>
      </tags>
  </entry>
  <entry>
    <title>博客搭建</title>
    <url>/2023/05/17/blog-setup/</url>
    <content><![CDATA[<p>欢迎使用 <a href="https://hexo.io/">Hexo</a>! 这是你的第一篇文章. 请查看 <a href="https://hexo.io/docs/">技术文档</a> 更多信息.<br>如果您在使用Hexo时遇到任何问题, 你可以在 <a href="https://hexo.io/docs/troubleshooting.html">故障排除</a> 中找到答案，<br>或者你可以在 <a href="https://github.com/hexojs/hexo/issues">GitHub</a> 上问我。</p>
<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="创建新项目"><a href="#创建新项目" class="headerlink" title="创建新项目"></a>创建新项目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>更多详情: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<span id="more"></span>

<h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>更多详情: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="清理缓存"><a href="#清理缓存" class="headerlink" title="清理缓存"></a>清理缓存</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>

<p>更多详情: <a href="https://hexo.io/docs/generating.html">Clean</a></p>
<h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>更多详情: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="远程部署博客"><a href="#远程部署博客" class="headerlink" title="远程部署博客"></a>远程部署博客</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>更多详情: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>工具</category>
        <category>博客</category>
        <category>说明</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++ gcc编译过程</title>
    <url>/2023/06/30/c-gcc-notes/</url>
    <content><![CDATA[<h3 id="编译目标"><a href="#编译目标" class="headerlink" title="编译目标"></a>编译目标</h3><p>C语言是一门高级语言，需要编译器将其转换成计算机能理解的机器语言，才能在计算机上执行。</p>
<h3 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h3><p>程序从代码编译成可执行文件或者库需要经历预处理,编译,汇编和链接四个阶段<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/c/b9c76bc90c484da18051a399269fd4f1.png" alt="编译过程"></p>
<span id="more"></span>

<h4 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h4><p>预处理主要将代码中的注释删除。替换使用#defined指令的常量值和表达式的宏定义。将#include指令包含的文件中的内容添加到当前文件中，最终生成.i文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gcc -E sort.c -o sort.i</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">file sort.i</span></span><br><span class="line">sort.i: C source, ASCII text</span><br></pre></td></tr></table></figure>
<ul>
<li>-E：让gcc在预处理结束后停止编译</li>
<li>-o：执行目标文件</li>
<li>*.i：文件是完成预处理过程的c语言原始文件</li>
</ul>
<h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><p>将源码转换成机器语言。这一步将.i临时文件转换为具有汇编级指令的汇编文件.s文件。<br>注意此步依然是代码，只不过转换成汇编代码。因为涉及c语言转换成汇编语言，所以该步可以检测出源代码终存在的语言错误或警告。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gcc -S sort.i -o sort.s</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">file sort.s</span></span><br><span class="line">sort.s: assembler source, ASCII text</span><br></pre></td></tr></table></figure>
<ul>
<li>-S：让gcc只编译不进行汇编</li>
<li>-o：执行目标文件</li>
<li>*.s：汇编文件</li>
</ul>
<h4 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h4><p>将汇编程序代码.s文件转换成机器可理解的代码。对应的文件扩展名为.o<br>这一步生成的的机器代码，是计算机可理解的代码。由于此步骤生成的机器代码相互独立，而一个程序中由多个机器代码相互依赖，所以该步骤程序依然不能独立运行，需要经过下一步链接。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gcc -c sort.s -o sort.o</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">file sort.o</span></span><br><span class="line">sort.o: ELF 64-bit LSB relocatable, x86-64, version 1 (SYSV), not stripped</span><br></pre></td></tr></table></figure>
<ul>
<li>-c：汇编成二级制文件但不链接</li>
<li>-o：执行目标文件</li>
<li>*.o：二进制文件</li>
<li>ELF：Executable and Linkable Forma，是一种对可执行文件、目标文件和库使用的文件格式，跟Windows下的PE文件格式类似。</li>
</ul>
<h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p>将汇编的二进制目标代码链接起来,生成可执行文件或库文件，也会自动链接系统库函数,如printf函数,在stdio.h中定义,但是在libc.so.6中实现,会链接该库。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gcc main.o -o main</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">file main</span></span><br><span class="line">main: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=db7b775f9d83e660279962b26551483bbdde8ccc, not stripped</span><br></pre></td></tr></table></figure>
<ul>
<li>不加其它指定参数，则表示链接（动态库或静态库链接操作在此步骤）</li>
<li>-o：可执行二进制文件</li>
<li>ELF：Executable and Linkable Forma，是一种对可执行文件、目标文件和库使用的文件格式，跟Windows下的PE文件格式类似。</li>
</ul>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ol>
<li><a href="https://blog.csdn.net/qq_41546984/article/details/131364400">一文弄懂c&#x2F;c++编译过程(预处理，编译，汇编，链接)</a></li>
</ol>
]]></content>
      <categories>
        <category>C/C++</category>
        <category>make</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>make</tag>
        <tag>gcc</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++项目编译工具make</title>
    <url>/2023/06/30/c-make-notes/</url>
    <content><![CDATA[<h3 id="make简介"><a href="#make简介" class="headerlink" title="make简介"></a>make简介</h3><blockquote>
<p>make指令执行时，需要一个Makefile（类似于Jenkinsfile、Dockerfile、Etc.）告诉make命令需要怎样的去编译和链接程序。<br>Makefile是一个路标，指引make工具应该怎么编译项目（定义了具体的编译指令和依赖关系）。</p>
</blockquote>
<h4 id="make命令执行步骤"><a href="#make命令执行步骤" class="headerlink" title="make命令执行步骤"></a>make命令执行步骤</h4><ol>
<li>读入所有的Makefile</li>
<li>读入被include的其它Makefile（待实验…）</li>
<li>初始化文件中的变量</li>
<li>推导隐晦规则，并分析所有规则</li>
<li>为所有的目标文件创建依赖关系链</li>
<li>根据依赖关系，决定哪些目标要重新生成</li>
<li>执行生成命令</li>
</ol>
<h4 id="make命令注意点"><a href="#make命令注意点" class="headerlink" title="make命令注意点"></a>make命令注意点</h4><ol>
<li>make是一个<strong>编译工具</strong></li>
<li>执行make，工具会在<strong>当前目录下</strong>找makefile或Makefile文件</li>
<li>如果找到，它会找文件中的第一个目标文件（target），并把这个文件作为最终的目标文件</li>
<li>如果target文件不存在，或是target所依赖的后面的 <strong>*.o</strong> 文件的文件修改时间要比target这个文件新，那么他就会执行后面所定义的命令来生成这个文件（支持增量编译）</li>
</ol>
<h3 id="Makefile语法规则"><a href="#Makefile语法规则" class="headerlink" title="Makefile语法规则"></a>Makefile语法规则</h3><h4 id="Makefile规则"><a href="#Makefile规则" class="headerlink" title="Makefile规则"></a>Makefile规则</h4><p>Makefile这个路标的核心规则其实一条：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 注释行</span><br><span class="line">target：prerequisite</span><br><span class="line">	command</span><br></pre></td></tr></table></figure>
<ul>
<li>target：是目标文件，可以是Object文件（编译中间文件 <strong>*.o</strong>），也可以是<strong>可执行文件</strong></li>
<li>prerequisite：要生成target所依赖的文件或目标</li>
<li>command：该命令执行的实际编译命令（也可以是其它Linux指令，例如“echo ‘123456’”），</li>
</ul>
<h5 id="Makefile示例"><a href="#Makefile示例" class="headerlink" title="Makefile示例"></a>Makefile示例</h5><p>脚本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># target可以是任意字符串，依赖条件可以是下一跳指令的target</span><br><span class="line">xxxxxx: main</span><br><span class="line"></span><br><span class="line">main: main.o</span><br><span class="line">	gcc main.o -o main</span><br><span class="line"></span><br><span class="line"># 如果头文件和 *.c 文件在同一个目录下，则就不用写 *.h 文件；只有当处于不同目录下的时候，才需要包含头文件所在目录（此处的 test.h 可省略）</span><br><span class="line">main.o: main.c test.h</span><br><span class="line">	gcc -c main.c -o main.o</span><br><span class="line"></span><br><span class="line">.PHONY: default clean</span><br><span class="line">clean:</span><br><span class="line">	rm *.o main</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc -c main.c -o main.o</span><br><span class="line">gcc main.o -o main</span><br></pre></td></tr></table></figure>
<p>注：上述例子可以看到输出指令指令顺序与指令定义顺序是相反的（执行方式是<strong>递归的</strong>）</p>
<h4 id="Makefile伪指令"><a href="#Makefile伪指令" class="headerlink" title="Makefile伪指令"></a>Makefile伪指令</h4><p>伪目标就是假的”目标文件“，用.PHONY表示，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.PHONY: clean</span><br><span class="line">clean:</span><br><span class="line">    rm *.o temp</span><br></pre></td></tr></table></figure>

<h4 id="Makefile变量"><a href="#Makefile变量" class="headerlink" title="Makefile变量"></a>Makefile变量</h4><h5 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h5><ul>
<li>使用 <strong>&#x3D;</strong> 赋值：变量是可以使用后面的变量来定义的</li>
<li>使用 <strong>:&#x3D;</strong> 赋值：前面的变量不能使用后面的变量，只能使用前面已定义好了的变量</li>
<li>使用 <strong>?&#x3D;</strong> 赋值：若没有定义则定义，否则什么也不做</li>
<li>使用 <strong>+&#x3D;</strong> 赋值：追加变量（如果变量之前没有定义过，那么“+&#x3D;”会自动变成“&#x3D;”；如果前面有变量定义，那么“+&#x3D;”会继承于前次操作的赋值符；如果前一次的是“:&#x3D;”，那么“+&#x3D;”会以“:&#x3D;”作为其赋值符）</li>
</ul>
<h5 id="变量内容替换"><a href="#变量内容替换" class="headerlink" title="变量内容替换"></a>变量内容替换</h5><p>替换变量中的共有的部分，其格式是“(var:a&#x3D;b)”或是“{var:a&#x3D;b}”，其意思是，把变量“var”中所有以“a”字串“结尾”的“a”替换成“b”字串。<br>这里的“结尾”意思是“空格”或是“结束符：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bar := $(foo:%.o=%.c)</span><br></pre></td></tr></table></figure>

<h5 id="默认变量"><a href="#默认变量" class="headerlink" title="默认变量"></a>默认变量</h5><p>语法定义的内部变量：</p>
<table>
<thead>
<tr>
<th>变量</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>$@</td>
<td>规则的目标所对应的文件名</td>
</tr>
<tr>
<td>$&lt;</td>
<td>规则中的第一个相关文件名</td>
</tr>
<tr>
<td>$^</td>
<td>规则中所有相关文件的列表，以空格分割</td>
</tr>
<tr>
<td>$?</td>
<td>规则中日期新于目标的所有相关文件的列表，以空格分割</td>
</tr>
<tr>
<td>$(@D)</td>
<td>目标文件的目录部分</td>
</tr>
<tr>
<td>$(@F)</td>
<td>目标文件的文件名部分</td>
</tr>
</tbody></table>
<p>约定俗称的变量名称：<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/c/04b67c2ae1ba4eec9f1f9974772d1f95.png" alt="约定俗称的变量"></p>
<h5 id="局部变量与全局变量"><a href="#局部变量与全局变量" class="headerlink" title="局部变量与全局变量"></a>局部变量与全局变量</h5><h6 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h6><blockquote>
<p>可以为某个目标文件设置局部变量，它可以和“全局变量”同名，因为它的作用范围只在这条规则以及连带规则中，所以其值也只在作用范围内有效。</p>
</blockquote>
<ol>
<li>给main目标定义<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">default: main</span><br><span class="line"></span><br><span class="line">main: KK = $(LL) zangh</span><br><span class="line">main: LL = hello</span><br><span class="line">main: main.o</span><br><span class="line">	echo $(KK)</span><br><span class="line"></span><br><span class="line">main.o: main.c test.h</span><br><span class="line">	echo $(KK) &amp;&amp; gcc -c main.c -o main.o</span><br><span class="line"></span><br><span class="line"># 输出：</span><br><span class="line">echo hello zangh &amp;&amp; gcc -c main.c -o main.o</span><br><span class="line">hello zangh</span><br><span class="line">echo hello zangh &amp;&amp; gcc main.o -o main</span><br><span class="line">hello zangh</span><br></pre></td></tr></table></figure></li>
</ol>
<h6 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h6><blockquote>
<p>当make嵌套调用时（参见前面的“嵌套调用”章节），上层Makefile中定义的变量会以系统环境变量的方式传递到下层的Makefile中。</p>
</blockquote>
<h4 id="Makefile条件判断"><a href="#Makefile条件判断" class="headerlink" title="Makefile条件判断"></a>Makefile条件判断</h4><h5 id="指令格式"><a href="#指令格式" class="headerlink" title="指令格式"></a>指令格式</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;conditional-directive&gt;</span><br><span class="line">    &lt;text-if-true&gt;</span><br><span class="line">else</span><br><span class="line">    &lt;text-if-false&gt;</span><br><span class="line">endif</span><br></pre></td></tr></table></figure>
<ul>
<li>else部分非必须。</li>
<li>条件指令有四个：ifeq&#x2F;ifneq、ifdef&#x2F;ifndef</li>
</ul>
<h4 id="Makefile函数使用"><a href="#Makefile函数使用" class="headerlink" title="Makefile函数使用"></a>Makefile函数使用</h4><h5 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&lt;function&gt; &lt;arguments1&gt;,&lt;arguments2&gt;,…)</span><br></pre></td></tr></table></figure>
<ul>
<li>函数调用，很像变量的使用，也是以“$”来标识的</li>
</ul>
<h5 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h5><p><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/c/80cda3de7a5140d28726bcbcdb436b88.png" alt="支持的内置函数"></p>
]]></content>
      <categories>
        <category>C/C++</category>
        <category>make</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>make</tag>
        <tag>Makefile</tag>
      </tags>
  </entry>
  <entry>
    <title>CMake项目构建工具</title>
    <url>/2023/07/04/c-cmake-notes/</url>
    <content><![CDATA[<h3 id="CMake简介"><a href="#CMake简介" class="headerlink" title="CMake简介"></a>CMake简介</h3><h4 id="CMake是什么？"><a href="#CMake是什么？" class="headerlink" title="CMake是什么？"></a>CMake是什么？</h4><ol>
<li>CMake是一个支持生成跨平台项目构建文件的工具（类似的还有Premake，Autoconf）</li>
<li>CMake并不直接构建最终的软件，而是描述项目文件被编译的过程，生成标准的构建档（如Unix的Makefile、VS的projects&#x2F;workspaces、Windows的build.ninja）</li>
<li>CMake支持的生成的构建档 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The following generators are available on this platform:</span><br><span class="line">  Unix Makefiles               = Generates standard UNIX makefiles.</span><br><span class="line">  Ninja                        = Generates build.ninja files.</span><br><span class="line">  Watcom WMake                 = Generates Watcom WMake makefiles.</span><br><span class="line">  CodeBlocks - Ninja           = Generates CodeBlocks project files.</span><br><span class="line">  CodeBlocks - Unix Makefiles  = Generates CodeBlocks project files.</span><br><span class="line">  CodeLite - Ninja             = Generates CodeLite project files.</span><br><span class="line">  CodeLite - Unix Makefiles    = Generates CodeLite project files.</span><br><span class="line">  Sublime Text 2 - Ninja       = Generates Sublime Text 2 project files.</span><br><span class="line">  Sublime Text 2 - Unix Makefiles</span><br><span class="line">                               = Generates Sublime Text 2 project files.</span><br><span class="line">  Kate - Ninja                 = Generates Kate project files.</span><br><span class="line">  Kate - Unix Makefiles        = Generates Kate project files.</span><br><span class="line">  Eclipse CDT4 - Ninja         = Generates Eclipse CDT 4.0 project files.</span><br><span class="line">  Eclipse CDT4 - Unix Makefiles= Generates Eclipse CDT 4.0 project files.</span><br><span class="line">  KDevelop3                    = Generates KDevelop 3 project files.</span><br><span class="line">  KDevelop3 - Unix Makefiles   = Generates KDevelop 3 project files.</span><br></pre></td></tr></table></figure></li>
<li>对于一个庞大的工程，编写Makefile相当复杂，有了CMake工具后就可以读入所有源文件，自动生成Makefile等构建文件</li>
</ol>
<span id="more"></span>

<h4 id="CMake源文件"><a href="#CMake源文件" class="headerlink" title="CMake源文件"></a>CMake源文件</h4><ol>
<li>CMake编写的源文件以 <strong>CMakeLists.txt</strong> 命名或以 <strong>.cmake</strong> 为扩展名</li>
<li>CMake的源文件包括命令和注释</li>
<li>CMake源文件中所有有效的语句都是命令，可以是内置命令或者自定义的 函数（function）或 宏命令（macro）</li>
<li>可以通过 add_subdirectory() 命令把子目录的 CMake源文件 添加进来</li>
</ol>
<h4 id="CMake编译C-x2F-C-原理"><a href="#CMake编译C-x2F-C-原理" class="headerlink" title="CMake编译C&#x2F;C++原理"></a>CMake编译C&#x2F;C++原理</h4><ol>
<li>CMake比Unix的make更为高级，使用起来要方便的多</li>
<li>终端 cmake 命令将 CMakeLists.txt 文件构建为make所需要的 Makefile 文件，最后用make命令编译源码生成可执行程序或共享库（so-shared<br>object）。因此CMake在Linux终端执行步骤总的就两个：<ul>
<li>cmake</li>
<li>make</li>
</ul>
</li>
<li>终端执行 cmake 后会生成很多编译中间文件以及Makefile文件，一般会新建一个build目录专门用来编译：<ul>
<li>mkdir build</li>
<li>cd build</li>
<li>cmake …</li>
<li>make</li>
</ul>
</li>
</ol>
<h3 id="CMake注释"><a href="#CMake注释" class="headerlink" title="CMake注释"></a>CMake注释</h3><h4 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.10)</span><br><span class="line">project(c_study02 C)</span><br><span class="line"></span><br><span class="line">set(CMAKE_C_STANDARD 99)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加注释文档</span></span><br><span class="line">add_executable(c_study02 main.c)</span><br></pre></td></tr></table></figure>
<h4 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h4><p>可以使用括号来实现多行注释</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.10)</span><br><span class="line">project(c_study02 C)</span><br><span class="line"></span><br><span class="line">set(CMAKE_C_STANDARD 99)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">[[</span></span><br><span class="line">    多行注释 1</span><br><span class="line">    多行注释 2</span><br><span class="line">    多行注释 3</span><br><span class="line">]]</span><br><span class="line">add_executable(c_study02 main.c)</span><br></pre></td></tr></table></figure>

<h3 id="CMake变量"><a href="#CMake变量" class="headerlink" title="CMake变量"></a>CMake变量</h3><h4 id="单值"><a href="#单值" class="headerlink" title="单值"></a>单值</h4><ol>
<li>CMake中所有的变量都是string类型</li>
<li>set()&#x2F;unset()：声明&#x2F;移除一个变量</li>
<li>声明变量：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令格式：<span class="built_in">set</span>(变量名 变量值)</span></span><br><span class="line">set(name zangh)</span><br></pre></td></tr></table></figure></li>
<li>变量引用：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令格式：<span class="variable">$&#123;变量名&#125;</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;name&#125;</span></span><br></pre></td></tr></table></figure></li>
<li>打印变量：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令格式：message(<span class="string">&quot;变量名 = <span class="variable">$&#123;变量名&#125;</span>&quot;</span>)</span></span><br><span class="line">message(&quot;name = $&#123;name&#125;&quot;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="列表-LISTS"><a href="#列表-LISTS" class="headerlink" title="列表(LISTS)"></a>列表(LISTS)</h4><ol>
<li>列表也是字符串，可以把列表看做是一个特殊的变量，这个变量有多个值</li>
<li>语法格式：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令格式：<span class="built_in">set</span>(变量名 变量值1 变量值2 ... 变量值n)</span></span><br><span class="line">set(names zangh zangj zangl)</span><br></pre></td></tr></table></figure></li>
<li>声明列表：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令格式：<span class="built_in">set</span>(变量名 变量值1 变量值2 ... 变量值n) 或 <span class="built_in">set</span>(变量名 <span class="string">&quot;变量值1;变量值2;...;变量值n&quot;</span>)</span></span><br><span class="line">set(names zangh zangj zangl)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或</span></span><br><span class="line">set(names &quot;zangh;zangj;zangl&quot;)</span><br></pre></td></tr></table></figure></li>
<li>引用列表：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令格式：<span class="variable">$&#123;列表名&#125;</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;names&#125;</span></span><br></pre></td></tr></table></figure></li>
<li>打印列表：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令格式：message(<span class="string">&quot;列表名 = <span class="variable">$&#123;列表名&#125;</span>&quot;</span>)</span></span><br><span class="line">message(&quot;names = $&#123;names&#125;&quot;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="常用变量"><a href="#常用变量" class="headerlink" title="常用变量"></a>常用变量</h4><p>CMake预设了一些常用变量，这些变量通常会在编写CMakeLists.txt文件时使用到</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CMAKE_MAJOR_VERSION：cmake 主版本号</span><br><span class="line">CMAKE_MINOR_VERSION：cmake 次版本号</span><br><span class="line">CMAKE_C_FLAGS：设置 C 编译选项</span><br><span class="line">CMAKE_CXX_FLAGS：设置 C++ 编译选项</span><br><span class="line">PROJECT_SOURCE_DIR：工程的根目录</span><br><span class="line">PROJECT_BINARY_DIR：运行 cmake 命令的目录</span><br><span class="line">CMAKE_CURRENT_SOURCE_DIR：当前CMakeLists.txt 所在路径</span><br><span class="line">CMAKE_CURRENT_BINARY_DIR：目标文件编译目录</span><br><span class="line">EXECUTABLE_OUTPUT_PATH：重新定义目标二进制可执行文件的存放位置</span><br><span class="line">LIBRARY_OUTPUT_PATH：重新定义目标链接库文件的存放位置</span><br><span class="line">UNIX：如果为真，表示为UNIX-like的系统，包括AppleOSX和CygWin</span><br><span class="line">WIN32：如果为真，表示为 Windows 系统，包括 CygWin</span><br><span class="line">APPLE：如果为真，表示为 Apple 系统</span><br><span class="line">CMAKE_SIZEOF_VOID_P：表示void*的大小（例如为4或者8），可以使用其来判断当前构建为32位还是64位</span><br><span class="line">CMAKE_CURRENT_LIST_DIR：表示正在处理的CMakeLists.txt文件所在目录的绝对路径</span><br><span class="line">CMAKE_ARCHIVE_OUTPUT_DIRECTORY：用于设置ARCHIVE目标的输出路径</span><br><span class="line">CMAKE_LIBRARY_OUTPUT_DIRECTORY：用于设置LIBRARY目标的输出路径</span><br><span class="line">CMAKE_RUNTIME_OUTPUT_DIRECTORY：用于设置RUNTIME目标的输出路径</span><br></pre></td></tr></table></figure>

<h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><ol>
<li>全局层：cache变量，在整个项目范围可见，一般在set定义变量，指定CACHE参数就能定义cache变量</li>
<li>目录层：在当前目录CMakeList.txt中定义，以及在改文件包含的其他CMake源文件中定义的变量</li>
<li>函数层：在命令函数中定义的变量，属于函数作用域内的变量</li>
</ol>
<h3 id="CMake流程控制"><a href="#CMake流程控制" class="headerlink" title="CMake流程控制"></a>CMake流程控制</h3><h4 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h4><p>优先级：() &gt; 一元 &gt; 二元 &gt; 逻辑<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/c/42a46bbc8c9f4424bac6021565825a36.png" alt="操作符"></p>
<h4 id="布尔常量值"><a href="#布尔常量值" class="headerlink" title="布尔常量值"></a>布尔常量值</h4><p><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/c/9174bd239548435dbf36fa04adfef431.png" alt="布尔值"></p>
<h4 id="条件命令"><a href="#条件命令" class="headerlink" title="条件命令"></a>条件命令</h4><blockquote>
<p>elseif 和 else 部分是可选的，也可以使⽤多个elseif部分 缩进和空格对语句的解析没有影响</p>
</blockquote>
<p>语法格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (表达式)</span><br><span class="line">    COMMAND(ARGS...)</span><br><span class="line">elseif (表达式)</span><br><span class="line">    COMMAND(ARGS...)</span><br><span class="line">else (表达式)</span><br><span class="line">    COMMAND(ARGS...)</span><br><span class="line">endif (表达式)</span><br></pre></td></tr></table></figure>

<p>使用示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set(if_tap OFF)</span><br><span class="line">set(elseif_tap ON)</span><br><span class="line"></span><br><span class="line">if($&#123;if_tap&#125;)</span><br><span class="line">    message(&quot;if&quot;)</span><br><span class="line">elseif($&#123;elseif_tap&#125;)</span><br><span class="line">    message(&quot;elseif&quot;)</span><br><span class="line">else($&#123;if_tap&#125;)</span><br><span class="line">    message(&quot;else&quot;)</span><br><span class="line">endif($&#123;if_tap&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="循环命令"><a href="#循环命令" class="headerlink" title="循环命令"></a>循环命令</h4><blockquote>
<p>break() 可以跳出整个循环<br>continue() 可以跳出当前循环</p>
</blockquote>
<p>语法格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">while(表达式)</span><br><span class="line">    COMMAND(ARGS...)</span><br><span class="line">endwhile(表达式)</span><br></pre></td></tr></table></figure>

<p>使用示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set(a &quot;&quot;)</span><br><span class="line"></span><br><span class="line">while(NOT a STREQUAL &quot;xxx&quot;)</span><br><span class="line">    set(a &quot;$&#123;a&#125;x&quot;)</span><br><span class="line">    message(&quot;a = $&#123;a&#125;&quot;)</span><br><span class="line">endwhile()</span><br></pre></td></tr></table></figure>

<h4 id="循环遍历"><a href="#循环遍历" class="headerlink" title="循环遍历"></a>循环遍历</h4><blockquote>
<p>foreach也支持 break() 和 continue() 命令跳出循环</p>
</blockquote>
<p>语法格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">foreach(循环变量 参数1 参数2... 参数N)</span><br><span class="line">     COMMAND(ARGS...)</span><br><span class="line">endforeach(循环变量)</span><br><span class="line"></span><br><span class="line">遍历RANGE:</span><br><span class="line">#循环范围从start到stop，循环增量为step</span><br><span class="line">foreach(循环变量 RANGE start stop step)</span><br><span class="line">     COMMAND(ARGS...)</span><br><span class="line">endforeach(循环变量)</span><br><span class="line"></span><br><span class="line">遍历LISTS：</span><br><span class="line">foreach(循环遍历 IN LISTS 列表)</span><br><span class="line">     COMMAND(ARGS...)</span><br><span class="line">endforeach(循环变量)</span><br></pre></td></tr></table></figure>

<p>使用示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">foreach(item 1 2 3)</span><br><span class="line">    message(&quot;item = $&#123;item&#125;&quot;)</span><br><span class="line">endforeach(item)</span><br><span class="line"></span><br><span class="line">#RANGE：RANGE 4 表示从0到4</span><br><span class="line">foreach(item RANGE 4)</span><br><span class="line">    message(&quot;item = $&#123;item&#125;&quot;)</span><br><span class="line">endforeach(item)</span><br><span class="line"></span><br><span class="line">#RANGE：打印 1 3 5</span><br><span class="line">foreach(item RANGE 1 5 2)</span><br><span class="line">    message(&quot;item = $&#123;item&#125;&quot;)</span><br><span class="line">endforeach(item)</span><br><span class="line"></span><br><span class="line">#LISTS：</span><br><span class="line">set(list_var 1 2 3)</span><br><span class="line">foreach(item IN LISTS list_var)</span><br><span class="line">    message(&quot;item = $&#123;item&#125;&quot;)</span><br><span class="line">endforeach(item)</span><br></pre></td></tr></table></figure>

<h3 id="CMake常用命令"><a href="#CMake常用命令" class="headerlink" title="CMake常用命令"></a>CMake常用命令</h3><h4 id="project命令"><a href="#project命令" class="headerlink" title="project命令"></a>project命令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令语法：project(&lt;projectname&gt; [languageName1 languageName2 ...])</span><br><span class="line">命令简述：用于指定项目的名称</span><br><span class="line">使用范例：project(Main)</span><br></pre></td></tr></table></figure>

<h4 id="cmake-minimum-required命令"><a href="#cmake-minimum-required命令" class="headerlink" title="cmake_minimum_required命令"></a>cmake_minimum_required命令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令语法：cmake_minimum_requried(VERSION major[.minor[.patch)</span><br><span class="line">命令简述：用于指定需要的CMake的最低版本</span><br><span class="line">使用范例：cmake_minimum_requried(VERSION 2.8.3)</span><br></pre></td></tr></table></figure>

<h4 id="aux-source-directory命令"><a href="#aux-source-directory命令" class="headerlink" title="aux_source_directory命令"></a>aux_source_directory命令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令语法：aux_source_directory(&lt;dir&gt; &lt;variable&gt;)</span><br><span class="line">命令简述：用于包含源文件目录，dir目录下的所有源文件的名字保存在变量variable中</span><br><span class="line">使用范例：aux_source_directory($&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/src  DIR_SRCS)</span><br></pre></td></tr></table></figure>

<h4 id="add-executable命令"><a href="#add-executable命令" class="headerlink" title="add_executable命令"></a>add_executable命令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令语法：add_executable(&lt;name&gt; [WIN32] [MACOSX_BUNDLE][EXCLUDE_FROM_ALL] source1 source2 … sourceN)</span><br><span class="line">命令简述：用于指定从一组源文件source1 source2 ... sourceN 编译出一个可执行文件且命名为name</span><br><span class="line">使用范例：add_executable(Main $(DIR_SRCS))</span><br></pre></td></tr></table></figure>

<h4 id="add-library命令"><a href="#add-library命令" class="headerlink" title="add_library命令"></a>add_library命令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令语法：add_library([STATIC | SHARED | MODULE] [EXCLUDE_FROM_ALL] source1source2 … sourceN)</span><br><span class="line">命令简述：用于指定从一组源文件 source1 source2 ... sourceN编译出一个库文件且命名为name</span><br><span class="line">使用范例：add_library(Lib $(DIR_SRCS))</span><br></pre></td></tr></table></figure>

<h4 id="add-dependencies命令"><a href="#add-dependencies命令" class="headerlink" title="add_dependencies命令"></a>add_dependencies命令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令语法：add_dependencies(target-name depend-target1 depend-target2 …)</span><br><span class="line">命令简述：用于指定某个目标（可执行文件或者库文件）依赖于其他的目标。</span><br><span class="line">        这里的目标必须是add_executable、add_library、add_custom_target命令创建的目标</span><br></pre></td></tr></table></figure>

<h4 id="add-subdirectory命令"><a href="#add-subdirectory命令" class="headerlink" title="add_subdirectory命令"></a>add_subdirectory命令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令语法：add_subdirectory(source_dir [binary_dir] [EXCLUDE_FROM_ALL])</span><br><span class="line">命令简述：用于添加一个需要进行构建的子目录</span><br><span class="line">使用范例：add_subdirectory(Lib)</span><br></pre></td></tr></table></figure>

<h4 id="target-link-libraries命令"><a href="#target-link-libraries命令" class="headerlink" title="target_link_libraries命令"></a>target_link_libraries命令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令语法：target_link_libraries(&lt;target&gt; [item1 [item2 […]]][[debug|optimized|general] ] …)</span><br><span class="line">命令简述：用于指定target需要链接item1 item2 ...。</span><br><span class="line">        这里target必须已经被创建，链接的item可以是已经存在的target（依赖关系会自动添加）</span><br><span class="line">使用范例：target_link_libraries(Main Lib)</span><br></pre></td></tr></table></figure>

<h4 id="set命令"><a href="#set命令" class="headerlink" title="set命令"></a>set命令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令简述：用于设定变量 variable 的值为 value。如果指定了 CACHE 变量将被放入 Cache（缓存）中。</span><br><span class="line">命令语法：set(&lt;variable&gt; &lt;value&gt; [[CACHE &lt;type&gt;&lt;docstring&gt; [FORCE]] | PARENT_SCOPE])</span><br><span class="line">使用范例：set(ProjectName Main)</span><br></pre></td></tr></table></figure>

<h4 id="unset命令"><a href="#unset命令" class="headerlink" title="unset命令"></a>unset命令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令语法：unset(&lt;variable&gt; [CACHE])</span><br><span class="line">命令简述：用于移除变量 variable。如果指定了 CACHE 变量将被从 Cache 中移除。</span><br><span class="line">使用范例：unset(VAR CACHE)</span><br></pre></td></tr></table></figure>

<h4 id="message命令"><a href="#message命令" class="headerlink" title="message命令"></a>message命令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令语法：message([STATUS|WARNING|AUTHOR_WARNING|FATAL_ERROR|SEND_ERROR] “message todisplay”…)</span><br><span class="line">命令简述：用于输出信息</span><br><span class="line">使用范例：message(“Hello World”)</span><br></pre></td></tr></table></figure>

<h4 id="include-directories命令"><a href="#include-directories命令" class="headerlink" title="include_directories命令"></a>include_directories命令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令语法：include_directories([AFTER|BEFORE] [SYSTEM] dir1 dir2 …)</span><br><span class="line">命令简述：用于设定目录，这些设定的目录将被编译器用来查找 include 文件</span><br><span class="line">使用范例：include_directories($&#123;PROJECT_SOURCE_DIR&#125;/lib)</span><br></pre></td></tr></table></figure>

<h4 id="find-path命令"><a href="#find-path命令" class="headerlink" title="find_path命令"></a>find_path命令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令语法：find_path(&lt;VAR&gt; name1 [path1 path2 …])</span><br><span class="line">命令简述：用于查找包含文件name1的路径，如果找到则将路径保存在VAR中（此路径为一个绝对路径），如果没有找到则结果为&lt;VAR&gt;-NOTFOUND.默认情况下，VAR会被保存在Cache中，这时候我们需要清除VAR才可以进行下一次查询（使用unset命令）</span><br><span class="line">find_path(LUA_INCLUDE_PATH lua.h $&#123;LUA_INCLUDE_FIND_PATH&#125;)</span><br><span class="line">if(NOT LUA_INCLUDE_PATH)</span><br><span class="line">     message(SEND_ERROR &quot;Header file lua.h not found&quot;)</span><br><span class="line">endif()</span><br></pre></td></tr></table></figure>

<h4 id="find-library命令"><a href="#find-library命令" class="headerlink" title="find_library命令"></a>find_library命令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令语法：find_library(&lt;VAR&gt; name1 [path1 path2 …])</span><br><span class="line">命令简述：用于查找库文件 name1 的路径，如果找到则将路径保存在 VAR 中（此路径为一个绝对路径），</span><br><span class="line">        如果没有找到则结果为 &lt;VAR&gt;-NOTFOUND。</span><br><span class="line">        一个类似的命令 link_directories 已经不太建议使用了</span><br></pre></td></tr></table></figure>

<h4 id="add-definitions命令"><a href="#add-definitions命令" class="headerlink" title="add_definitions命令"></a>add_definitions命令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令语法：add_definitions(-DFOO -DBAR …)</span><br><span class="line">命令简述：用于添加编译器命令行标志（选项），通常的情况下我们使用其来添加预处理器定义</span><br><span class="line">使用范例：add_definitions(-D_UNICODE -DUNICODE)</span><br></pre></td></tr></table></figure>

<h4 id="file命令"><a href="#file命令" class="headerlink" title="file命令"></a>file命令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令简述：此命令提供了丰富的文件和目录的相关操作（这里仅说一下比较常用的）</span><br><span class="line">使用范例：</span><br><span class="line"># 目录的遍历</span><br><span class="line"># GLOB 用于产生一个文件（目录）路径列表并保存在variable 中</span><br><span class="line"># 文件路径列表中的每个文件的文件名都能匹配globbing expressions（非正则表达式，但是类似）</span><br><span class="line"># 如果指定了 RELATIVE 路径，那么返回的文件路径列表中的路径为相对于 RELATIVE 的路径</span><br><span class="line">file(GLOB variable [RELATIVE path][globbing expressions]...)</span><br><span class="line"> </span><br><span class="line"># 获取当前目录下的所有的文件（目录）的路径并保存到 ALL_FILE_PATH 变量中</span><br><span class="line">file(GLOB ALL_FILE_PATH ./*)</span><br><span class="line"># 获取当前目录下的 .h 文件的文件名并保存到ALL_H_FILE 变量中</span><br><span class="line"># 这里的变量CMAKE_CURRENT_LIST_DIR 表示正在处理的 CMakeLists.txt 文件的所在的目录的绝对路径（2.8.3 以及以后版本才支持）</span><br></pre></td></tr></table></figure>

<h3 id="CMakeLists-txt-编写、编译、示例"><a href="#CMakeLists-txt-编写、编译、示例" class="headerlink" title="CMakeLists.txt 编写、编译、示例"></a>CMakeLists.txt 编写、编译、示例</h3><h4 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h4><ol>
<li>需要编译的源文件</li>
<li>编写CMakeLists.txt</li>
<li>终端运行cmake命令(1.3中有讲到)，由CMake根据CMakeLists.txt生成Makefile</li>
<li>终端运行make命令(1.3中有讲到)，由Make根据Makefile，调用gcc生成可执行文件</li>
</ol>
<p><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/c/556ccfb0098b4825bd4a56edbc629cb1.jpeg" alt="基本流程"></p>
<h4 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h4><p>一个CMakeLists.txt的编写，如下几个基础命令是十分常用的，具体释义在上一节中已有讲到</p>
<ol>
<li>cmake_minimum_required(VERSION x.x.x)：用于指定cmake所需最低版本</li>
<li>project(Project) ：用于指定项目名称</li>
<li>include_directories() ：用于包含头文件目录</li>
<li>aux_source_directory(src dir_srcs)：用于包含源文件目录</li>
<li>set(TEST_MATH) ：用于设置环境变量，编译用到的源文件全部都要放到这里</li>
<li>add_executable(${PROJECT_NAME} ${TEST_MATH})：用于添加要编译的可执行文件</li>
<li>target_link_libraries(${PROJECT_NAME} m)：用于添加可执行文件所需要的库</li>
</ol>
<h4 id="Hello-CMake"><a href="#Hello-CMake" class="headerlink" title="Hello_CMake"></a>Hello_CMake</h4><h5 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── CMakeLists.txt        #父目录的CMakeLists.txt</span><br><span class="line">├── main.cpp              #源文件，包含main函数</span><br><span class="line">└── sub                   #子目录</span><br><span class="line">    └── CMakeLists.txt    #子目录的CMakeLists.txt</span><br><span class="line">    └── test.h            #子目录头文件</span><br><span class="line">    └── test.cpp          #子目录源文件</span><br></pre></td></tr></table></figure>

<h5 id="源文件代码"><a href="#源文件代码" class="headerlink" title="源文件代码"></a>源文件代码</h5><h5 id="CMakeLists-txt代码"><a href="#CMakeLists-txt代码" class="headerlink" title="CMakeLists.txt代码"></a>CMakeLists.txt代码</h5><h5 id="编译前后对比"><a href="#编译前后对比" class="headerlink" title="编译前后对比"></a>编译前后对比</h5><h5 id="target-link的三种属性"><a href="#target-link的三种属性" class="headerlink" title="target_link的三种属性"></a>target_link的三种属性</h5><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ol>
<li><a href="https://blog.csdn.net/geyichongchujianghu/article/details/124781090">CMake语法详解</a></li>
</ol>
]]></content>
      <categories>
        <category>C/C++</category>
        <category>CMake</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>CMake</tag>
      </tags>
  </entry>
  <entry>
    <title>C标准库及CRT（运行时库）</title>
    <url>/2023/06/30/c-libs-notes/</url>
    <content><![CDATA[<h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><h3 id="POSIX是什么？"><a href="#POSIX是什么？" class="headerlink" title="POSIX是什么？"></a>POSIX是什么？</h3><blockquote>
<p>POSIX：全称Portable Operating System Interface of UNIX（可移植操作系统接口），是由IEEE指定的一系列标准，用于澄清和统一Unix-y操作系统提供的应用程序编程接口。</p>
</blockquote>
<p>接口规范：</p>
<ul>
<li>定义了操作系统至少应该为应用程序提供的接口，同时为应用程序提供了 <strong>系统调用的接口规范</strong></li>
<li>保证了符合POSIX标准的API的应用程序，可以非常方便的 <strong>移植</strong> 到其它遵守该规范的系统上</li>
<li>操作系统（Unix、Windows）API通常以 <strong>C库的方式</strong> 封装了这些符合POSIX标准的系统接口</li>
</ul>
<p>作用体现：</p>
<ul>
<li>当你编写的程序是依赖 POSIX 标准时，你可以非常轻松地把它移植到其它类Unix平台上（例如：包括但不限于Linux！）</li>
<li>如果编写的程序使用了某些不在 POSIX 范围内的Linux API时，那如果你将很难把该程序移植到其它类Unix平台上（例如：MacOS）</li>
</ul>
<span id="more"></span>

<h3 id="GNU与GCC是什么？"><a href="#GNU与GCC是什么？" class="headerlink" title="GNU与GCC是什么？"></a>GNU与GCC是什么？</h3><h4 id="GNU"><a href="#GNU" class="headerlink" title="GNU"></a>GNU</h4><blockquote>
<p>GNU：全称是GNU‘s Not Unix，是一个 <strong>自由软件操作系统</strong> —就是说，它尊重其使用者的自由。GNU 操作系统包括 GNU 软件包（专门由 GNU 工程发布的程序）和由第三方发布的自由软件。<br>它所采用的的典型内核是Linux，该组合叫作GNU&#x2F;Linux操作系统</p>
</blockquote>
<p>GNU软件包列表：</p>
<ul>
<li>编译器套装（GCC）<ul>
<li>GCC：C&#x2F;C++语言编写的程序转换成为处理器能够执行的二进制代码的过程即由编译器完成</li>
<li>Binutils：一组二进制程序处理工具，包括：addr2line、ar、objcopy、objdump、as、ld、ldd、readelf、size等。这一组工具是开发和调试不可缺少的工具<ul>
<li>addr2line：用来将程序地址转换成其所对应的程序源文件及所对应的代码行，也可以得到所对应的函数，该工具将帮助调试器在调试的过程中定位对应的源代码位置</li>
<li>as：主要用于汇编</li>
<li>ld：主要用于链接</li>
<li>ar：主要用于创建静态库</li>
<li>ldd：可以用于查看一个可执行程序依赖的共享库</li>
<li>objcopy：将一种对象文件翻译成另一种格式，譬如将.bin转换成.elf、或者将.elf转换成.bin等</li>
<li>objdump：主要的作用是反汇编</li>
<li>readelf：显示有关ELF文件的信息</li>
<li>size：列出可执行文件每个部分的尺寸和总尺寸，代码段、数据段、总大小等</li>
</ul>
</li>
<li>CRT：C语言标准仅仅定义了C标准库函数原型并没有提供实现，C语言编译器通常需要一个C运行时库（C Run Time Libray，CRT）的支持</li>
</ul>
</li>
<li>C库（glibc）</li>
<li>核心工具组（coreutils）</li>
<li>调试工具（GDB）</li>
</ul>
<h4 id="GCC"><a href="#GCC" class="headerlink" title="GCC"></a>GCC</h4><blockquote>
<p>GCC：全称是GNU Compiler Collection，即 GNU编译器套件。GCC是GNU操作系统的官方编译器，已经被大多数类Unix操作系统采纳为标准的编译器。</p>
</blockquote>
<p>编译器有很多种，不同平台下有不同类型的编译器：</p>
<ul>
<li>Windows 下常用的是微软开发的 cl.exe，它被集成在 Visual Studio 或 Visual C++ 中，一般不单独使用</li>
<li>Linux 下常用的是 GUN 组织开发的 GCC，很多 Linux 发行版都自带 GCC</li>
<li>Mac 下常用的是 LLVM&#x2F;Clang（以前是 GCC，后来由于 GCC 的不配合才改为 LLVM&#x2F;Clang）</li>
</ul>
<p>集成了上述编译器的IDE：</p>
<ul>
<li>Windows下使用<ul>
<li>Visual C++ 6.0 一款很古老的微软开发的IDE，历史太久远很多平台已经不支持了</li>
<li>Visual Studio（简称VS） 是Visual C++ 6.0的升级版，也是实际开发中会用到的工具，缺点就是太大了，安装不方便</li>
<li>Dev C++ 免费开源的C&#x2F;C++ IDE，小巧安装卸载方便，学习成本低，缺点是调试能力弱</li>
</ul>
</li>
<li>Linux下使用<ul>
<li>GCC</li>
</ul>
</li>
<li>Mac OS X 下使用<ul>
<li>Xcode</li>
</ul>
</li>
</ul>
<h5 id="GCC的使用"><a href="#GCC的使用" class="headerlink" title="GCC的使用"></a>GCC的使用</h5><p>在使用gcc进行编译时，它会查找系统默认的include和link路径：</p>
<ul>
<li>类Unix系统中<ul>
<li>&#x2F;usr&#x2F;local&#x2F;include</li>
<li>&#x2F;usr&#x2F;lib&#x2F;gcc-lib&#x2F;target&#x2F;version&#x2F;include</li>
<li>&#x2F;usr&#x2F;target&#x2F;include</li>
<li>&#x2F;usr&#x2F;include</li>
<li>用户在编译时，传入编译参数 -I</li>
</ul>
</li>
</ul>
<h3 id="C标准"><a href="#C标准" class="headerlink" title="C标准"></a>C标准</h3><blockquote>
<p>C标准主要由两部分组成，一部分描述 <strong>C语法</strong>，另一部分描述 <strong>C标准库</strong> </p>
</blockquote>
<p>C标准库，通常指ANSI C（美国国家标准协会）：</p>
<ul>
<li>定义了一组标准头文件，每个文件中包含一些相关的函数、变量、类型声明和宏定义</li>
<li>只定义原型，不提供实现（由操作系统进行实现）</li>
<li>应用程序开发者可以通过包含这些C标准库函数的头文件来开发程序，这样就可以屏蔽平台的差异，使程序的具备可移植性</li>
</ul>
<h3 id="C运行库"><a href="#C运行库" class="headerlink" title="C运行库"></a>C运行库</h3><blockquote>
<p>C标准库函数的实现留给了各个系统平台（例如：Windows、MacOS X、Linux），各系统的实现称为 <strong>C运行时库（C Run Time Library）</strong> 简称 CRT</p>
</blockquote>
<p>C运行时库：</p>
<ul>
<li>与平台相关联的</li>
<li>程序与操作系统之间的抽象层<ul>
<li>Linux平台下C语言运行时库为 glibc（GNU C Library）</li>
<li>Windows平台下C语言运行时库位MSVCRT（Microsoft Visual C Run-time）</li>
</ul>
</li>
<li>C语言并未规定线程库，但是glibc和MSVCRT都包含了线程操作的库函数。所以glibc和MSVCRT事实上是标准C语言运行库的超集，它们各自对C标准库进行了一些扩展</li>
<li>CRT实际上包含两部分<ul>
<li>基于C标准库中定义的接口函数</li>
<li>根据平台自身开发的相关的或者不相关的库接口函数</li>
</ul>
</li>
</ul>
<blockquote>
<p>要在一个平台上支持C语言，不仅要实现符合平台的C编译器，还要实现C标准库，这样的实现才算符合C标准。</p>
</blockquote>
<h3 id="glibc"><a href="#glibc" class="headerlink" title="glibc"></a>glibc</h3><blockquote>
<p>GNU C实际上是GNU C库，又称为glibc。<br>在Linux平台上使用最广泛的CRT就是glibc，其中包含C标准库的实现，也包含所有系统函数。几乎所有C程序都要调用glibc的库函数，所以glibc是Linux平台C程序运行的基础。</p>
</blockquote>
<p>glibc常见库说明：</p>
<ul>
<li>libc.so：最基本、最常用的 <strong>C标准库函数和系统函数</strong> 的实现都在此动态链接库中，几乎所有C程序的运行都依赖于libc.so</li>
<li>libm.so：数学计算的相关的库函数（非标准库）</li>
<li>libpthread.so：多线程相关的库函数（非标准库）</li>
</ul>
<p>glibc发行版本的组成部分：</p>
<ul>
<li>头文件：例如stdio.h、stdlib.h等，通常位于&#x2F;usr&#x2F;include目录下</li>
<li>库的二进制文件：主要为 C标准库的实现 ，有静态和动态两个版本。<ul>
<li>动态的标准库：&#x2F;lib&#x2F;libc.so.6</li>
<li>静态的标准库：&#x2F;usr&#x2F;lib&#x2F;libc.a</li>
</ul>
</li>
<li>辅助程序运行的运行库，可以称得上是真正的“运行库”<ul>
<li>&#x2F;usr&#x2F;lib&#x2F;crt1.o</li>
<li>&#x2F;usr&#x2F;lib&#x2F;crti.o</li>
<li>&#x2F;usr&#x2F;lib&#x2F;crtn.o</li>
</ul>
</li>
</ul>
<blockquote>
<p>libc有时时专指libc.so这个库文件，而说glibc时指的是glibc提供的所有库文件</p>
</blockquote>
<h3 id="uClibc"><a href="#uClibc" class="headerlink" title="uClibc"></a>uClibc</h3><p>uClibc 是一个面向嵌入式Linux系统的小型的C标准库。最初uClibc是为了支持uClinux而开发，这是一个不需要内存管理单元（MMU）的Linux版本。uClibc比一般用于Linux发行版的C库GNU C Library (glibc)要小得多， uClibc专注于嵌入式Linux。很多功能可以根据空间需求进行取舍。</p>
<h3 id="Newlib"><a href="#Newlib" class="headerlink" title="Newlib"></a>Newlib</h3><p>Newlib 是一个面向嵌入式系统的C运行库。最初是由Cygnus Solutions收集组装的一个源代码集合，取名为newlib，现在由Red Hat维护，目前的最新的版本是2.1.0。对于与GNU兼容的嵌入式C运行库，Newlib并不是唯一的选择，但是从成熟度来讲，newlib是最优秀的。newlib可移植性强，具有可重入特性、功能完备等特点，已广泛应用于各种嵌入式系统中。Cygwin目前使用Newlib来作为它的C标准库。</p>
<h2 id="动态连接库制作"><a href="#动态连接库制作" class="headerlink" title="动态连接库制作"></a>动态连接库制作</h2><ol>
<li>Windows环境下 <strong>*.dll</strong> (dynamic link library)</li>
<li>Linux环境下 <strong>*.so</strong> (shared object)</li>
<li>Mac环境下 <strong>*.dylib</strong> (dynamic library)</li>
</ol>
<h3 id="Linux环境"><a href="#Linux环境" class="headerlink" title="Linux环境"></a>Linux环境</h3><h4 id="准备源码"><a href="#准备源码" class="headerlink" title="准备源码"></a>准备源码</h4><p>目录结构如下（计划把 <em>test&#x2F;</em> 做成共享对象）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tree -L 2</span><br><span class="line">.</span><br><span class="line">├── Makefile</span><br><span class="line">├── main.c</span><br><span class="line">├── test</span><br><span class="line">│   ├── Makefile</span><br><span class="line">│   ├── sort.c</span><br><span class="line">│   ├── sort.h</span><br><span class="line">└── test.h</span><br></pre></td></tr></table></figure>

<h4 id="编译源码"><a href="#编译源码" class="headerlink" title="编译源码"></a>编译源码</h4><h5 id="源码编译成-so"><a href="#源码编译成-so" class="headerlink" title="源码编译成*.so"></a>源码编译成*.so</h5><ol>
<li>将 <strong>*.c</strong> 文件编译成 <strong>*.o</strong> 文件<ul>
<li>-fpic：生成适合在共享库中使用的位置无关代码（PIC-&gt;位置无关代码）</li>
<li>-c：编译时保留 *.o 中间对象（下一步生成 *.so 需要用到）</li>
<li>-o：不加该选项，默认生成与第一个源码文件同名的 *.o 对象文件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcc -fpic -c sort.c</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>把 <strong>*.o</strong> 文件生成动态库 <strong>*.so</strong><ul>
<li>lib：前缀，固定格式</li>
<li>xxx：名称，自己确定</li>
<li>.so：后缀，固定格式<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcc -shared sort.o -o libsort.so</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h4 id="使用动态库"><a href="#使用动态库" class="headerlink" title="使用动态库"></a>使用动态库</h4><h5 id="编译链接动态库"><a href="#编译链接动态库" class="headerlink" title="编译链接动态库"></a>编译链接动态库</h5><ol>
<li>链接动态库编译成可执行文件 main<ul>
<li>-I：优先头文件匹配目录</li>
<li>-L：库的存储路径</li>
<li>-l：库的名称（不需要“lib”和扩展名“.so”）<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcc main.c -o main -I ./ -L ./ -l sort </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">目录接口如下：</span></span><br><span class="line">tree -L 2</span><br><span class="line">.</span><br><span class="line">├── Makefile</span><br><span class="line">├── main</span><br><span class="line">├── main.c</span><br><span class="line">├── test</span><br><span class="line">│   ├── Makefile</span><br><span class="line">│   ├── libsort.so</span><br><span class="line">│   ├── sort.c</span><br><span class="line">│   ├── sort.h</span><br><span class="line">│   └── sort.o</span><br><span class="line">└── test.h</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h5 id="运行可执行文件"><a href="#运行可执行文件" class="headerlink" title="运行可执行文件"></a>运行可执行文件</h5><ol>
<li>运行可执行文件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./main</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">报错信息如下</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./main: error <span class="keyword">while</span> loading shared libraries: libsort.so: cannot open shared object file: No such file or directory</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看依赖信息</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ldd main</span></span><br><span class="line">linux-vdso.so.1 (0x00007fff7bf58000)</span><br><span class="line">libsort.so =&gt; not found               # 未找到sort动态库，因为main只知道依赖库名，而不知道库文件放在哪里</span><br><span class="line">libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007fd92403e000)</span><br><span class="line">/lib64/ld-linux-x86-64.so.2 (0x00007fd924632000)</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>原因是动态链接库不会被包含在 main 可执行文件内。</li>
<li>当系统加载可执行代码时候，能够知道其所依赖的库的名字，但是还需要知道绝对路径。此时就需要系统的动态载入器来获取该绝对路径，对于elf格式的可执行程序是由ld-linux.so来完成的，搜索路径为：<ul>
<li>——&gt; DT_RPATH段 </li>
<li>——&gt; 环境变量LD_LIBRARY_PATH </li>
<li>——&gt; &#x2F;etc&#x2F;ld.so.cache文件列表 </li>
<li>——&gt; &#x2F;lib&#x2F;，&#x2F;usr&#x2F;lib</li>
<li>目录找到库文件后将其载入内存。</li>
</ul>
</li>
</ul>
<h5 id="添加库文件路径"><a href="#添加库文件路径" class="headerlink" title="添加库文件路径"></a>添加库文件路径</h5><h6 id="临时修改Linux环境变量LD-LIBRARY-PATH"><a href="#临时修改Linux环境变量LD-LIBRARY-PATH" class="headerlink" title="临时修改Linux环境变量LD_LIBRARY_PATH"></a>临时修改Linux环境变量LD_LIBRARY_PATH</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export LD_LIBRARY_PATH=/动态库的绝对路径:$LD_LIBRARY_PATH</span><br></pre></td></tr></table></figure>
<p>实例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">export</span> LD_LIBRARY_PATH=/mnt/d/workspace/CLionProjects/test1/test:<span class="variable">$LD_LIBRARY_PATH</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$LD_LIBRARY_PATH</span></span></span><br><span class="line">/mnt/d/workspace/CLionProjects/test1/test:</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ldd main</span></span><br><span class="line">linux-vdso.so.1 (0x00007fff0bb8f000)</span><br><span class="line">libsort.so =&gt; /mnt/d/workspace/CLionProjects/test1/test/libsort.so (0x00007fd523143000)</span><br><span class="line">libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007fd522d52000)</span><br><span class="line">/lib64/ld-linux-x86-64.so.2 (0x00007fd523548000)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./main</span></span><br><span class="line">Hello, World!</span><br><span class="line">中位数：2.0</span><br><span class="line">name=zangh,age=32</span><br><span class="line">最长回文字段为：</span><br><span class="line">my name is zangheng</span><br></pre></td></tr></table></figure>

<h6 id="用户层次上更改Linux环境变量"><a href="#用户层次上更改Linux环境变量" class="headerlink" title="用户层次上更改Linux环境变量"></a>用户层次上更改Linux环境变量</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim ~/.bashrc</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在最后一行加入</span></span><br><span class="line">export LD_LIBRARY_PATH=/动态库的绝对路径:$LD_LIBRARY_PATH</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">source</span> ~/.bashrc</span></span><br></pre></td></tr></table></figure>

<h6 id="修改系统级别环境变量"><a href="#修改系统级别环境变量" class="headerlink" title="修改系统级别环境变量"></a>修改系统级别环境变量</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim /etc/profile</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在最后一行加入</span></span><br><span class="line">export LD_LIBRARY_PATH=/动态库的绝对路径:$LD_LIBRARY_PATH</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">source</span> /etc/profile</span></span><br></pre></td></tr></table></figure>

<h6 id="修改-x2F-etc-x2F-ld-so-cache文件列表"><a href="#修改-x2F-etc-x2F-ld-so-cache文件列表" class="headerlink" title="修改&#x2F;etc&#x2F;ld.so.cache文件列表"></a>修改&#x2F;etc&#x2F;ld.so.cache文件列表</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim /etc/ld.so.conf</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在最后一行加入</span></span><br><span class="line">export LD_LIBRARY_PATH=/动态库的绝对路径:$LD_LIBRARY_PATH</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ldconfig</span></span><br></pre></td></tr></table></figure>

<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ol>
<li><a href="https://www.cnblogs.com/grooovvve/p/12907659.html">基础概念——C标准、C运行库和glibc</a></li>
<li><a href="https://www.cnblogs.com/grooovvve/p/10740524.html">基础概念——何为GNU与GCC</a></li>
</ol>
]]></content>
      <categories>
        <category>C/C++</category>
        <category>libs</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>make</tag>
        <tag>libs</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式事务</title>
    <url>/2023/09/08/distributed-tx/</url>
    <content><![CDATA[<h2 id="两阶段提交与三阶段提交的区别"><a href="#两阶段提交与三阶段提交的区别" class="headerlink" title="两阶段提交与三阶段提交的区别"></a>两阶段提交与三阶段提交的区别</h2><h3 id="两阶段提交"><a href="#两阶段提交" class="headerlink" title="两阶段提交"></a>两阶段提交</h3><h3 id="三阶段提交"><a href="#三阶段提交" class="headerlink" title="三阶段提交"></a>三阶段提交</h3>]]></content>
      <categories>
        <category>分布式</category>
        <category>一致性原理</category>
      </categories>
      <tags>
        <tag>一致性原理</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx调试环境搭建</title>
    <url>/2023/06/20/dev-nginx-debug/</url>
    <content><![CDATA[<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ol>
<li><a href="https://blog.csdn.net/gybshen/article/details/125826209">使用CLion+WSL debug nginx源码</a></li>
<li><a href="https://github.com/YuXiangZhao/nginx_cmake">Nginx-CMake</a></li>
</ol>
]]></content>
      <categories>
        <category>开发语言</category>
        <category>C</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>ngx</tag>
        <tag>WSL2</tag>
      </tags>
  </entry>
  <entry>
    <title>单片机c51基本概念</title>
    <url>/2023/07/06/c51-ts-notes/</url>
    <content><![CDATA[<h3 id="时序周期"><a href="#时序周期" class="headerlink" title="时序周期"></a>时序周期</h3><h4 id="晶振频率"><a href="#晶振频率" class="headerlink" title="晶振频率"></a>晶振频率</h4><h5 id="晶振的原理"><a href="#晶振的原理" class="headerlink" title="晶振的原理"></a>晶振的原理</h5><p>石英晶体利用压电效应在电路中用作时间或者频率基准源</p>
<ul>
<li>其不仅为集成电路提供稳定的时钟信号</li>
<li>也为无线电发射器和接收器提供稳定的频率</li>
</ul>
<h5 id="晶振的稳定"><a href="#晶振的稳定" class="headerlink" title="晶振的稳定"></a>晶振的稳定</h5><blockquote>
<p>频率的变化量经常用ppm&#x2F;ppb表示晶体频率会偏离标称频率多少，值越小精度越高（晶振的频率误差是晶振重要参数之一）</p>
</blockquote>
<p>频率稳定度通常分为长期和短期两种，是用来衡量振荡频率保持不变的能力。响频率稳定度：</p>
<ul>
<li>老化</li>
<li>温度</li>
<li>电压变化</li>
<li>激励电平</li>
<li>负载电容</li>
</ul>
<span id="more"></span>

<h4 id="时序周期-1"><a href="#时序周期-1" class="headerlink" title="时序周期"></a>时序周期</h4><h5 id="周期关系"><a href="#周期关系" class="headerlink" title="周期关系"></a>周期关系</h5><p><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/c51/2021010512382661.png" alt="时序周期关系图"></p>
<ul>
<li>震荡周期：为单片机提供定时信号的震荡源的周期（晶振周期或外加振荡周期）</li>
<li>状态周期：2个振荡周期为1个状态周期，用S表示。振荡周期又称 <strong>S周期</strong> 或 <strong>时钟周期</strong></li>
<li>机器周期：1个机器周期含6个状态周期，12个振荡周期</li>
<li>指令周期：完成1条指令所占用的全部时间，它以机器周期为单位</li>
</ul>
<h5 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h5><p>外界晶振为 12MHz 的 51 单片机相关周期的具体值（单位：us微秒）：<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/c51/381287b0112f44c947d7e56377c0b5a2.jpg" alt="举例周期计算图"></p>
<ul>
<li>振荡周期&#x3D;1&#x2F;12us</li>
<li>状态周期&#x3D;1&#x2F;6us</li>
<li>机器周期&#x3D;1us</li>
<li>指令周期&#x3D;1~4us</li>
</ul>
<h3 id="串口通信"><a href="#串口通信" class="headerlink" title="串口通信"></a>串口通信</h3><p>串口通信(Serial Communication)，是指外设和计算机间通过数据信号线、地线等按位进行传输数据的一种通信方式，属于串行通信方式。<br>串口是一种接口标准，它规定了接口的电气标准，没有规定接口插件电缆以及使用的协议。</p>
<h4 id="串行通信与并行通信"><a href="#串行通信与并行通信" class="headerlink" title="串行通信与并行通信"></a>串行通信与并行通信</h4><p>按照数据传送方式划分</p>
<h5 id="串行通信"><a href="#串行通信" class="headerlink" title="串行通信"></a>串行通信</h5><p>串行通信是指使用一条数据线，将数据一位一位地依次传输，每一位数据占据一个固定的时间长度。<br>其只需要少数几条线就可以在系统间交换信息，特别适用于计算机、计算机与外设之间的远距离通信。<br>如下图所示：<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/c51/20230706141850.png" alt="串行通信示意图"></p>
<p>串行通信的特点：传输线少，长距离传送时成本低，且可以利用电话网等现成的设备，但数据的传送控制比并行通信复杂</p>
<h5 id="并行通信"><a href="#并行通信" class="headerlink" title="并行通信"></a>并行通信</h5><p>并行通信通常是将数据字节的各位用多条数据线同时进行传送，通常是8位、16位、32位等数据一起传输。<br>如下图所示：<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/c51/20230706141850.png" alt="并行通信示意图"></p>
<p>并行通信的特点：</p>
<ul>
<li>控制简单、传输速度快</li>
<li>由于传输线较多，长距离传送时成本高且接收方的各位同时接收存在困难</li>
<li>抗干扰能力差</li>
</ul>
<h4 id="异步通信与同步通信"><a href="#异步通信与同步通信" class="headerlink" title="异步通信与同步通信"></a>异步通信与同步通信</h4><p>按照通信的数据同步方式划分</p>
<h5 id="异步通信"><a href="#异步通信" class="headerlink" title="异步通信"></a>异步通信</h5><p>异步通信是指通信的发送与接收设备使用各自的时钟控制数据的发送和接收过程。为使双方的收发协调，要求发送和接收设备的时钟尽可能一致<br>异步通信是以字符（构成的帧）为单位进行传输，字符与字符之间的间隙（时间间隔）是任意的，但每个字符中的各位是以固定的时间传送的，即字符之间不一定有“位间隔”的整数倍的关系，但同一字符内的各位之间的距离均为“位间隔”的整数倍。</p>
<p>如下图所示：<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/c51/20230706145130.png" alt="异步通信示意图1"><br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/c51/20230706145145.png" alt="异步通信示意图2"></p>
<p>异步通信的特点：</p>
<ul>
<li>不要求收发双方时钟的严格一致，实现容易，设备开销较小</li>
<li>但每个字符要附加2~3位用于起止位，各帧之间还有间隔，传输效率不高</li>
</ul>
<h5 id="同步通信"><a href="#同步通信" class="headerlink" title="同步通信"></a>同步通信</h5><p>同步通信时要建立发送方时钟对接收方时钟的直接控制，使双方达到完全同步。<br>此时，传输数据的位之间的距离均为“位间隔”的整数倍，同时传送的字符间不留间隙，即保持位同步关系，也保持字符同步关系。<br>发送方对接收方的同步可以通过两种方法实现。</p>
<p>如下图所示：<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/c51/20230706150007.png" alt="同步通信示意图"></p>
<h4 id="单工、半双工与全双工通信"><a href="#单工、半双工与全双工通信" class="headerlink" title="单工、半双工与全双工通信"></a>单工、半双工与全双工通信</h4><p>按照数据的传输方向划分</p>
<h5 id="单工通信"><a href="#单工通信" class="headerlink" title="单工通信"></a>单工通信</h5><p>单工是指数据传输仅能沿一个方向，不能实现反向传输</p>
<p>如下图所示：<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/c51/20230706150357.png" alt="单工通信示意图"></p>
<h5 id="半双工通信"><a href="#半双工通信" class="headerlink" title="半双工通信"></a>半双工通信</h5><p>半双工是指数据传输可以沿两个方向，但需要分时进行</p>
<p>如下图所示：<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/c51/20230706150535.png" alt="半双工通信示意图"></p>
<h5 id="全双工通信"><a href="#全双工通信" class="headerlink" title="全双工通信"></a>全双工通信</h5><p>全双工是指数据可以同时进行双向传输</p>
<p>如下图所示：<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/c51/20230706150645.png" alt="全双工通信示意图"></p>
<h4 id="通信速率"><a href="#通信速率" class="headerlink" title="通信速率"></a>通信速率</h4><p>衡量通信性能的一个非常重要的参数就是通信速率，通常以比特率来表示（bitrate）。</p>
<h5 id="比特率"><a href="#比特率" class="headerlink" title="比特率"></a>比特率</h5><blockquote>
<p>比特率是每秒钟传输二进制代码的位数，单位是：位&#x2F;秒（bps）。</p>
</blockquote>
<p>举例 &#x3D;&gt; 每秒钟传送240个字符，而每个字符格式包含10位（1个起始位、1个停止位、8个数据位），则比特率为：</p>
<ul>
<li>10位 x 240 个&#x2F;秒 &#x3D; 2400 bps</li>
</ul>
<h5 id="波特率"><a href="#波特率" class="headerlink" title="波特率"></a>波特率</h5><blockquote>
<p>波特率表示每秒钟传输了所少个码元，码元是通信信号调制的概念，通信中常用时间间隔相同的符号来表示一个二进制数字，这样的信号称为码元。</p>
</blockquote>
<p>波特率与比特率之间的关系，举例 &#x3D;&gt;</p>
<ul>
<li>常见的通信传输中，用0V表示数字0，5V表示数字1，那么一个码元可以表示两种状态：0和1。此时：波特率 &#x3D; 比特率</li>
<li>如果在通信传输中，有0V、2V、4V和6V，那么一个码元可以表示四种状态：00、01、10和11。此时：波特率 &#x3D; 比特率&#x2F;2</li>
</ul>
<h4 id="接口标准"><a href="#接口标准" class="headerlink" title="接口标准"></a>接口标准</h4><p>串口通信的接口标准有很多，有RS-232C、RS-232、RS-422A、RS-485等。其中以 <strong>RS-232</strong> 和 <strong>RS-485</strong> 最为常用，RS-232是RS-232C的改进版，原理是一样的。</p>
<p>RS-232C接口规定使用 25针连接器，简称 <strong>DB25</strong>；还有另一个 9针的非标准连接器，简称 <strong>DB9</strong> （常用型号）。<br>如下是实物图：<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/c51/20230706154444.png" alt="RS-232C连接器实物图"></p>
<p>DB25、DB9接头都分公母（带针的为公头，带孔的位母头），其中DB9外观图：<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/c51/20230706154723.png" alt="RS-232C连接器公母头"></p>
<p>DB25、DB9接头常用管脚的功能说明如下图所示：<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/c51/20230706154856.png" alt="RS-232C管教说明图"></p>
<h4 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h4><p>RS232的通信协议比较简单，通常遵循96-N-8-1格式。格式规则如下：</p>
<ul>
<li>“96”表示通信的波特率为9600（更常用的位4800、115200等），异步串口通信因为没有时钟线需要保持通信的双方保持一致的波特率。</li>
<li>“N”表示的是无校验位，为了在长距离通信的过程中避免干扰，需要添加校验位来解决。常见的校验方法有奇校验（odd）、偶校验（even）、0校验（space）、1校验（mark）以及无校验（noparity）。</li>
<li>“8”表示的数据位数为8位，当然数据位数还可以是其它的长度。</li>
<li>“1”表示的是1位停止位，串口通讯的一个数据包从起始信号开始，直到停止信号结束。</li>
</ul>
]]></content>
      <categories>
        <category>单片机</category>
        <category>c51</category>
        <category>时序</category>
      </categories>
      <tags>
        <tag>单片机</tag>
        <tag>c51</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL2开发环境搭建</title>
    <url>/2023/06/20/dev-wsl2-setup/</url>
    <content><![CDATA[<h3 id="WSL简介"><a href="#WSL简介" class="headerlink" title="WSL简介"></a>WSL简介</h3><blockquote>
<p>Windows Subsystem for Linux（简称WSL）是一个在Windows 10\11上能够运行原生Linux二进制可执行文件（ELF格式）的兼容层。<br>它是由微软与Canonical公司合作开发，其目标是使纯正的Ubuntu、Debian等映像能下载和解压到用户的本地计算机，并且映像内的工具和实用工具能在此子系统上原生运行。</p>
</blockquote>
<ul>
<li>WSL提供了一个微软开发的Linux兼容内核接口（不包含Linux代码），来自Ubuntu的用户模式二进制文件在其上运行。</li>
<li>WSL基于Windows NT内核虚拟了Linux内核接口，这允许它执行未经修改的Linux ELF64二进制文件。</li>
<li>该子系统不能运行所有Linux软件，例如那些图形用户界面，以及那些需要未实现的Linux内核服务的软件。</li>
</ul>
<p>注：<strong>WSL用法类似VMWare、VirtualBox虚拟机软件，但是实现原理上不同且消耗资源更少</strong></p>
<span id="more"></span>

<h3 id="WSL安装"><a href="#WSL安装" class="headerlink" title="WSL安装"></a>WSL安装</h3><h4 id="wsl相关配置"><a href="#wsl相关配置" class="headerlink" title="wsl相关配置"></a>wsl相关配置</h4><ol>
<li><p>打开 <strong>开发人员模式</strong> 开关<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/wsl/20230620135430.png" alt="开发人员模式"></p>
</li>
<li><p>启用Windows的hyperV功能<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/wsl/20230620135945.png" alt="启用hyperV功能"></p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 如果通过UI操作，则不需要以下的命令配置</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">PS C:\Users\zangh&gt; dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">PS C:\Users\zangh&gt; dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>以上启用功能需要重启系统才能生效</li>
</ol>
<h4 id="安装wsl命令"><a href="#安装wsl命令" class="headerlink" title="安装wsl命令"></a>安装wsl命令</h4><ol>
<li>打开PowerShell客户端，输入以下命令进行wsl安装</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PS C:\Users\zangh&gt; wsl --install</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Win11下默认就是wsl2，所以此处不需要</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">PS C:\Users\zangh&gt; wsl --set-default-version 2</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>安装Ubuntu-18.04<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/wsl/20230620143424.png" alt="在商店中安装镜像"></p>
</li>
<li><p>启用Ubuntu-18.04</p>
<ol>
<li>点击上图中“打开”按钮</li>
<li>其他</li>
</ol>
</li>
</ol>
<h4 id="管理wsl命令"><a href="#管理wsl命令" class="headerlink" title="管理wsl命令"></a>管理wsl命令</h4><h5 id="常用命令列举"><a href="#常用命令列举" class="headerlink" title="常用命令列举"></a>常用命令列举</h5><ol>
<li>查看wsl状态</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PS C:\Users\zangh&gt; wsl -l -v</span><br><span class="line">  NAME            STATE           VERSION</span><br><span class="line">* Ubuntu-18.04    Running         2</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>关闭wsl服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止所有的镜像</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PS C:\Users\zangh&gt; wsl --shutdown</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止指定镜像</span></span><br><span class="line">PS C:\Users\zangh&gt; wsl -t Ubuntu-18.04</span><br><span class="line">PS C:\Users\zangh&gt; wsl -l -v</span><br><span class="line">  NAME            STATE           VERSION</span><br><span class="line">* Ubuntu-18.04    Stopped         2</span><br></pre></td></tr></table></figure>
</li>
<li><p>导出wsl服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PS C:\Users\zangh&gt; wsl --export Ubuntu-18.04 D:\个人资料\ubuntu18.04.tar</span><br><span class="line">PS C:\Users\zangh&gt; dir D:\个人资料</span><br></pre></td></tr></table></figure>
<p><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/wsl/20230620141825.png" alt="导出wsl镜像"><br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/wsl/20230620142001.png" alt="导出wsl镜像"></p>
</li>
<li><p>注销wsl服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PS C:\Users\zangh&gt; wsl --unregister Ubuntu-18.04</span><br></pre></td></tr></table></figure>
</li>
<li><p>导入wsl服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PS C:\Users\zangh&gt; wsl --import Ubuntu-18.04 D:\个人资料\ubuntu18.04.tar</span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="所有命令说明"><a href="#所有命令说明" class="headerlink" title="所有命令说明"></a>所有命令说明</h5><ul>
<li>列出分发：wsl -l</li>
<li>运行指定分发：wsl -d &lt;分发&gt;</li>
<li>更改新分发的默认安装版本：wsl –set-default-version <Version></li>
<li>将分发设置为默认值：wsl -s &lt;分发&gt;</li>
<li>更改指定分发的版本：wsl –set-version &lt;分发&gt; &lt;版本&gt;</li>
<li>立即终止所有运行的分发及 WSL2：wsl –shutdown</li>
<li>终止指定的分发（相当于关机）：wsl -t &lt;分发&gt;</li>
<li>注销分发并删除根文件系统：wsl –unregister &lt;分发&gt;</li>
<li>将指定的 tar 文件作为新分发导入：wsl –import <Distro> <InstallLocation> <FileName></li>
<li>将分发导出到 tar 文件：wsl –export &lt;Distro[分发]&gt; &lt;FileName[文件名，包含文件全路径]&gt;<br>例如：把分发CentOS7导出命令：wsl –export CentOS7 E:\CentOS7\rootfs.tar</li>
</ul>
<h4 id="wsl安装错误"><a href="#wsl安装错误" class="headerlink" title="wsl安装错误"></a>wsl安装错误</h4><h5 id="错误码：0x8007019e"><a href="#错误码：0x8007019e" class="headerlink" title="错误码：0x8007019e"></a>错误码：0x8007019e</h5><h6 id="错误现象"><a href="#错误现象" class="headerlink" title="错误现象"></a>错误现象</h6><p>WslRegisterDistribution failed with error: 0x8007019e</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Installing, this may take a few minutes...</span><br><span class="line">Installation Failed!</span><br><span class="line">Error: 0x8007019e</span><br><span class="line">Press any key to continue...</span><br></pre></td></tr></table></figure>
<p>原因：出现这个error的原因是：未安装Windows子系统支持。</p>
<h6 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h6><ol>
<li>win+x，选择Windows PowerShell（管理员）</li>
<li>输入：Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</li>
<li>回车，输入Y，重启！<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/wsl/20230620150609.png" alt="启用虚拟机平台服务"></li>
<li>重新打开已经安装的子系统，等几分钟，输入账户和密码。</li>
</ol>
<h5 id="错误码：0x800701bc"><a href="#错误码：0x800701bc" class="headerlink" title="错误码：0x800701bc"></a>错误码：0x800701bc</h5><h6 id="错误原因"><a href="#错误原因" class="headerlink" title="错误原因"></a>错误原因</h6><p>wsl1升级到wsl2之后，内核却没有升级，所以会出现这种错误提示！</p>
<h6 id="解决办法-1"><a href="#解决办法-1" class="headerlink" title="解决办法"></a>解决办法</h6><ol>
<li>下载最新的wsl安装包：<a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">wsl_update_x64.msi</a></li>
<li>安装包下载后，直接运行安装。</li>
</ol>
<h5 id="错误码：0x80370102"><a href="#错误码：0x80370102" class="headerlink" title="错误码：0x80370102"></a>错误码：0x80370102</h5><h6 id="错误原因-1"><a href="#错误原因-1" class="headerlink" title="错误原因"></a>错误原因</h6><p>没有开启虚拟化</p>
<h6 id="解决办法-2"><a href="#解决办法-2" class="headerlink" title="解决办法"></a>解决办法</h6><ol>
<li>控制面板-&gt;程序-&gt;启用或关闭windows功能，勾选虚拟机平台选项。<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/wsl/20230620150446.png" alt="启用虚拟机平台服务"></li>
<li>重启电脑</li>
</ol>
<h4 id="切换wsl源（国内）"><a href="#切换wsl源（国内）" class="headerlink" title="切换wsl源（国内）"></a>切换wsl源（国内）</h4><h5 id="备份原文件"><a href="#备份原文件" class="headerlink" title="备份原文件"></a>备份原文件</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zangh@zangh-pc:/etc/apt# su root</span><br><span class="line">输入密码</span><br><span class="line">root@zangh-pc:/etc/apt# cp sources.list sources.list.backup</span><br></pre></td></tr></table></figure>

<h5 id="国内镜像源"><a href="#国内镜像源" class="headerlink" title="国内镜像源"></a>国内镜像源</h5><h6 id="阿里云"><a href="#阿里云" class="headerlink" title="阿里云"></a>阿里云</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure>
<h6 id="中科大"><a href="#中科大" class="headerlink" title="中科大"></a>中科大</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure>
<h6 id="清华"><a href="#清华" class="headerlink" title="清华"></a>清华</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure>

<h5 id="替换镜像源"><a href="#替换镜像源" class="headerlink" title="替换镜像源"></a>替换镜像源</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@zangh-pc:/etc/apt# echo &#x27;&#x27; &gt; sources.list &amp;&amp; vi sources.list</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">黏贴阿里云镜像配置</span></span><br></pre></td></tr></table></figure>

<h5 id="刷新源配置"><a href="#刷新源配置" class="headerlink" title="刷新源配置"></a>刷新源配置</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@zangh-pc:/etc/apt# apt-get update &amp;&amp; apt-get upgrade</span><br></pre></td></tr></table></figure>

<h4 id="wsl远程连接"><a href="#wsl远程连接" class="headerlink" title="wsl远程连接"></a>wsl远程连接</h4><h5 id="启用ssh服务"><a href="#启用ssh服务" class="headerlink" title="启用ssh服务"></a>启用ssh服务</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@zangh-pc:/etc/ssh# service ssh start</span><br><span class="line">[sudo] password for zangh:</span><br><span class="line"> * Starting OpenBSD Secure Shell server sshd                                                                Could not load host key: /etc/ssh/ssh_host_rsa_key</span><br><span class="line">Could not load host key: /etc/ssh/ssh_host_ecdsa_key</span><br><span class="line">Could not load host key: /etc/ssh/ssh_host_ed25519_key</span><br><span class="line">root@zangh-pc:/etc/ssh$ service ssh status</span><br><span class="line"> * sshd is running</span><br></pre></td></tr></table></figure>
<ul>
<li>可以看到上sshd服务虽然启动成功了，但是报缺少ssh_host_ecdsa_key、ssh_host_ed25519_key文件（导致后面无法远程ssh登录）<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Connecting to 192.168.21x.x:22...</span><br><span class="line">Connection established.</span><br><span class="line">To escape to local shell, press Ctrl+Alt+].</span><br><span class="line"></span><br><span class="line">Socket error Event: 32 Error: 10053.</span><br><span class="line">Connection closing...Socket close.</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="生成ssh文件"><a href="#生成ssh文件" class="headerlink" title="生成ssh文件"></a>生成ssh文件</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@zangh-pc:/etc/ssh# dpkg-reconfigure openssh-server</span><br></pre></td></tr></table></figure>

<h5 id="启用密码登录"><a href="#启用密码登录" class="headerlink" title="启用密码登录"></a>启用密码登录</h5><p>默认wsl2的ubuntu版本中禁用了账号密码登录的功能</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@zangh-pc:/etc/ssh# vi /etc/ssh/sshd_config</span><br><span class="line">PasswordAuthentication yes</span><br></pre></td></tr></table></figure>

<h5 id="重启ssh服务"><a href="#重启ssh服务" class="headerlink" title="重启ssh服务"></a>重启ssh服务</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@zangh-pc:/etc/ssh# service ssh restart</span><br><span class="line"> * Restarting OpenBSD Secure Shell server sshd                [ OK ]</span><br></pre></td></tr></table></figure>

<h5 id="重新连接ssh"><a href="#重新连接ssh" class="headerlink" title="重新连接ssh"></a>重新连接ssh</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Welcome to Ubuntu 18.04.6 LTS (GNU/Linux 5.10.16.3-microsoft-standard-WSL2 x86_64)</span><br><span class="line"></span><br><span class="line"> * Documentation:  https://help.ubuntu.com</span><br><span class="line"> * Management:     https://landscape.canonical.com</span><br><span class="line"> * Support:        https://ubuntu.com/advantage</span><br><span class="line"></span><br><span class="line">  System information as of Wed Jun 21 19:15:39 CST 2023</span><br><span class="line"></span><br><span class="line">  System load:  0.0                Processes:           37</span><br><span class="line">  Usage of /:   0.7% of 250.98GB   Users logged in:     0</span><br><span class="line">  Memory usage: 5%                 IP address for eth0: 172.22.151.127</span><br><span class="line">  Swap usage:   0%</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Expanded Security Maintenance for Infrastructure is not enabled.</span><br><span class="line"></span><br><span class="line">0 updates can be applied immediately.</span><br><span class="line"></span><br><span class="line">Enable ESM Infra to receive additional future security updates.</span><br><span class="line">See https://ubuntu.com/esm or run: sudo pro status</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Last login: Wed Jun 21 19:05:50 2023 from 172.22.144.1</span><br><span class="line">zangh@zangh-pc:~$ </span><br></pre></td></tr></table></figure>

<h3 id="WSL开发"><a href="#WSL开发" class="headerlink" title="WSL开发"></a>WSL开发</h3><blockquote>
<p>这里主要介绍 <strong>CLion + WSL</strong> 实现Windows环境下的Linux应用的开发和调试环境搭建</p>
</blockquote>
<p>工具准备：</p>
<ul>
<li>CLion 2022.3.1</li>
<li>Windows11</li>
<li>WSL2（Ubuntu-18.04）</li>
<li>测试项目c-study02（构建工具为CMake）</li>
</ul>
<h4 id="配置工具链"><a href="#配置工具链" class="headerlink" title="配置工具链"></a>配置工具链</h4><p>菜单路径：File -&gt; Settings -&gt; Build,Execution,Deployment -&gt; Toolchains<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/wsl/20230709142656.png" alt="工具链配置"><br>CLion默认支持的工具类（开发编译环境）：</p>
<ul>
<li>MinGw（安装包较小，在Windows系统下虚拟出Linux-用的C库与真正的Linux有差别）</li>
<li>Cygwin（安装包较大，在Windows系统下虚拟出Linux-用的C库与真正的Linux有差别）</li>
<li>WSL（本文重点）</li>
<li>System（系统默认，在本地查找，Linux环境下方便使用）</li>
<li>Remote Host（远程）</li>
<li>Docker（远程）</li>
</ul>
<h5 id="选择WSL"><a href="#选择WSL" class="headerlink" title="选择WSL"></a>选择WSL</h5><p>wsl的配置如下：<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/wsl/20230709143636.png" alt="工具链配置"></p>
<h5 id="配置CMake"><a href="#配置CMake" class="headerlink" title="配置CMake"></a>配置CMake</h5><p>cmake配置如下：<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/wsl/20230709144050.png" alt="工具链配置"></p>
<h5 id="项目调试"><a href="#项目调试" class="headerlink" title="项目调试"></a>项目调试</h5><p>下图为在Ubuntu中执行（相当于传统的远程调试）</p>
<ol>
<li><p>编译过程<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/wsl/20230709145935.png" alt="项目调试图"></p>
</li>
<li><p>调试输出<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/wsl/20230709145336.png" alt="项目调试图"></p>
</li>
</ol>
<h3 id="WSL参考"><a href="#WSL参考" class="headerlink" title="WSL参考"></a>WSL参考</h3><ol>
<li><a href="https://blog.csdn.net/w492665264/article/details/127593308">wsl2 +ubuntu +linux开发环境</a></li>
<li><a href="https://blog.csdn.net/qq_37085158/article/details/125172803">WslRegisterDistribution failed with error_ 0x8007019e、0x800701bc、0x80370102</a></li>
<li><a href="https://learn.microsoft.com/zh-cn/windows/wsl/">适用于 Linux 的 Windows 子系统文档</a></li>
<li><a href="https://www.cnblogs.com/hjj801006/p/10898355.html">ssh连接：Socket error Event: 32 Error: 10053.</a></li>
</ol>
]]></content>
      <categories>
        <category>开发环境</category>
        <category>Linux</category>
        <category>WSL2</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>WSL2</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Docker服务</title>
    <url>/2023/05/28/docker-setup/</url>
    <content><![CDATA[<h2 id="通过YUM工具安装"><a href="#通过YUM工具安装" class="headerlink" title="通过YUM工具安装"></a>通过YUM工具安装</h2><h3 id="寻找合适的docker版本"><a href="#寻找合适的docker版本" class="headerlink" title="寻找合适的docker版本"></a>寻找合适的docker版本</h3><h4 id="查看Linux内核版本"><a href="#查看Linux内核版本" class="headerlink" title="查看Linux内核版本"></a>查看Linux内核版本</h4><ul>
<li>我是虚拟机装的Centos7，linux 3.10 内核，docker官方说至少3.8以上</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /etc/redhat-release </span></span><br><span class="line">CentOS Linux release 7.9.2009 (Core)</span><br><span class="line">[root@localhost ~]<span class="comment"># uname -a</span></span><br><span class="line">Linux localhost.localdomain 3.10.0-1160.el7.x86_64 <span class="comment">#1 SMP Mon Oct 19 16:18:59 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure>

<h3 id="安装docker-engine"><a href="#安装docker-engine" class="headerlink" title="安装docker-engine"></a>安装docker-engine</h3><h4 id="yum包管理器"><a href="#yum包管理器" class="headerlink" title="yum包管理器"></a>yum包管理器</h4><h5 id="升级最新版本"><a href="#升级最新版本" class="headerlink" title="升级最新版本"></a>升级最新版本</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># yum update -y</span></span><br><span class="line"><span class="comment"># 升级过程可能要一段时间，略...</span></span><br></pre></td></tr></table></figure>

<h5 id="安装需要的软件包"><a href="#安装需要的软件包" class="headerlink" title="安装需要的软件包"></a>安装需要的软件包</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># yum install -y yum-utils device-mapper-persistent-data lvm2</span></span><br></pre></td></tr></table></figure>

<h5 id="设置yum源"><a href="#设置yum源" class="headerlink" title="设置yum源"></a>设置yum源</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span></span><br><span class="line">已加载插件：fastestmirror</span><br><span class="line">adding repo from: https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">grabbing file https://download.docker.com/linux/centos/docker-ce.repo to /etc/yum.repos.d/docker-ce.repo</span><br><span class="line">repo saved to /etc/yum.repos.d/docker-ce.repo</span><br></pre></td></tr></table></figure>

<h4 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h4><h5 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看所有可用版本</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum list docker-ce --showduplicates | sort -r</span></span><br><span class="line">已加载插件：fastestmirror</span><br><span class="line">可安装的软件包</span><br><span class="line"> * updates: mirrors.cn99.com</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * extras: mirrors.cn99.com</span><br><span class="line">docker-ce.x86_64            3:20.10.9-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:20.10.8-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:20.10.7-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:20.10.6-3.el7                     </span><br></pre></td></tr></table></figure>

<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装选定可用版本，17.12.1可替换为上图的20.10.9</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum install -y docker-ce-17.12.1.ce</span></span><br></pre></td></tr></table></figure>

<h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动docker</span></span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl start docker</span></span><br><span class="line"><span class="comment"># 加入自启动服务</span></span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl enable docker</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</span><br></pre></td></tr></table></figure>

<h5 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker version</span></span><br><span class="line">Client:</span><br><span class="line"> Version:	17.12.1-ce</span><br><span class="line"> API version:	1.35</span><br><span class="line"> Go version:	go1.9.4</span><br><span class="line"> Git commit:	7390fc6</span><br><span class="line"> Built:	Tue Feb 27 22:15:20 2018</span><br><span class="line"> OS/Arch:	linux/amd64</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Engine:</span><br><span class="line">  Version:	17.12.1-ce</span><br><span class="line">  API version:	1.35 (minimum version 1.12)</span><br><span class="line">  Go version:	go1.9.4</span><br><span class="line">  Git commit:	7390fc6</span><br><span class="line">  Built:	Tue Feb 27 22:17:54 2018</span><br><span class="line">  OS/Arch:	linux/amd64</span><br><span class="line">  Experimental:	<span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h2 id="通过官方脚本安装"><a href="#通过官方脚本安装" class="headerlink" title="通过官方脚本安装"></a>通过官方脚本安装</h2><p><img data-src="https://img-blog.csdnimg.cn/30ab26a61ccb451ba598c55b59eff090.png" alt="安装截图"></p>
<h3 id="下载安装脚本"><a href="#下载安装脚本" class="headerlink" title="下载安装脚本"></a>下载安装脚本</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@docker01 src]# cd /usr/local/src/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载脚本并保存为docker_install.sh文件</span></span><br><span class="line">[root@docker01 src]# wget -q https://get.docker.com/ -O docker_install.sh</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">脚本会判断当前安装环境，自行选择安装</span></span><br><span class="line">[root@docker01 src]# sh docker_install.sh</span><br><span class="line">================================================================================</span><br><span class="line"></span><br><span class="line">To run Docker as a non-privileged user, consider setting up the</span><br><span class="line">Docker daemon in rootless mode for your user:</span><br><span class="line"></span><br><span class="line">    dockerd-rootless-setuptool.sh install</span><br><span class="line"></span><br><span class="line">Visit https://docs.docker.com/go/rootless/ to learn about rootless mode.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">To run the Docker daemon as a fully privileged service, but granting non-root</span><br><span class="line">users access, refer to https://docs.docker.com/go/daemon-access/</span><br><span class="line"></span><br><span class="line">WARNING: Access to the remote API on a privileged Docker daemon is equivalent</span><br><span class="line">         to root access on the host. Refer to the &#x27;Docker daemon attack surface&#x27;</span><br><span class="line">         documentation for details: https://docs.docker.com/go/attack-surface/</span><br><span class="line"></span><br><span class="line">================================================================================</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看docker服务状态</span></span><br><span class="line">[root@docker01 src]# systemctl status docker</span><br><span class="line">● docker.service - Docker Application Container Engine</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/docker.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: inactive (dead)</span><br><span class="line">     Docs: https://docs.docker.com</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加入开机自启动</span></span><br><span class="line">[root@docker01 src]# systemctl enable docker</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动服务</span></span><br><span class="line">[root@docker01 src]# systemctl start docker</span><br><span class="line">[root@docker01 src]# systemctl status docker</span><br><span class="line">● docker.service - Docker Application Container Engine</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/docker.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since 六 2022-05-28 21:47:49 CST; 6s ago</span><br><span class="line">     Docs: https://docs.docker.com</span><br><span class="line"> Main PID: 1393 (dockerd)</span><br><span class="line">    Tasks: 7</span><br><span class="line">   Memory: 34.7M</span><br><span class="line">   CGroup: /system.slice/docker.service</span><br><span class="line">           └─1393 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</span><br><span class="line"></span><br><span class="line">5月 28 21:47:47 docker01.zangh dockerd[1393]: time=&quot;2022-05-28T21:47:47.783608279+08:00&quot; level=info msg=&quot;ccRes...=grpc</span><br><span class="line">5月 28 21:47:47 docker01.zangh dockerd[1393]: time=&quot;2022-05-28T21:47:47.783615129+08:00&quot; level=info msg=&quot;Clien...=grpc</span><br><span class="line">5月 28 21:47:47 docker01.zangh dockerd[1393]: time=&quot;2022-05-28T21:47:47.824634346+08:00&quot; level=info msg=&quot;Loadi...art.&quot;</span><br><span class="line">5月 28 21:47:48 docker01.zangh dockerd[1393]: time=&quot;2022-05-28T21:47:48.729357337+08:00&quot; level=info msg=&quot;Defau...ress&quot;</span><br><span class="line">5月 28 21:47:48 docker01.zangh dockerd[1393]: time=&quot;2022-05-28T21:47:48.864526334+08:00&quot; level=info msg=&quot;Firew...ning&quot;</span><br><span class="line">5月 28 21:47:48 docker01.zangh dockerd[1393]: time=&quot;2022-05-28T21:47:48.972378763+08:00&quot; level=info msg=&quot;Loadi...one.&quot;</span><br><span class="line">5月 28 21:47:49 docker01.zangh dockerd[1393]: time=&quot;2022-05-28T21:47:48.999444294+08:00&quot; level=info msg=&quot;Docke...10.16</span><br><span class="line">5月 28 21:47:49 docker01.zangh dockerd[1393]: time=&quot;2022-05-28T21:47:48.999562103+08:00&quot; level=info msg=&quot;Daemo...tion&quot;</span><br><span class="line">5月 28 21:47:49 docker01.zangh dockerd[1393]: time=&quot;2022-05-28T21:47:49.043155492+08:00&quot; level=info msg=&quot;API l...sock&quot;</span><br><span class="line">5月 28 21:47:49 docker01.zangh systemd[1]: Started Docker Application Container Engine.</span><br><span class="line">Hint: Some lines were ellipsized, use -l to show in full.</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认安装docker最新稳定版本，也可以通过修改docker_install.sh脚本制定安装版本</span></span><br><span class="line">[root@docker01 src]# docker --version</span><br><span class="line">Docker version 20.10.16, build aa7e414</span><br><span class="line">[root@docker01 src]# docker ps </span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>云原生</category>
        <category>容器</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>centos7</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>安装ES服务（容器）</title>
    <url>/2023/05/27/elasticsearch-docker/</url>
    <content><![CDATA[<h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><h3 id="安装环境依赖"><a href="#安装环境依赖" class="headerlink" title="安装环境依赖"></a>安装环境依赖</h3><ol>
<li>预安装docker-ce环境，安装参考：<a href="https://blog.csdn.net/u012285269/article/details/124479943">查看</a>。</li>
<li>ES镜像下载（DockerHub）：<a href="https://hub.docker.com/_/elasticsearch">查看</a>。</li>
</ol>
<h3 id="增加资源限制"><a href="#增加资源限制" class="headerlink" title="增加资源限制"></a>增加资源限制</h3><h4 id="调高jvm的线程限制"><a href="#调高jvm的线程限制" class="headerlink" title="调高jvm的线程限制"></a>调高jvm的线程限制</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@es es]# vi /etc/sysctl.conf </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认为65530 =&gt; 改为262144</span></span><br><span class="line">vm.max_map_count=262144</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">刷新配置使生效</span></span><br><span class="line">[root@es es]# sysctl -p</span><br><span class="line">vm.max_map_count = 262144</span><br></pre></td></tr></table></figure>

<h4 id="调高文件句柄限制"><a href="#调高文件句柄限制" class="headerlink" title="调高文件句柄限制"></a>调高文件句柄限制</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@node01 local]# vi /etc/security/limits.conf</span><br><span class="line">* - nofile 65536</span><br><span class="line">* - nproc 4096</span><br></pre></td></tr></table></figure>

<h4 id="开启防火墙端口"><a href="#开启防火墙端口" class="headerlink" title="开启防火墙端口"></a>开启防火墙端口</h4><ol>
<li>9200（对外提供服务）</li>
<li>9300（集群之间通讯）</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@es es]# firewall-cmd --zone=public --add-port=9200/tcp --permanent</span><br><span class="line">[root@es es]# firewall-cmd --zone=public --add-port=9300/tcp --permanent</span><br><span class="line">success</span><br><span class="line">[root@es es]# firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<h2 id="单机版本"><a href="#单机版本" class="headerlink" title="单机版本"></a>单机版本</h2><h3 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h3><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p>ES安装目录及文件总览：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@es es]<span class="comment"># tree /usr/local/es/</span></span><br><span class="line">/usr/local/es/</span><br><span class="line">├── cleanup.sh</span><br><span class="line">├── config</span><br><span class="line">│   └── elasticsearch.yml</span><br><span class="line">├── data</span><br><span class="line">├── plugins</span><br><span class="line">└── restart.sh</span><br></pre></td></tr></table></figure>

<h5 id="安装目录"><a href="#安装目录" class="headerlink" title="安装目录"></a>安装目录</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建/usr/local/es目录进行安装</span></span><br><span class="line">[root@es <span class="built_in">local</span>]<span class="comment"># pwd</span></span><br><span class="line">/usr/local</span><br><span class="line">[root@es <span class="built_in">local</span>]<span class="comment"># mkdir es &amp;&amp; cd es</span></span><br><span class="line"><span class="comment"># 新建/usr/local/es/config目录，用于存放es配置</span></span><br><span class="line"><span class="comment"># 新建/usr/local/es/data目录，用于存放es数据</span></span><br><span class="line"><span class="comment"># 新建/usr/local/es/plugins目录，用于存放es插件，例如分词器IK</span></span><br><span class="line">[root@es es]<span class="comment"># mkdir config data plugins</span></span><br></pre></td></tr></table></figure>

<h5 id="目录权限"><a href="#目录权限" class="headerlink" title="目录权限"></a>目录权限</h5><h6 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h6><p>由于es不能使用root启动，所以此处把目录权限改为777最大并附上特殊权限SGID即2777中的2，保证新建的子文件沿用当目录权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@es es]<span class="comment"># chmod 2777 config/ data/ plugins/</span></span><br><span class="line"><span class="comment"># 最终的目录如下</span></span><br><span class="line">[root@es es]<span class="comment"># ll</span></span><br><span class="line">总用量 8</span><br><span class="line">drwxrwsrwx. 2 root root  31 4月  30 18:10 config</span><br><span class="line">drwxrwsrwx. 3 root root  19 4月  30 18:17 data</span><br><span class="line">drwxrwsrwx. 2 root root   6 4月  30 17:24 plugins</span><br></pre></td></tr></table></figure>

<h6 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h6><p>新增elasticsearch用户，因为es不允许以root用户启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@es es]<span class="comment"># useradd elasticsearch</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁止elasticsearch用户登录</span></span><br><span class="line">[root@es es]<span class="comment"># cat /etc/passwd</span></span><br><span class="line">... 略 ...</span><br><span class="line">elasticsearch:x:1000:1000::/home/elasticsearch:/sbin/nologin</span><br><span class="line">... 略 ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改config、data、plugins目录所属者为elasticsearch</span></span><br><span class="line">[root@es es]<span class="comment"># chown elasticsearch config/ data/ plugins/</span></span><br><span class="line">[root@es es]<span class="comment"># ll</span></span><br><span class="line">drwxr-xr-x. 2 elasticsearch root 6 4月  30 21:06 config</span><br><span class="line">drwxr-xr-x. 2 elasticsearch root 6 4月  30 21:06 data</span><br><span class="line">drwxr-xr-x. 2 elasticsearch root 6 4月  30 21:07 plugins</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加特殊权限SGID</span></span><br><span class="line">[root@es es]<span class="comment"># chmod 2755 config/ data/ plugins/</span></span><br><span class="line">[root@es es]<span class="comment"># ll</span></span><br><span class="line">drwxr-sr-x. 2 elasticsearch root  31 4月  30 21:14 config</span><br><span class="line">drwxr-sr-x. 2 elasticsearch root   6 4月  30 21:06 data</span><br><span class="line">drwxr-sr-x. 2 elasticsearch root   6 4月  30 21:07 plugins</span><br></pre></td></tr></table></figure>

<h6 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h6><p>通过检查容器内使用elasticsearch账号的uid&#x3D;1000，gid&#x3D;1000</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@es es]<span class="comment"># chown -R 1000:1000 /usr/local/es/</span></span><br></pre></td></tr></table></figure>

<h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><p>文件路径： .&#x2F;config&#x2F;elasticsearch.yml</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cluster.name: &quot;docker-cluster&quot;</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">存在跨域问题时，增加如下配置（例如elasticsearch-head连接时）</span></span><br><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: “*”</span><br></pre></td></tr></table></figure>

<h4 id="服务脚本"><a href="#服务脚本" class="headerlink" title="服务脚本"></a>服务脚本</h4><h5 id="启动脚本"><a href="#启动脚本" class="headerlink" title="启动脚本"></a>启动脚本</h5><p>脚本路径： .&#x2F;restart.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">name=elasticsearch</span><br><span class="line">cId=$(docker ps -a | grep <span class="variable">$name</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$name</span> container id : <span class="variable">$cId</span>&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$cId</span>&quot;</span> ]; <span class="keyword">then</span> </span><br><span class="line">     docker run --name <span class="variable">$name</span> \</span><br><span class="line">     -p 9200:9200 -p 9300:9300 \</span><br><span class="line">     --restart=always \</span><br><span class="line">     -v <span class="variable">$PWD</span>/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \</span><br><span class="line">     -v <span class="variable">$PWD</span>/data/:/usr/share/elasticsearch/data/ \</span><br><span class="line">     -v <span class="variable">$PWD</span>/plugins/:/usr/share/elasticsearch/plugins \</span><br><span class="line">     -e ES_JAVA_OPTS=<span class="string">&quot;-Xms512m -Xmx512m&quot;</span> \</span><br><span class="line">     -e <span class="string">&quot;discovery.type=single-node&quot;</span> \</span><br><span class="line">     -d elasticsearch:7.8.0</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">     sId=$(docker ps | grep <span class="variable">$name</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line">     <span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$sId</span>&quot;</span> ]; <span class="keyword">then</span> </span><br><span class="line">         docker stop <span class="variable">$sId</span></span><br><span class="line">     <span class="keyword">fi</span></span><br><span class="line">     docker start <span class="variable">$cId</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h5 id="清理脚本"><a href="#清理脚本" class="headerlink" title="清理脚本"></a>清理脚本</h5><p>脚本路径： .&#x2F;cleanup.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/bash</span></span><br><span class="line">name=elasticsearch</span><br><span class="line">cId=$(docker ps | grep <span class="variable">$name</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$cId</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;stop <span class="variable">$name</span> id:<span class="variable">$cId</span> ...&quot;</span></span><br><span class="line">   docker stop <span class="variable">$cId</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">sId=$(docker ps -a | grep <span class="variable">$name</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$sId</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;remove <span class="variable">$name</span> id:<span class="variable">$sId</span> !&quot;</span></span><br><span class="line">   docker <span class="built_in">rm</span> <span class="variable">$sId</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h4 id="检查服务"><a href="#检查服务" class="headerlink" title="检查服务"></a>检查服务</h4><h5 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h5><p>访问地址：<a href="http://192.168.0.190:9200/%EF%BC%8C%E5%87%BA%E7%8E%B0%E5%A6%82%E4%B8%8B%E8%A7%86%E5%9B%BE%E5%88%99%E8%A1%A8%E7%A4%BA%E6%88%90%E5%8A%9F%EF%BC%81">http://192.168.0.190:9200/，出现如下视图则表示成功！</a><br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/es/0bc6baee8d7e4798bf2ac31ded43da26.png" alt="版本信息截图"></p>
<h5 id="监控信息"><a href="#监控信息" class="headerlink" title="监控信息"></a>监控信息</h5><p>访问地址：curl <a href="http://192.168.0.190:9200/_cat/nodes?pretty">http://192.168.0.190:9200/_cat/nodes?pretty</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@10 ~]<span class="comment"># curl http://192.168.0.190:9200/_cat/nodes?pretty</span></span><br><span class="line">172.17.0.2 15 93 6 0.04 0.19 0.63 dilmrt * a5472c7e00a4</span><br></pre></td></tr></table></figure>

<h2 id="集群版本"><a href="#集群版本" class="headerlink" title="集群版本"></a>集群版本</h2><h3 id="部署步骤-1"><a href="#部署步骤-1" class="headerlink" title="部署步骤"></a>部署步骤</h3><p>部署参考：<strong>单机版本</strong></p>
<h4 id="节点部署"><a href="#节点部署" class="headerlink" title="节点部署"></a>节点部署</h4><table>
<thead>
<tr>
<th>节点名</th>
<th>ip:port</th>
<th>服务</th>
</tr>
</thead>
<tbody><tr>
<td>es-node1</td>
<td>192.168.0.191:9200、9300</td>
<td>elasticsearch</td>
</tr>
<tr>
<td>es-node2</td>
<td>192.168.0.192:9200、9300</td>
<td>elasticsearch</td>
</tr>
<tr>
<td>es-node3</td>
<td>192.168.0.193:9200、9300</td>
<td>elasticsearch</td>
</tr>
</tbody></table>
<h5 id="es-node1-配置文件"><a href="#es-node1-配置文件" class="headerlink" title="es-node1 配置文件"></a>es-node1 配置文件</h5><p>文件路径：.&#x2F;config&#x2F;elasticsearch.yml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 集群名称</span></span><br><span class="line">cluster.name: elasticsearch-cluster</span><br><span class="line"><span class="comment"># 当前节点</span></span><br><span class="line">cluster.initial_master_nodes: es-node1</span><br><span class="line">node.name: es-node1</span><br><span class="line">network.bind_host: 0.0.0.0</span><br><span class="line">network.publish_host: 192.168.0.191</span><br><span class="line"><span class="comment"># netowrk.host 等效于同时设置 network.bind_host 和 network.publish_host</span></span><br><span class="line"><span class="comment"># netowrk.host: 192.168.0.191</span></span><br><span class="line">http.port: 9200</span><br><span class="line">transport.tcp.port: 9300</span><br><span class="line">http.cors.enabled: <span class="literal">true</span></span><br><span class="line">http.cors.allow-origin: <span class="string">&quot;*&quot;</span></span><br><span class="line">node.master: <span class="literal">true</span></span><br><span class="line">node.data: <span class="literal">true</span></span><br><span class="line"><span class="comment"># 集群所有节点</span></span><br><span class="line">discovery.zen.ping.unicast.hosts: [<span class="string">&quot;192.168.0.191:9300&quot;</span>,<span class="string">&quot;192.168.0.192:9300&quot;</span>,<span class="string">&quot;192.168.0.193:9300&quot;</span>]</span><br></pre></td></tr></table></figure>

<h5 id="es-node2-配置文件"><a href="#es-node2-配置文件" class="headerlink" title="es-node2 配置文件"></a>es-node2 配置文件</h5><p>文件路径：.&#x2F;config&#x2F;elasticsearch.yml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 集群名称</span></span><br><span class="line">cluster.name: elasticsearch-cluster</span><br><span class="line"><span class="comment"># 当前节点</span></span><br><span class="line">cluster.initial_master_nodes: es-node2</span><br><span class="line">node.name: es-node2</span><br><span class="line">network.bind_host: 0.0.0.0</span><br><span class="line">network.publish_host: 192.168.0.192</span><br><span class="line"><span class="comment"># 同时设置network.bind_host和network.publish_host</span></span><br><span class="line"><span class="comment"># netowrk.host: 192.168.0.192</span></span><br><span class="line">http.port: 9200</span><br><span class="line">transport.tcp.port: 9300</span><br><span class="line">http.cors.enabled: <span class="literal">true</span></span><br><span class="line">http.cors.allow-origin: <span class="string">&quot;*&quot;</span></span><br><span class="line">node.master: <span class="literal">true</span></span><br><span class="line">node.data: <span class="literal">true</span></span><br><span class="line"><span class="comment"># 集群所有节点</span></span><br><span class="line">discovery.zen.ping.unicast.hosts: [<span class="string">&quot;192.168.0.191:9300&quot;</span>,<span class="string">&quot;192.168.0.192:9300&quot;</span>,<span class="string">&quot;192.168.0.193:9300&quot;</span>]</span><br></pre></td></tr></table></figure>

<h5 id="es-node3-配置文件"><a href="#es-node3-配置文件" class="headerlink" title="es-node3 配置文件"></a>es-node3 配置文件</h5><p>文件路径：.&#x2F;config&#x2F;elasticsearch.yml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 集群名称</span></span><br><span class="line">cluster.name: elasticsearch-cluster</span><br><span class="line"><span class="comment"># 当前节点</span></span><br><span class="line">cluster.initial_master_nodes: es-node3</span><br><span class="line">node.name: es-node3</span><br><span class="line">network.bind_host: 0.0.0.0</span><br><span class="line">network.publish_host: 192.168.0.193</span><br><span class="line"><span class="comment"># 同时设置network.bind_host和network.publish_host</span></span><br><span class="line"><span class="comment"># netowrk.host: 192.168.0.193</span></span><br><span class="line">http.port: 9200</span><br><span class="line">transport.tcp.port: 9300</span><br><span class="line">http.cors.enabled: <span class="literal">true</span></span><br><span class="line">http.cors.allow-origin: <span class="string">&quot;*&quot;</span></span><br><span class="line">node.master: <span class="literal">true</span></span><br><span class="line">node.data: <span class="literal">true</span></span><br><span class="line"><span class="comment"># 集群所有节点</span></span><br><span class="line">discovery.zen.ping.unicast.hosts: [<span class="string">&quot;192.168.0.191:9300&quot;</span>,<span class="string">&quot;192.168.0.192:9300&quot;</span>,<span class="string">&quot;192.168.0.193:9300&quot;</span>]</span><br></pre></td></tr></table></figure>

<h5 id="启动脚本-1"><a href="#启动脚本-1" class="headerlink" title="启动脚本"></a>启动脚本</h5><p>脚本路径： .&#x2F;restart.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">name=elasticsearch</span><br><span class="line">cId=$(docker ps -a | grep $name | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line">echo &quot;$name container id : $cId&quot; </span><br><span class="line"></span><br><span class="line">if [ -z &quot;$cId&quot; ]; then </span><br><span class="line">     docker run --name $name \</span><br><span class="line">     --restart=always \</span><br><span class="line">     --net=host \</span><br><span class="line">     -v $PWD/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \</span><br><span class="line">     -v $PWD/data/:/usr/share/elasticsearch/data/ \</span><br><span class="line">     -v $PWD/plugins/:/usr/share/elasticsearch/plugins \</span><br><span class="line">     -e ES_MIN_MEM=1g \</span><br><span class="line">     -e ES_MAX_MEM=1g \</span><br><span class="line">     -e ES_JAVA_OPTS=&quot;-Xms1g -Xmx1g&quot; \</span><br><span class="line">     -d elasticsearch:7.8.0</span><br><span class="line">else</span><br><span class="line">     sId=$(docker ps | grep $name | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line">     if [ -n &quot;$sId&quot; ]; then </span><br><span class="line">         docker stop $sId</span><br><span class="line">     fi</span><br><span class="line">     docker start $cId</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h4 id="检查服务-1"><a href="#检查服务-1" class="headerlink" title="检查服务"></a>检查服务</h4><p>1）访问地址：<a href="http://192.168.0.19{1~3}:9200/%EF%BC%8C%E5%87%BA%E7%8E%B0%E5%A6%82%E4%B8%8B%E8%A7%86%E5%9B%BE%E5%88%99%E8%A1%A8%E7%A4%BA%E6%88%90%E5%8A%9F%EF%BC%81">http://192.168.0.19{1~3}:9200/，出现如下视图则表示成功！</a><br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/es/07c301c581c34b3dbb3830464b7cf8b2.png" alt="正常截图01"></p>
<h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>依次启动3台es的node，结果发现各个节点各自为战并没有办法组成一个集群</p>
<ol>
<li>保证各个节点之间9200,9300端口互通，尤其注意防火墙是否开放了端口</li>
<li>出现如下图错误，可以通过删除.&#x2F;data&#x2F;nodes目录下数据后重启解决【原因可能是老数据产生了影响】<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/es/202e68a519dd45d28bdce7c6da274a4e.png" alt="错误截图01"></li>
</ol>
<h2 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h2><h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><p>配置文件config目录下有两个重要的配置文件</p>
<ul>
<li>es的基本配置文件：<strong>elasticsearch.yml</strong></li>
<li>es的日志配置文件：<strong>logging.yml</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.1、cluster.name: elasticsearch</span><br><span class="line">配置es的集群名称，默认是elasticsearch，es会自动发现在同一网段下的es，如果在同一网段下有多个集群，就可以用这个属性来区分不同的集群。</span><br><span class="line"></span><br><span class="line">1.2、node.name:<span class="string">&quot;Franz Kafka&quot;</span></span><br><span class="line">节点名，默认随机指定一个name列表中名字，该列表在es的jar包中config文件夹里name.txt文件中，其中有很多作者添加的有趣名字。</span><br><span class="line"></span><br><span class="line">1.3、node.master: <span class="literal">true</span></span><br><span class="line">指定该节点是否有资格被选举成为node，默认是<span class="literal">true</span>，es是默认集群中的第一台机器为master，如果这台机挂了就会重新选举master。</span><br><span class="line"></span><br><span class="line">1.4、node.data: <span class="literal">true</span></span><br><span class="line">指定该节点是否存储索引数据，默认为<span class="literal">true</span>。</span><br><span class="line"></span><br><span class="line">1.5、index.number_of_shards: 5</span><br><span class="line">设置默认索引分片个数，默认为5片。</span><br><span class="line"></span><br><span class="line">1.6、index.number_of_replicas: 1</span><br><span class="line">设置默认索引副本个数，默认为1个副本。</span><br><span class="line"></span><br><span class="line">1.7、path.conf: /path/to/conf</span><br><span class="line">设置配置文件的存储路径，默认是es根目录下的config文件夹。</span><br><span class="line"></span><br><span class="line">1.8、path.data: /path/to/data</span><br><span class="line">设置索引数据的存储路径，默认是es根目录下的data文件夹，可以设置多个存储路径，用逗号隔开，例：path.data: /path/to/data1,/path/to/data2 </span><br><span class="line"></span><br><span class="line">1.9、path.work: /path/to/work</span><br><span class="line">设置临时文件的存储路径，默认是es根目录下的work文件夹。</span><br><span class="line"></span><br><span class="line">1.10、path.logs: /path/to/logs</span><br><span class="line">设置日志文件的存储路径，默认是es根目录下的logs文件夹</span><br><span class="line"></span><br><span class="line">1.11、path.plugins: /path/to/plugins</span><br><span class="line">设置插件的存放路径，默认是es根目录下的plugins文件夹</span><br><span class="line"></span><br><span class="line">1.12、bootstrap.mlockall: <span class="literal">true</span></span><br><span class="line">设置为<span class="literal">true</span>来锁住内存。因为当jvm开始swapping时es的效率会降低，所以要保证它不swap，可以把ES_MIN_MEM和 ES_MAX_MEM两个环境变量设置成同一个值，并且保证机器有足够的内存分配给es。同时也要允许elasticsearch的进程可以锁住内存，linux下可以通过<span class="built_in">ulimit</span> -l unlimited命令。</span><br><span class="line"></span><br><span class="line">1.13、network.bind_host: 192.168.0.1</span><br><span class="line">设置绑定的ip地址，可以是ipv4或ipv6的，默认为0.0.0.0。</span><br><span class="line"></span><br><span class="line">1.14、network.publish_host: 192.168.0.1</span><br><span class="line">设置其它节点和该节点交互的ip地址，如果不设置它会自动判断，值必须是个真实的ip地址。</span><br><span class="line"></span><br><span class="line">1.15、network.host: 192.168.0.1</span><br><span class="line">这个参数是用来同时设置bind_host和publish_host上面两个参数。</span><br><span class="line"></span><br><span class="line">1.16、transport.tcp.port: 9300</span><br><span class="line">设置节点间交互的tcp端口，默认是9300。</span><br><span class="line"></span><br><span class="line">1.17、transport.tcp.compress: <span class="literal">true</span></span><br><span class="line">设置是否压缩tcp传输时的数据，默认为<span class="literal">false</span>，不压缩。</span><br><span class="line"></span><br><span class="line">1.18、http.port: 9200</span><br><span class="line">设置对外服务的http端口，默认为9200。</span><br><span class="line"></span><br><span class="line">1.19、http.max_content_length: 100mb</span><br><span class="line">设置内容的最大容量，默认100mb</span><br><span class="line"></span><br><span class="line">1.20、http.enabled: <span class="literal">false</span></span><br><span class="line">是否使用http协议对外提供服务，默认为<span class="literal">true</span>，开启。</span><br><span class="line"></span><br><span class="line">1.21、gateway.type: <span class="built_in">local</span></span><br><span class="line">gateway的类型，默认为<span class="built_in">local</span>即为本地文件系统，可以设置为本地文件系统，分布式文件系统，Hadoop的HDFS，和amazon的s3服务器。</span><br><span class="line"></span><br><span class="line">1.22、gateway.recover_after_nodes: 1</span><br><span class="line">设置集群中N个节点启动时进行数据恢复，默认为1。</span><br><span class="line"></span><br><span class="line">1.23、gateway.recover_after_time: 5m</span><br><span class="line">设置初始化数据恢复进程的超时时间，默认是5分钟。</span><br><span class="line"></span><br><span class="line">1.24、gateway.expected_nodes: 2</span><br><span class="line">设置这个集群中节点的数量，默认为2，一旦这N个节点启动，就会立即进行数据恢复。</span><br><span class="line"></span><br><span class="line">1.25、cluster.routing.allocation.node_initial_primaries_recoveries: 4</span><br><span class="line">初始化数据恢复时，并发恢复线程的个数，默认为4。</span><br><span class="line"></span><br><span class="line">1.26、cluster.routing.allocation.node_concurrent_recoveries: 2</span><br><span class="line">添加删除节点或负载均衡时并发恢复线程的个数，默认为4。</span><br><span class="line"></span><br><span class="line">1.27、indices.recovery.max_size_per_sec: 0</span><br><span class="line">设置数据恢复时限制的带宽，如入100mb，默认为0，即无限制。</span><br><span class="line"></span><br><span class="line">1.28、indices.recovery.concurrent_streams: 5</span><br><span class="line">设置这个参数来限制从其它分片恢复数据时最大同时打开并发流的个数，默认为5。</span><br><span class="line"></span><br><span class="line">1.29、discovery.zen.minimum_master_nodes: 1</span><br><span class="line">设置这个参数来保证集群中的节点可以知道其它N个有master资格的节点。默认为1，对于大的集群来说，可以设置大一点的值（2-4）</span><br><span class="line"></span><br><span class="line">1.30、discovery.zen.ping.timeout: 3s</span><br><span class="line">设置集群中自动发现其它节点时ping连接超时时间，默认为3秒，对于比较差的网络环境可以高点的值来防止自动发现时出错。</span><br><span class="line"></span><br><span class="line">1.31、discovery.zen.ping.multicast.enabled: <span class="literal">false</span></span><br><span class="line">设置是否打开多播发现节点，默认是<span class="literal">true</span>。</span><br><span class="line"></span><br><span class="line">1.32、discovery.zen.ping.unicast.hosts: [<span class="string">&quot;host1&quot;</span>, <span class="string">&quot;host2:port&quot;</span>, <span class="string">&quot;host3[portX-portY]&quot;</span>]</span><br><span class="line">设置集群中master节点的初始列表，可以通过这些节点来自动发现新加入集群的节点。</span><br><span class="line">下面是一些查询时的慢日志参数设置</span><br><span class="line">index.search.slowlog.level: TRACE</span><br><span class="line">index.search.slowlog.threshold.query.warn: 10s</span><br><span class="line">index.search.slowlog.threshold.query.info: 5s</span><br><span class="line">index.search.slowlog.threshold.query.debug: 2s</span><br><span class="line">index.search.slowlog.threshold.query.trace: 500ms</span><br><span class="line">index.search.slowlog.threshold.fetch.warn: 1s</span><br><span class="line">index.search.slowlog.threshold.fetch.info: 800ms</span><br><span class="line">index.search.slowlog.threshold.fetch.debug: 500ms</span><br><span class="line">index.search.slowlog.threshold.fetch.trace: 200ms</span><br></pre></td></tr></table></figure>

<h3 id="高级配置"><a href="#高级配置" class="headerlink" title="高级配置"></a>高级配置</h3><p>一个Elasticsearch节点会有多个线程池，但重要的是下面四个：索引（index）：主要是索引数据和删除数据操作（默认是cached类型）；搜索（search）：主要是获取，统计和搜索操作（默认是cached类型）；批量操作（bulk）：主要是对索引的批量操作（默认是cached类型）；更新（refresh）：主要是更新操作（默认是cached类型）。可以通过给设置一个参数来改变线程池的类型（type），例如，把索引的线程池改成blocking类型。</p>
<blockquote>
<p>下面是三种可以设置的线程池的类型：</p>
</blockquote>
<ol>
<li>cache线程池:：cache线程池是一个无限大小的线程池，如果有很多请求的话都会创建很多线程，下面是个例子：<ul>
<li>threadpool:</li>
<li>index:</li>
<li>type: cached</li>
</ul>
</li>
<li>fixed线程池：fixed线程池保持固定个数的线程来处理请求队列。size参数设置线程的个数，默认设置是cpu核心数的5倍qu。eue_size可以控制待处理请求队列的大小。默认是设置为-1，意味着无限制。当一个请求到来但队列满了的时候，reject_policy参数可以控制它的行为。默认是abort，会使那个请求失败。设置成caller会使该请求在io线程中执行。<ul>
<li>threadpool:</li>
<li>index:</li>
<li>type: fixed</li>
<li>size: 30</li>
<li>queue: 1000</li>
<li>reject_policy: caller</li>
</ul>
</li>
<li>blocking线程池：blocking线程池允许设置一个最小值（min，默认为1）和线程池大小（size，默认为cpu核心数的5倍）。它也有一个等待队列，队列的大小（queue_size ）默认是1000，当这队列满了的时候。它会根据定好的等待时间（wait_time，默认是60秒）来调用io线程，如果超时没有执行就会报错。<ul>
<li>threadpool:</li>
<li>index:</li>
<li>type: blocking</li>
<li>min: 1</li>
<li>size: 30</li>
<li>wait_time: 30shex</li>
</ul>
</li>
</ol>]]></content>
      <categories>
        <category>中间件</category>
        <category>存储</category>
        <category>ES</category>
      </categories>
      <tags>
        <tag>ES</tag>
        <tag>容器</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Gitlab服务</title>
    <url>/2023/05/27/gitlab-setup/</url>
    <content><![CDATA[<h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><h4 id="部署方式"><a href="#部署方式" class="headerlink" title="部署方式"></a>部署方式</h4><p>通过rpm包方式安装：从 <a href="https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/">清华镜像站</a> 选择 <a href="https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-14.9.4-ce.0.el7.x86_64.rpm">gitlab-ce-14.9.4-ce.0.el7.x86_64</a> 作为安装包</p>
<h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><h4 id="服务安装"><a href="#服务安装" class="headerlink" title="服务安装"></a>服务安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-4-3-centos local]# pwd</span><br><span class="line">/usr/local</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载rpm包</span></span><br><span class="line">[root@VM-4-3-centos local]# wget https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-14.9.4-ce.0.el7.x86_64.rpm --no-check-certificate</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装rpm包</span></span><br><span class="line">[root@VM-4-3-centos local]# rpm -ivh gitlab-ce-14.9.4-ce.0.el7.x86_64.rpm</span><br><span class="line">warning: gitlab-ce-14.9.4-ce.0.el7.x86_64.rpm: Header V4 RSA/SHA1 Signature, key ID f27eab47: NOKEY</span><br><span class="line">Preparing...                          ################################# [100%]</span><br><span class="line">Updating / installing...</span><br><span class="line">   1:gitlab-ce-14.9.4-ce.0.el7        ################################# [100%]</span><br><span class="line">It looks like GitLab has not been configured yet; skipping the upgrade script.</span><br><span class="line"></span><br><span class="line">       *.                  *.</span><br><span class="line">      ***                 ***</span><br><span class="line">     *****               *****</span><br><span class="line">    .******             *******</span><br><span class="line">    ********            ********</span><br><span class="line">   ,,,,,,,,,***********,,,,,,,,,</span><br><span class="line">  ,,,,,,,,,,,*********,,,,,,,,,,,</span><br><span class="line">  .,,,,,,,,,,,*******,,,,,,,,,,,,</span><br><span class="line">      ,,,,,,,,,*****,,,,,,,,,.</span><br><span class="line">         ,,,,,,,****,,,,,,</span><br><span class="line">            .,,,***,,,,</span><br><span class="line">                ,*,.</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     _______ __  __          __</span><br><span class="line">    / ____(_) /_/ /   ____ _/ /_</span><br><span class="line">   / / __/ / __/ /   / __ `/ __ \</span><br><span class="line">  / /_/ / / /_/ /___/ /_/ / /_/ /</span><br><span class="line">  \____/_/\__/_____/\__,_/_.___/</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">Thank you for installing GitLab!</span><br><span class="line">GitLab was unable to detect a valid hostname for your instance.</span><br><span class="line">Please configure a URL for your GitLab instance by setting `external_url`</span><br><span class="line">configuration in /etc/gitlab/gitlab.rb file.</span><br><span class="line">Then, you can start your GitLab instance by running the following command:</span><br><span class="line">  sudo gitlab-ctl reconfigure</span><br><span class="line"></span><br><span class="line">For a comprehensive list of configuration options please see the Omnibus GitLab readme</span><br><span class="line">https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/README.md</span><br><span class="line"></span><br><span class="line">Help us improve the installation experience, let us know how we did with a 1 minute survey:</span><br><span class="line">https://gitlab.fra1.qualtrics.com/jfe/form/SV_6kVqZANThUQ1bZb?installation=omnibus&amp;release=14-9</span><br></pre></td></tr></table></figure>

<h4 id="服务配置"><a href="#服务配置" class="headerlink" title="服务配置"></a>服务配置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-4-3-centos etc]# vi /etc/gitlab/gitlab.rb</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此处一定要修改，否则从项目中获取的项目url将是错误的</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">external_url <span class="string">&#x27;http://192.168.0.120/:8000&#x27;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">nginx[<span class="string">&#x27;listen_port&#x27;</span>] = 8000</span></span><br><span class="line"></span><br><span class="line">[root@VM-4-3-centos etc]# vi /var/opt/gitlab/nginx/conf/gitlab-http.conf</span><br><span class="line">server &#123; ## HTTPS server</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">listen *:80;</span></span><br><span class="line">  listen *:8000;</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">略...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新加载配置</span></span><br><span class="line">[root@VM-4-3-centos etc]# gitlab-ctl reconfigure</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动服务</span></span><br><span class="line">[root@VM-4-3-centos etc]# gitlab-ctl start</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看默认的密码</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始账户: root 密码: 5iveL!fe</span></span><br><span class="line">[root@VM-4-3-centos gitlab]# cat /etc/gitlab/initial_root_password </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">WARNING: This value is valid only <span class="keyword">in</span> the following conditions</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">         1. If provided manually (either via `GITLAB_ROOT_PASSWORD` environment variable or via `gitlab_rails[<span class="string">&#x27;initial_root_password&#x27;</span>]` setting <span class="keyword">in</span> `gitlab.rb`, it was provided before database was seeded <span class="keyword">for</span> the first time (usually, the first reconfigure run).</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">         2. Password hasn<span class="string">&#x27;t been changed manually, either via UI or via command line.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">#          If the password shown here doesn&#x27;</span>t work, you must reset the admin password following https://docs.gitlab.com/ee/security/reset_user_password.html<span class="comment">#reset-your-root-password.</span></span></span><br><span class="line"></span><br><span class="line">Password: h6bQqgY55cpm1t2EsPWpf2ITKjpvvoKX+FDln90+HmM=</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">NOTE: This file will be automatically deleted <span class="keyword">in</span> the first reconfigure run after 24 hours.</span></span><br></pre></td></tr></table></figure>

<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><ol>
<li>gitlab-ctl start： 启动gitlab</li>
<li>gitlab-ctl stop： 停止gitlab</li>
<li>gitlab-ctl status： 查看gitlab状态</li>
<li>gitlab-ctl restart： 重启服务</li>
</ol>
<h4 id="重置密码"><a href="#重置密码" class="headerlink" title="重置密码"></a>重置密码</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重置密码为12345678</span></span><br><span class="line">[root@gitlab01 gitlab]# gitlab-rails console -e production</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"> Ruby:         ruby 2.7.5p203 (2021-11-24 revision f69aeb8314) [x86_64-linux]</span><br><span class="line"> GitLab:       14.9.4 (eca17098bf8) FOSS</span><br><span class="line"> GitLab Shell: 13.24.0</span><br><span class="line"> PostgreSQL:   12.7</span><br><span class="line">------------------------------------------------------------[ booted in 31.23s ]</span><br><span class="line">Loading production environment (Rails 6.1.4.6)</span><br><span class="line">irb(main):001:0&gt; user=User.where(id:1).first</span><br><span class="line">=&gt; #&lt;User id:1 @root&gt;</span><br><span class="line">irb(main):002:0&gt; user.password=&#x27;12345678&#x27;</span><br><span class="line">=&gt; &quot;12345678&quot;</span><br><span class="line">irb(main):003:0&gt; user.save!</span><br><span class="line">=&gt; true</span><br><span class="line">irb(main):004:0&gt; quit</span><br></pre></td></tr></table></figure>

<h4 id="服务构成"><a href="#服务构成" class="headerlink" title="服务构成"></a>服务构成</h4><ol>
<li>nginx：静态Web服务器</li>
<li>gitlab-shell：用于处理Git命令和修改authorized keys列表</li>
<li>gitlab-workhorse：轻量级的反向代理服务器</li>
<li>logrotate：日志文件管理工具</li>
<li>postgresql：数据库</li>
<li>redis：缓存数据库</li>
<li>sidekiq：用于在后台执行队列任务（异步执行）</li>
<li>unicorn：An HTTP server for Rack applications，GitLab Rails应用是托管在这个服务器上面的。</li>
</ol>
<h4 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h4><ol>
<li>主配置文件：&#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb # 可以自定义一些邮件服务等</li>
<li>日志地址：&#x2F;var&#x2F;log&#x2F;gitlab&#x2F; # 对应各服务</li>
<li>服务地址：&#x2F;var&#x2F;opt&#x2F;gitlab&#x2F; # 对应各服务的主目录</li>
<li>仓库地址：&#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;git-data # 记录项目仓库等提交信息</li>
<li>重置配置：gitlab-ctl reconfigure # 不要乱用，会重置为最原始的配置的</li>
<li>重启服务：gitlab-ctl stop&#x2F;start&#x2F;restart # 启动命令</li>
<li>默认安装：postgres、nginx、redis、unicorn ……</li>
</ol>
<h4 id="故障排查"><a href="#故障排查" class="headerlink" title="故障排查"></a>故障排查</h4><p><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/gitlab/af25af88f48c484296f75b65d8bc782a.png" alt="安装完后错误截图"></p>
<ul>
<li>访问<a href="http://127.0.0.1:8000/%EF%BC%9B%E5%9F%BA%E6%9C%AC%E4%B8%8A%E8%BF%99%E7%A7%8D%E6%83%85%E5%86%B5%E9%83%BD%E6%98%AF%E5%9B%A0%E4%B8%BA%E4%B8%BB%E6%9C%BA%E7%9A%84%E5%86%85%E5%AD%98%E5%A4%AA%E5%B0%8F%E3%80%81%E5%86%85%E5%AD%98%E5%A4%AA%E5%B0%8F%E3%80%81%E5%86%85%E5%AD%98%E5%A4%AA%E5%B0%8F%EF%BC%81%EF%BC%81%EF%BC%81">http://127.0.0.1:8000/；基本上这种情况都是因为主机的内存太小、内存太小、内存太小！！！</a></li>
<li>gitlab服务至少需要占用4GB可用内存！！！</li>
</ul>
<h4 id="角色权限"><a href="#角色权限" class="headerlink" title="角色权限"></a>角色权限</h4><p>1）gitlab用户在组中有五种权限：Guest、Reporter、Developer、Master、Owner。</p>
<ul>
<li>Guest：可以创建issue、发表评论、不能读写版本库。</li>
<li>Reporter：可以克隆代码，不能提交，QA、PM可以赋予这个权限。</li>
<li>Developer：可以克隆代码、开发、提交、push、RD可以赋予这个权限。</li>
<li>Master：可以创建项目、添加 tag 、保护分支、添加项目成员、编辑项目、核心RD负责人可以赋予这个权限。</li>
<li>Owner：可以设置项目的访问权限-Visibility Level、删除项目、迁移项目、管理组成员、开发组leader可以赋予这个权限。</li>
</ul>
<p>2）gitlab中的组和项目有三种访问权限：Private、Internal、Public。</p>
<ul>
<li>private：只有组成员可以看到。</li>
<li>internal：只要登录的用户就能看到。</li>
<li>public：开源的所有的人都可以看到。</li>
</ul>]]></content>
      <categories>
        <category>CI/CD</category>
        <category>代码</category>
        <category>Gitlab</category>
      </categories>
      <tags>
        <tag>Gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Harbor镜像仓库（容器）</title>
    <url>/2023/05/25/harbor-docker/</url>
    <content><![CDATA[<h3 id="软件简介"><a href="#软件简介" class="headerlink" title="软件简介"></a>软件简介</h3><ul>
<li>Harbor 是为企业用户设计的容器镜像仓库开源项目，包括了权限管理（RBAC）、LDAP、审计、安全漏洞扫描、镜像验真、管理界面、自我注册、HA等企业必须得功能，同时针对中国用户的特点，设计镜像复制和中文支持等功能。</li>
<li>开源协议：Apache-2.0</li>
<li>开发语言：Go</li>
</ul>
<span id="more"></span>

<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><h4 id="下载在线安装包"><a href="#下载在线安装包" class="headerlink" title="下载在线安装包"></a>下载在线安装包</h4><blockquote>
<p>官方（离线|在线）安装包：<a href="https://github.com/goharbor/harbor/releases">harbor-offline-installer</a></p>
</blockquote>
<p>解压安装包到 <font color=#00f>&#x2F;usr&#x2F;local&#x2F;src</font> 目录下</p>
<ul>
<li>其中 <font color=#00f>harbor.yml.tmpl</font> 为harbor的主配置模板文件</li>
<li>其中 <font color=#00f>install.sh</font> 为在线安装脚本</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@habor01 src]<span class="comment"># ll</span></span><br><span class="line">total 12</span><br><span class="line">-rw-r--r--. 1 root root 10686 Nov  8 04:31 harbor-online-installer-v2.6.1.tgz</span><br><span class="line">[root@habor01 src]<span class="comment"># tar zxf harbor-online-installer-v2.6.1.tgz -C /usr/local/</span></span><br><span class="line">[root@habor01 src]<span class="comment"># cd /usr/local/harbor &amp;&amp; ll</span></span><br><span class="line">total 48</span><br><span class="line">-rw-r--r--. 1 root root  3639 Oct  9 23:35 common.sh</span><br><span class="line">-rw-r--r--. 1 root root 10491 Oct  9 23:35 harbor.yml.tmpl</span><br><span class="line">-rwxr-xr-x. 1 root root  3171 Oct  9 23:35 install.sh</span><br><span class="line">-rw-r--r--. 1 root root 11347 Oct  9 23:35 LICENSE</span><br><span class="line">-rwxr-xr-x. 1 root root  1881 Oct  9 23:35 prepare</span><br></pre></td></tr></table></figure>

<h4 id="修改主配置文件"><a href="#修改主配置文件" class="headerlink" title="修改主配置文件"></a>修改主配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@habor01 harbor]<span class="comment"># cp harbor.yml.tmpl harbor.yml</span></span><br><span class="line">[root@habor01 harbor]<span class="comment"># vi harbor.yml</span></span><br><span class="line">……</span><br><span class="line"><span class="comment"># The IP address or hostname to access admin UI and registry service.</span></span><br><span class="line"><span class="comment"># DO NOT use localhost or 127.0.0.1, because Harbor needs to be accessed by external clients.</span></span><br><span class="line">hostname: 172.16.5.100</span><br><span class="line">……</span><br></pre></td></tr></table></figure>

<h4 id="安装harbor镜像"><a href="#安装harbor镜像" class="headerlink" title="安装harbor镜像"></a>安装harbor镜像</h4><h5 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h5><p>使用在线脚本安装（重启也可以使用此脚本，尽量避免使用 <font color=#f00>docker-compose down</font>：会把历史数据也清除掉！！！）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@habor01 harbor]<span class="comment"># sh install.sh</span></span><br></pre></td></tr></table></figure>

<h5 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二"></a>步骤二</h5><p>出现错误：ERROR:root:Error: The protocol is https but attribute ssl_cert is not set（<font color=#00f><br>  需要注释掉https相关的配置</font>）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@habor01 harbor]<span class="comment"># vi harbor.yml</span></span><br><span class="line"><span class="comment"># https related config</span></span><br><span class="line"><span class="comment">#https:</span></span><br><span class="line">  <span class="comment"># https port for harbor, default is 443</span></span><br><span class="line">  <span class="comment">#port: 443</span></span><br><span class="line">  <span class="comment"># The path of cert and key files for nginx</span></span><br><span class="line">  <span class="comment">#certificate: /your/certificate/path</span></span><br><span class="line">  <span class="comment">#private_key: /your/private/key/pat</span></span><br></pre></td></tr></table></figure>

<h5 id="步骤三"><a href="#步骤三" class="headerlink" title="步骤三"></a>步骤三</h5><p>再次使用脚本下载（下载过程可能会比较长）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@habor01 harbor]<span class="comment"># sh install.sh</span></span><br><span class="line">……</span><br><span class="line">✔ ----Harbor has been installed and started successfully.----</span><br><span class="line">……</span><br><span class="line">[root@habor01 harbor]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY                    TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">goharbor/redis-photon         v2.6.1    934d02f2e8d4   4 weeks ago   154MB</span><br><span class="line">goharbor/harbor-registryctl   v2.6.1    5cbe7d1a442c   4 weeks ago   136MB</span><br><span class="line">goharbor/registry-photon      v2.6.1    aa52e06997ab   4 weeks ago   77.5MB</span><br><span class="line">goharbor/nginx-photon         v2.6.1    a4c36adb555e   4 weeks ago   153MB</span><br><span class="line">goharbor/harbor-log           v2.6.1    d3fd13498bdc   4 weeks ago   161MB</span><br><span class="line">goharbor/harbor-jobservice    v2.6.1    98f077f5b101   4 weeks ago   241MB</span><br><span class="line">goharbor/harbor-core          v2.6.1    a34774b55989   4 weeks ago   207MB</span><br><span class="line">goharbor/harbor-portal        v2.6.1    9bbdf6f14337   4 weeks ago   162MB</span><br><span class="line">goharbor/harbor-db            v2.6.1    3b95e61dedfe   4 weeks ago   225MB</span><br><span class="line">goharbor/prepare              v2.6.1    6f69bcbe07f1   4 weeks ago   164MB</span><br><span class="line">[root@habor01 harbor]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                                COMMAND                  CREATED          STATUS                             PORTS                                   NAMES</span><br><span class="line">0865ca14d12a   goharbor/harbor-jobservice:v2.6.1    <span class="string">&quot;/harbor/entrypoint.…&quot;</span>   13 seconds ago   Up 6 seconds (health: starting)                                            harbor-jobservice</span><br><span class="line">f0a8b51cd3c6   goharbor/nginx-photon:v2.6.1         <span class="string">&quot;nginx -g &#x27;daemon of…&quot;</span>   13 seconds ago   Up 9 seconds (health: starting)    0.0.0.0:80-&gt;8080/tcp, :::80-&gt;8080/tcp   nginx</span><br><span class="line">a8f993936b6e   goharbor/harbor-core:v2.6.1          <span class="string">&quot;/harbor/entrypoint.…&quot;</span>   13 seconds ago   Up 10 seconds (health: starting)                                           harbor-core</span><br><span class="line">18f50f3361f4   goharbor/harbor-portal:v2.6.1        <span class="string">&quot;nginx -g &#x27;daemon of…&quot;</span>   13 seconds ago   Up 10 seconds (health: starting)                                           harbor-portal</span><br><span class="line">362fd8fb6834   goharbor/registry-photon:v2.6.1      <span class="string">&quot;/home/harbor/entryp…&quot;</span>   13 seconds ago   Up 10 seconds (health: starting)                                           registry</span><br><span class="line">7d5224997e99   goharbor/harbor-registryctl:v2.6.1   <span class="string">&quot;/home/harbor/start.…&quot;</span>   13 seconds ago   Up 10 seconds (health: starting)                                           registryctl</span><br><span class="line">5eaddedace72   goharbor/redis-photon:v2.6.1         <span class="string">&quot;redis-server /etc/r…&quot;</span>   13 seconds ago   Up 10 seconds (health: starting)                                           redis</span><br><span class="line">962951f6d7f8   goharbor/harbor-db:v2.6.1            <span class="string">&quot;/docker-entrypoint.…&quot;</span>   13 seconds ago   Up 10 seconds (health: starting)                                           harbor-db</span><br><span class="line">a7bbc1fac446   goharbor/harbor-log:v2.6.1           <span class="string">&quot;/bin/sh -c /usr/loc…&quot;</span>   13 seconds ago   Up 11 seconds (health: starting)   127.0.0.1:1514-&gt;10514/tcp               harbor-log</span><br></pre></td></tr></table></figure>

<h5 id="步骤四"><a href="#步骤四" class="headerlink" title="步骤四"></a>步骤四</h5><p>开放防火墙端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@habor01 harbor]<span class="comment"># firewall-cmd --zone=public --add-port=80/tcp --permanent</span></span><br><span class="line">success</span><br><span class="line">[root@habor01 harbor]<span class="comment"># firewall-cmd --reload</span></span><br><span class="line">success</span><br></pre></td></tr></table></figure>

<h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><h4 id="控制台管理"><a href="#控制台管理" class="headerlink" title="控制台管理"></a>控制台管理</h4><h5 id="访问后台"><a href="#访问后台" class="headerlink" title="访问后台"></a>访问后台</h5><blockquote>
<p>访问地址：<a href="http://172.16.5.100/%EF%BC%88%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81%EF%BC%9Aadmin/Harbor12345%E3%80%90%E9%BB%98%E8%AE%A4%E3%80%91%EF%BC%89">http://172.16.5.100:80/（账号密码：admin/Harbor12345【默认】）</a></p>
</blockquote>
<p><em>访问：<a href="http://172.16.5.100/v2/">http://172.16.5.100/v2/</a> 不返回错误，也可说明服务正常启动了。</em><br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/harbor/7bfd3a83806547398818697018d145df.png" alt="在这里插入图片描述"><br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/harbor/d39b1615ecc14abeaf966eae29834b8b.png" alt="在这里插入图片描述"></p>
<h5 id="添加仓库"><a href="#添加仓库" class="headerlink" title="添加仓库"></a>添加仓库</h5><p><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/harbor/785f0dfd66f647cb876a654ab3b9955e.png" alt="在这里插入图片描述"></p>
<p><del>daemon配置</del> &amp;重命名镜像（<font color=#00f>测试过有概率出现无法启动 docker 服务，待研究 …</font>）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@habor01 harbor]<span class="comment"># vi /etc/docker/daemon.json</span></span><br><span class="line">……</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;insecure-registries&quot;</span>: [<span class="string">&quot;172.16.5.100&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">……</span><br><span class="line">[root@habor01 harbor]<span class="comment"># docker pull alpine</span></span><br><span class="line">[root@habor01 harbor]<span class="comment"># docker tag alpine 172.16.5.100/xy/alpine:v1.0.0</span></span><br><span class="line">[root@habor01 harbor]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY                    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">goharbor/redis-photon         v2.6.1    934d02f2e8d4   4 weeks ago    154MB</span><br><span class="line">goharbor/harbor-registryctl   v2.6.1    5cbe7d1a442c   4 weeks ago    136MB</span><br><span class="line">goharbor/registry-photon      v2.6.1    aa52e06997ab   4 weeks ago    77.5MB</span><br><span class="line">goharbor/nginx-photon         v2.6.1    a4c36adb555e   4 weeks ago    153MB</span><br><span class="line">goharbor/harbor-log           v2.6.1    d3fd13498bdc   4 weeks ago    161MB</span><br><span class="line">goharbor/harbor-jobservice    v2.6.1    98f077f5b101   4 weeks ago    241MB</span><br><span class="line">goharbor/harbor-core          v2.6.1    a34774b55989   4 weeks ago    207MB</span><br><span class="line">goharbor/harbor-portal        v2.6.1    9bbdf6f14337   4 weeks ago    162MB</span><br><span class="line">goharbor/harbor-db            v2.6.1    3b95e61dedfe   4 weeks ago    225MB</span><br><span class="line">goharbor/prepare              v2.6.1    6f69bcbe07f1   4 weeks ago    164MB</span><br><span class="line">172.16.5.100/xy/alpine        v1.0.0    9c6f07244728   3 months ago   5.54MB</span><br><span class="line">alpine                        latest    9c6f07244728   3 months ago   5.54MB</span><br></pre></td></tr></table></figure>

<p>修改镜像仓库配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@habor01 harbor]<span class="comment"># vi /lib/systemd/system/docker.service</span></span><br><span class="line">……</span><br><span class="line"><span class="comment"># the default is not to use systemd for cgroups because the delegate issues still</span></span><br><span class="line"><span class="comment"># exists and systemd currently does not support the cgroup feature set required</span></span><br><span class="line"><span class="comment"># for containers run by docker</span></span><br><span class="line">ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock --insecure-registry 172.16.5.100</span><br><span class="line">……</span><br><span class="line">[root@habor01 harbor]<span class="comment"># systemctl daemon-reload</span></span><br><span class="line">[root@habor01 harbor]<span class="comment"># systemctl restart docker</span></span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;&gt; <strong>注</strong>：<font color=#f00>此方式不能与 <font color=#00f>1.3 镜像推送的配置</font> 并存，否则docker服务启动会报错。</font></p>
<p>私库登录并推送镜像到私库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@harbor01 harbor]<span class="comment"># docker login -u admin -p Harbor12345 http://172.16.5.100</span></span><br><span class="line">WARNING! Using --password via the CLI is insecure. Use --password-stdin.</span><br><span class="line">WARNING! Your password will be stored unencrypted <span class="keyword">in</span> /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/<span class="comment">#credentials-store</span></span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br><span class="line">[root@harbor01 harbor]<span class="comment"># docker push 172.16.5.100/xy/alpine:v1.0.0</span></span><br><span class="line">The push refers to repository [172.16.5.100/xy/alpine]</span><br><span class="line">994393dc58e7: Pushed </span><br><span class="line">v1.0.0: digest: sha256:1304f174557314a7ed9eddb4eab12fed12cb0cd9809e4c28f29af86979a3c870 size: 528</span><br></pre></td></tr></table></figure>

<p>在控制台中查看上传的镜像<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/harbor/f65a257ec36e4b98a8ef2096fd7c02e5.png" alt="在这里插入图片描述"></p>
<h4 id="管理命令行"><a href="#管理命令行" class="headerlink" title="管理命令行"></a>管理命令行</h4><blockquote>
<p>可以使用 docker-compose 来管理 Harbor。一些有用的命令如下所示，必须在与docker-compose.yml 相同的目录中运行。</p>
</blockquote>
<p>修改 harbor.yml 配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">[root@harbor01 harbor]<span class="comment"># docker-compose down -v</span></span><br><span class="line"><span class="comment"># 编辑配置文件 </span></span><br><span class="line">[root@harbor01 harbor]<span class="comment"># vi harbor.yml</span></span><br><span class="line"><span class="comment"># 填充配置</span></span><br><span class="line">[root@harbor01 harbor]<span class="comment"># ./prepare</span></span><br><span class="line"><span class="comment"># 启动Harbor</span></span><br><span class="line">[root@harbor01 harbor]<span class="comment"># docker-compose up -d</span></span><br></pre></td></tr></table></figure>

<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://blog.csdn.net/weixin_44175418/article/details/125939795">Docker–Harbor私有仓库搭建</a></p>
]]></content>
      <categories>
        <category>CI/CD</category>
        <category>仓库</category>
        <category>Harbor</category>
      </categories>
      <tags>
        <tag>容器</tag>
        <tag>Harbor</tag>
      </tags>
  </entry>
  <entry>
    <title>ELK单机版搭建（容器）</title>
    <url>/2023/05/04/elk-docker/</url>
    <content><![CDATA[<h1 id="ELK-简介"><a href="#ELK-简介" class="headerlink" title="ELK 简介"></a>ELK 简介</h1><p><strong>ELK</strong> 是三个开源软件的缩写：Elasticsearch , Logstash, Kibana , 它们都是开源软件。新增了一个FileBeat，它是一个轻量级的日志收集处理工具(Agent)<br>，Filebeat占用资源少，适合于在各个服务器上搜集日志后传输给Logstash，官方也推荐此工具。</p>
<p><strong>Elasticsearch</strong><br>是个开源分布式搜索引擎，提供搜集、分析、存储数据三大功能。它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。主要负责将日志索引并存储起来，方便业务方检索查询。</p>
<p><strong>Logstash</strong><br>主要是用来日志的搜集、分析、过滤日志的工具，支持大量的数据获取方式。一般工作方式为c&#x2F;s架构，client端安装在需要收集日志的主机上，server端负责将收到的各节点日志进行过滤、修改等操作在一并发往elasticsearch上去。是一个日志收集、过滤、转发的中间件，主要负责将各条业务线的各类日志统一收集、过滤后，转发给<br>Elasticsearch 进行下一步处理。</p>
<p><strong>Kibana</strong> 也是一个开源和免费的工具，Kibana可以为 Logstash 和 ElasticSearch 提供的日志分析友好的 Web 界面，可以帮助汇总、分析和搜索重要数据日志。</p>
<p><strong>Filebeat</strong> 隶属于 <strong>Beats</strong>，目前Beats包含四种工具：</p>
<ul>
<li><strong>Packetbeat</strong>（搜集网络流量数据）</li>
<li><strong>Topbeat</strong>（搜集系统、进程和文件系统级别的 CPU 和内存使用情况等数据）</li>
<li><strong>Filebeat</strong>（搜集文件数据）</li>
<li><strong>Winlogbeat</strong>（搜集 Windows 事件日志数据）</li>
</ul>
<p>官方地址：<a href="https://www.elastic.co/cn/">传送门</a></p>
<h1 id="ELK-原理"><a href="#ELK-原理" class="headerlink" title="ELK 原理"></a>ELK 原理</h1><h2 id="Logstash直接上传数据"><a href="#Logstash直接上传数据" class="headerlink" title="Logstash直接上传数据"></a>Logstash直接上传数据</h2><p><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/elk/20210309145450781.png" alt="Eleasticsearch + Kibana + Logstash组合"></p>
<ul>
<li>这是最简单的一种ELK架构方式。优点是搭建简单，易于上手。缺点是Logstash耗资源较大，运行占用CPU和内存高。另外没有消息队列缓存，存在数据丢失隐患。<br>此架构由Logstash分布于各个节点上搜集相关日志、数据，并经过分析、过滤后发送给远端服务器上的Elasticsearch进行存储。Elasticsearch将数据以分片的形式压缩存储并提供多种API供用户查询，操作。用户亦可以更直观的通过配置Kibana<br>Web方便的对日志查询，并根据数据生成报表。</li>
</ul>
<h2 id="Logstash-Mq上传数据"><a href="#Logstash-Mq上传数据" class="headerlink" title="Logstash+Mq上传数据"></a>Logstash+Mq上传数据</h2><p><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/elk/20210309145528934.png" alt="Logstash + Mq"></p>
<ul>
<li>此种架构引入了消息队列机制，位于各个节点上的Logstash<br>Agent先将数据&#x2F;日志传递给Kafka（或者Redis），并将队列中消息或数据间接传递给Logstash，Logstash过滤、分析后将数据传递给Elasticsearch存储。最后由Kibana将日志和数据呈现给用户。因为引入了Kafka（或者Redis）,所以即使远端Logstash<br>server因故障停止运行，数据将会先被存储下来，从而避免数据丢失。</li>
</ul>
<h2 id="Beats组件上传数据"><a href="#Beats组件上传数据" class="headerlink" title="Beats组件上传数据"></a>Beats组件上传数据</h2><p><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/elk/20210309145545860.png" alt="Beats组件"></p>
<ul>
<li>此种架构将收集端 <strong>Logstash</strong> 替换为 <strong>Beats</strong>，更灵活，消耗资源更少，扩展性更强。</li>
<li>同时可配置 <strong>Logstash</strong> 和 <strong>Elasticsearch</strong> 集群用于支持大集群系统的运维日志数据监控和查询。</li>
<li>注意 <strong>Beats</strong> 只支持接入 <strong>Logstash</strong> 和 <strong>Elasticsearch</strong> ，如要引入Mq队列应放在 <strong>Logstash</strong> 和 <strong>Elasticsearch</strong> 之间</li>
</ul>
<h3 id="Filebeat工作原理"><a href="#Filebeat工作原理" class="headerlink" title="Filebeat工作原理"></a>Filebeat工作原理</h3><h4 id="组成部分（prospectors-和-harvesters）"><a href="#组成部分（prospectors-和-harvesters）" class="headerlink" title="组成部分（prospectors 和 harvesters）"></a>组成部分（prospectors 和 harvesters）</h4><p>Filebeat由两个主要组件组成：<strong>prospectors</strong> 和 <strong>harvesters</strong>。这两个组件协同工作将文件变动发送到指定的输出中。</p>
<h5 id="如何记录文件状态"><a href="#如何记录文件状态" class="headerlink" title="如何记录文件状态"></a>如何记录文件状态</h5><p>将文件状态记录在文件中（默认在&#x2F;var&#x2F;lib&#x2F;filebeat&#x2F;registry）。此状态可以记住Harvester收集文件的偏移量。若连接不上输出设备，如ES等，filebeat会记录发送前的最后一行，并再可以连接的时候继续发送。Filebeat在运行的时候，Prospector状态会被记录在内存中。Filebeat重启的时候，利用registry记录的状态来进行重建，用来还原到重启之前的状态。每个Prospector会为每个找到的文件记录一个状态，对于每个文件，Filebeat存储唯一标识符以检测文件是否先前被收集。</p>
<h5 id="如何保证事件至少输出一次"><a href="#如何保证事件至少输出一次" class="headerlink" title="如何保证事件至少输出一次"></a>如何保证事件至少输出一次</h5><p>Filebeat之所以能保证事件至少被传递到配置的输出一次，没有数据丢失，是因为filebeat将每个事件的传递状态保存在文件中。在未得到输出方确认时，filebeat会尝试一直发送，直到得到回应。若filebeat在传输过程中被关闭，则不会再关闭之前确认所有时事件。任何在filebeat关闭之前为确认的时间，都会在filebeat重启之后重新发送。这可确保至少发送一次，但有可能会重复。可通过设置shutdown_timeout<br>参数来设置关闭之前的等待事件回应的时间（默认禁用）。</p>
<p><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/elk/20210309145638879.png" alt="filebeat工作原理"></p>
<h4 id="收割机（Harvester）"><a href="#收割机（Harvester）" class="headerlink" title="收割机（Harvester）"></a>收割机（Harvester）</h4><p>负责读取单个文件内容。每个文件会启动一个Harvester，每个Harvester会逐行读取各个文件，并将文件内容发送到制定输出中。Harvester负责打开和关闭文件，意味在Harvester运行的时候，文件描述符处于打开状态，如果文件在收集中被重命名或者被删除，Filebeat会继续读取此文件。所以在Harvester关闭之前，磁盘不会被释放。默认情况filebeat会保持文件打开的状态，直到达到close_inactive（如果此选项开启，filebeat会在指定时间内将不再更新的文件句柄关闭，时间从harvester读取最后一行的时间开始计时。若文件句柄被关闭后，文件发生变化，则会启动一个新的harvester。关闭文件句柄的时间不取决于文件的修改时间，若此参数配置不当，则可能发生日志不实时的情况，由scan_frequency参数决定，默认10s。Harvester使用内部时间戳来记录文件最后被收集的时间。例如：设置5m，则在Harvester读取文件的最后一行之后，开始倒计时5分钟，若5分钟内文件无变化，则关闭文件句柄。默认5m）。</p>
<h4 id="勘测者（Prospector）"><a href="#勘测者（Prospector）" class="headerlink" title="勘测者（Prospector）"></a>勘测者（Prospector）</h4><p>负责管理Harvester并找到所有读取源。<br>Prospector会找到&#x2F;apps&#x2F;logs&#x2F;*<br>目录下的所有info.log文件，并为每个文件启动一个Harvester。Prospector会检查每个文件，看Harvester是否已经启动，是否需要启动，或者文件是否可以忽略。若Harvester关闭，只有在文件大小发生变化的时候Prospector才会执行检查。只能检测本地的文件。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">filebeat.prospectors:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">input_type:</span> <span class="string">log</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/apps/logs/*/info.log</span></span><br></pre></td></tr></table></figure>

<h1 id="ELK-搭建"><a href="#ELK-搭建" class="headerlink" title="ELK 搭建"></a>ELK 搭建</h1><ul>
<li>为了快速搭建且不影响宿主系统，本章采用docker进行安装</li>
</ul>
<h2 id="Elasticsearch-安装"><a href="#Elasticsearch-安装" class="headerlink" title="Elasticsearch 安装"></a>Elasticsearch 安装</h2><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><ul>
<li>需要准备一台安装了docker的宿主机</li>
</ul>
<h3 id="安装目录"><a href="#安装目录" class="headerlink" title="安装目录"></a>安装目录</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建安装目录</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">mkdir</span> -p /usr/local/elk/elasticsearch-7.17.4</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建必要目录（config用于存放配置；data为es数据目录；logs为日志目录；plugins存放扩展插件）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cd</span> /usr/local/elk/elasticsearch-7.17.4 &amp;&amp; <span class="built_in">mkdir</span> -p config data logs plugins</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ll@查看目录</span></span><br><span class="line">-rw-r--r-- 1 root root 300 5月   4 10:31 cleanup.sh</span><br><span class="line">drwxrwsrwx 2 root root  31 5月   4 10:37 config</span><br><span class="line">drwxrwsrwx 3 root root  19 5月   4 10:33 data</span><br><span class="line">drwxrwsrwx 2 root root 139 5月   4 14:07 logs</span><br><span class="line">drwxrwsrwx 4 root root  48 5月   4 14:07 plugins</span><br><span class="line">-rw-r--r-- 1 root root 929 5月   4 10:35 restart.sh</span><br></pre></td></tr></table></figure>

<h3 id="分配权限"><a href="#分配权限" class="headerlink" title="分配权限"></a>分配权限</h3><ul>
<li>由于es默认是不能以root用户启动的，此处映射的目录就要给够权限</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改目录权限为2777，表示es能够在这些目录下自由rw文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">chown</span> -R 2777 config data logs plugins</span></span><br></pre></td></tr></table></figure>

<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><ul>
<li>config&#x2F;elasticsearch.yml</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 集群名称（可以任意启）</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">&quot;elk-singleton&quot;</span></span><br><span class="line"><span class="comment"># 访问限制（0.0.0.0表示所有网段均可访问）</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br></pre></td></tr></table></figure>

<h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><ul>
<li>restart.sh</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">name=elasticsearch-7.17.4</span><br><span class="line">dir=/usr/local/elk/$name</span><br><span class="line">containerId=$(docker ps --filter name=$name -aq)</span><br><span class="line"></span><br><span class="line">if [ -z &quot;$containerId&quot; ]; then</span><br><span class="line">     echo &quot;create container: $name (dir: $dir)&quot;</span><br><span class="line">     docker run -m 3g --name $name \</span><br><span class="line">     --privileged=true \</span><br><span class="line">     --restart=always \</span><br><span class="line">     -v $dir/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \</span><br><span class="line">     -v $dir/data/:/usr/share/elasticsearch/data/ \</span><br><span class="line">     -v $dir/logs:/usr/share/elasticsearch/logs \</span><br><span class="line">     -v $dir/plugins/:/usr/share/elasticsearch/plugins \</span><br><span class="line">     -p 9200:9200 \</span><br><span class="line">     -e &quot;discovery.type=single-node&quot; \</span><br><span class="line">     -e ES_JAVA_OPTS=&quot;-Xms2g -Xmx2g&quot; \</span><br><span class="line">     -d elasticsearch:7.17.4</span><br><span class="line">else</span><br><span class="line">     sContainerId=$(docker ps --filter name=$name -q)</span><br><span class="line">     if [ -n &quot;$sContainerId&quot; ]; then</span><br><span class="line">         echo &quot;restart container: $name&quot;</span><br><span class="line">         docker restart $sContainerId</span><br><span class="line">     else</span><br><span class="line">         echo &quot;start container: $name&quot;</span><br><span class="line">         docker start $containerId     </span><br><span class="line">     fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h3 id="清理服务"><a href="#清理服务" class="headerlink" title="清理服务"></a>清理服务</h3><ul>
<li>cleanup.sh</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/bash</span></span><br><span class="line">name=elasticsearch-7.17.4</span><br><span class="line">cId=$(docker ps | grep $name | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line">if [ -n &quot;$cId&quot; ]; then</span><br><span class="line">   echo &quot;stop $name id:$cId ...&quot;</span><br><span class="line">   docker stop $cId</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">sId=$(docker ps -a | grep $name | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line">if [ -n &quot;$sId&quot; ]; then</span><br><span class="line">   echo &quot;remove $name id:$sId !&quot;</span><br><span class="line">   docker rm $sId</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><h4 id="安装analysis-ik分词器"><a href="#安装analysis-ik分词器" class="headerlink" title="安装analysis-ik分词器"></a>安装analysis-ik分词器</h4><h3 id="安全校验"><a href="#安全校验" class="headerlink" title="安全校验"></a>安全校验</h3><h4 id="启用xpack安全校验插件"><a href="#启用xpack安全校验插件" class="headerlink" title="启用xpack安全校验插件"></a>启用xpack安全校验插件</h4><blockquote>
<p>Elasticsearch7.x 默认内置了xpack插件，只需要开启配置即可</p>
</blockquote>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启x-pack安全验证</span></span><br><span class="line"><span class="attr">xpack.security.enabled</span>: <span class="string">true</span></span><br></pre></td></tr></table></figure>

<h4 id="设置build-in账号的密码"><a href="#设置build-in账号的密码" class="headerlink" title="设置build-in账号的密码"></a>设置build-in账号的密码</h4><h2 id="Kibana-安装"><a href="#Kibana-安装" class="headerlink" title="Kibana 安装"></a>Kibana 安装</h2><h3 id="前期准备-1"><a href="#前期准备-1" class="headerlink" title="前期准备"></a>前期准备</h3><ul>
<li>需要准备一台安装了docker的宿主机</li>
</ul>
<h3 id="安装目录-1"><a href="#安装目录-1" class="headerlink" title="安装目录"></a>安装目录</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建安装目录</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">mkdir</span> -p /usr/local/elk/kibana-7.17.4</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建必要目录（config用于存放配置；logs为日志目录；）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cd</span> /usr/local/elk/kibana-7.17.4 &amp;&amp; <span class="built_in">mkdir</span> -p config logs</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ll@查看目录</span></span><br><span class="line">-rw-r--r-- 1 root root 293 5月   4 10:41 cleanup.sh</span><br><span class="line">drwxr-xr-x 2 root root  24 5月   4 10:54 config</span><br><span class="line">drwxrwsrwx 2 root root  24 5月   4 10:55 logs</span><br><span class="line">-rw-r--r-- 1 root root 527 5月   4 10:58 restart.sh</span><br></pre></td></tr></table></figure>

<h3 id="分配权限-1"><a href="#分配权限-1" class="headerlink" title="分配权限"></a>分配权限</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改目录权限为2777，表示kibana能够在logs下自由rw文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">chown</span> -R 2777 logs</span></span><br></pre></td></tr></table></figure>

<h3 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h3><ul>
<li>config&#x2F;kibana.yml</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ** THIS IS AN AUTO-GENERATED FILE **</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Default Kibana configuration for docker target</span></span><br><span class="line"><span class="attr">server.name:</span> <span class="string">elk-kibana</span></span><br><span class="line"><span class="attr">server.host:</span> <span class="string">&quot;0&quot;</span></span><br><span class="line"><span class="attr">server.publicBaseUrl:</span> <span class="string">&quot;http://192.168.11.20:5601&quot;</span></span><br><span class="line"><span class="comment"># es服务</span></span><br><span class="line"><span class="attr">elasticsearch.hosts:</span> [ <span class="string">&quot;http://192.168.11.20:9200&quot;</span> ]</span><br><span class="line"><span class="attr">monitoring.ui.container.elasticsearch.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># es汉化</span></span><br><span class="line"><span class="attr">i18n.locale:</span> <span class="string">&quot;zh-CN&quot;</span></span><br><span class="line"><span class="comment"># kibana日志</span></span><br><span class="line"><span class="attr">logging.dest:</span> <span class="string">/usr/share/kibana/logs/kibana.log</span></span><br></pre></td></tr></table></figure>

<h3 id="启动服务-1"><a href="#启动服务-1" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">name=kibana-7.17.4</span><br><span class="line">dir=/usr/local/elk/$name</span><br><span class="line">cId=$(docker ps -a | grep $name | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line">echo &quot;$name container id : $cId&quot;</span><br><span class="line"></span><br><span class="line">if [ -z &quot;$cId&quot; ]; then</span><br><span class="line">     docker run -m 1g --name $name \</span><br><span class="line">     --restart=always \</span><br><span class="line">     -p 5601:5601 \</span><br><span class="line">     -v $dir/config/kibana.yml:/usr/share/kibana/config/kibana.yml \</span><br><span class="line">     -v $dir/logs:/usr/share/kibana/logs \</span><br><span class="line">     -d kibana:7.17.4</span><br><span class="line">else</span><br><span class="line">     sId=$(docker ps | grep $name | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line">     if [ -n &quot;$sId&quot; ]; then</span><br><span class="line">         docker stop $sId</span><br><span class="line">     fi</span><br><span class="line">     docker start $cId</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h3 id="清理服务-1"><a href="#清理服务-1" class="headerlink" title="清理服务"></a>清理服务</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/bash</span></span><br><span class="line">name=kibana-7.17.4</span><br><span class="line">cId=$(docker ps | grep $name | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line">if [ -n &quot;$cId&quot; ]; then</span><br><span class="line">   echo &quot;stop $name id:$cId ...&quot;</span><br><span class="line">   docker stop $cId</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">sId=$(docker ps -a | grep $name | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line">if [ -n &quot;$sId&quot; ]; then</span><br><span class="line">   echo &quot;remove $name id:$sId !&quot;</span><br><span class="line">   docker rm $sId</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h2 id="Logstash-安装"><a href="#Logstash-安装" class="headerlink" title="Logstash 安装"></a>Logstash 安装</h2><h3 id="前期准备-2"><a href="#前期准备-2" class="headerlink" title="前期准备"></a>前期准备</h3><ul>
<li>需要准备一台安装了docker的宿主机</li>
</ul>
<h3 id="安装目录-2"><a href="#安装目录-2" class="headerlink" title="安装目录"></a>安装目录</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建安装目录</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">mkdir</span> -p /usr/local/elk/logstash-7.17.4</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建必要目录（data用于存放数据；）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cd</span> /usr/local/elk/logstash-7.17.4 &amp;&amp; <span class="built_in">mkdir</span> -p config data pipeline</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ll@查看目录</span></span><br><span class="line">-rw-r--r-- 1 root root 295 5月   4 11:02 cleanup.sh</span><br><span class="line">drwxr-xr-x 2 root root  73 5月   4 14:49 config</span><br><span class="line">drwxrwsrwx 5 root root  84 5月   4 11:20 data</span><br><span class="line">drwxr-xr-x 2 root root  25 5月   4 15:15 pipeline</span><br><span class="line">-rw-r--r-- 1 root root 744 5月   4 12:19 restart.sh</span><br></pre></td></tr></table></figure>

<h3 id="分配权限-2"><a href="#分配权限-2" class="headerlink" title="分配权限"></a>分配权限</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改目录权限为2777，表示logstash能够在data下自由rw文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">chown</span> -R 2777 data</span></span><br></pre></td></tr></table></figure>

<h3 id="配置文件-2"><a href="#配置文件-2" class="headerlink" title="配置文件"></a>配置文件</h3><ol>
<li>config&#x2F;logstash.yml（ <em>Logstash默认的主配置文件</em> ）</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">config:</span></span><br><span class="line">  <span class="attr">reload:</span></span><br><span class="line">    <span class="attr">automatic:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">interval:</span> <span class="string">3s</span></span><br><span class="line"><span class="attr">xpack:</span></span><br><span class="line">  <span class="attr">management.enabled:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">monitoring.enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>config&#x2F;pipelines.yml（<em>Logstash管道的主配置文件</em> ）</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">pipeline.id:</span> <span class="string">logstash-pipeline-zzjyes</span>                   <span class="comment"># 支持并列的多个管道配置</span></span><br><span class="line">  <span class="attr">path.config:</span> <span class="string">/usr/share/logstash/pipeline/zzjyes.conf</span>   <span class="comment"># 自定义管道配置文件位置</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>pipeline&#x2F;zzjyes.conf（ <em>自定义管道配置：由3部分组成：input、filter、output</em> ）</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">input</span> &#123;</span><br><span class="line">  <span class="string">beats</span> &#123;</span><br><span class="line">  <span class="string">port</span> <span class="string">=&gt;</span> <span class="number">5044</span>                                          <span class="comment"># beats端口用于接收filebeat数据流</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="string">filter</span> &#123;</span><br><span class="line">        <span class="comment">#  multiline &#123;</span></span><br><span class="line">        <span class="comment">#     pattern =&gt; &quot;[\S]*.*([0-9]&#123;8&#125;\.[0-9]&#123;6&#125;\.*[0-9]&#123;0,6&#125;)+.* &quot;  ## 匹配一定包含有日期格式的内容</span></span><br><span class="line">        <span class="comment">#     negate =&gt; true                       ## 正则匹配成功</span></span><br><span class="line">        <span class="comment">#     what =&gt; &quot;previous&quot;                   ## 对下一个匹配出现前的内容进行合并</span></span><br><span class="line">        <span class="comment">#  &#125;</span></span><br><span class="line">        <span class="comment">#  grok &#123;</span></span><br><span class="line">        <span class="comment">#    match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;COMBINEDAPACHELOG&#125;&quot; &#125;</span></span><br><span class="line">        <span class="comment">#  &#125;</span></span><br><span class="line">        <span class="comment"># </span></span><br><span class="line">        <span class="comment">#  mutate &#123;</span></span><br><span class="line">        <span class="comment">#    convert =&gt; &#123;</span></span><br><span class="line">        <span class="comment">#      &quot;bytes&quot; =&gt; &quot;integer&quot;</span></span><br><span class="line">        <span class="comment">#    &#125;</span></span><br><span class="line">        <span class="comment">#  &#125;</span></span><br><span class="line">        <span class="comment"># </span></span><br><span class="line">        <span class="comment">#  geoip &#123;</span></span><br><span class="line">        <span class="comment">#    source =&gt; &quot;clientip&quot;</span></span><br><span class="line">        <span class="comment">#  &#125;</span></span><br><span class="line">        <span class="comment"># </span></span><br><span class="line">        <span class="comment">#  useragent &#123;</span></span><br><span class="line">        <span class="comment">#    source =&gt; &quot;user_agent&quot;</span></span><br><span class="line">        <span class="comment">#    target =&gt; &quot;useragent&quot;</span></span><br><span class="line">        <span class="comment">#  &#125;</span></span><br><span class="line">        <span class="comment"># </span></span><br><span class="line">        <span class="comment">#  date &#123;</span></span><br><span class="line">        <span class="comment">#    match =&gt; [&quot;timestamp&quot;, &quot;dd/MMM/yyyy:HH:mm:ss Z&quot;]</span></span><br><span class="line">        <span class="comment">#  &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="string">output</span> &#123;</span><br><span class="line">  <span class="string">elasticsearch</span> &#123;</span><br><span class="line">  <span class="string">hosts</span> <span class="string">=&gt;</span> [<span class="string">&quot;192.168.11.20:9200&quot;</span>]                                <span class="comment"># es服务端口</span></span><br><span class="line">  <span class="string">document_type</span> <span class="string">=&gt;</span> <span class="string">&quot;_doc&quot;</span>                                        <span class="comment"># 非必要</span></span><br><span class="line">  <span class="string">index</span> <span class="string">=&gt;</span> <span class="string">&quot;service-zzjyes-log.<span class="template-variable">%&#123;+YYYY-MM-dd&#125;</span>&quot;</span>                   <span class="comment"># 对应es中索引名</span></span><br><span class="line">  <span class="string">template_name</span> <span class="string">=&gt;</span> <span class="string">&quot;logstash-test&quot;</span>                               <span class="comment"># 模版功能待测试</span></span><br><span class="line">  <span class="string">template</span> <span class="string">=&gt;</span> <span class="string">&quot;/usr/share/logstash/config/logstash-test.json&quot;</span></span><br><span class="line">  <span class="string">manage_template</span> <span class="string">=&gt;</span> <span class="literal">false</span></span><br><span class="line">  <span class="string">template_overwrite</span> <span class="string">=&gt;</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="string">stdout</span> &#123;</span><br><span class="line">  <span class="string">codec</span> <span class="string">=&gt;</span> <span class="string">rubydebug</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="启动服务-2"><a href="#启动服务-2" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">name=logstash-7.17.4</span><br><span class="line">dir=/usr/local/elk/$name</span><br><span class="line">containerId=$(docker ps --filter name=$name -aq)</span><br><span class="line"></span><br><span class="line">if [ -z &quot;$containerId&quot; ]; then</span><br><span class="line">     echo &quot;create container: $name (dir: $dir)&quot;</span><br><span class="line">     # 启动容器并挂载</span><br><span class="line">     docker run -m 2g --name $name \</span><br><span class="line">     --privileged=true \</span><br><span class="line">     -p 5044:5044 \</span><br><span class="line">     -v $PWD/config:/usr/share/logstash/config \</span><br><span class="line">     -v $PWD/data:/usr/share/logstash/data \</span><br><span class="line">     -v $PWD/pipeline:/usr/share/logstash/pipeline \</span><br><span class="line">     -d logstash:7.17.4</span><br><span class="line">else</span><br><span class="line">     sContainerId=$(docker ps --filter name=$name -q)</span><br><span class="line">     if [ -n &quot;$sContainerId&quot; ]; then</span><br><span class="line">         echo &quot;restart container: $name&quot;</span><br><span class="line">         docker restart $sContainerId</span><br><span class="line">     else</span><br><span class="line">         echo &quot;start container: $name&quot;</span><br><span class="line">         docker start $containerId     </span><br><span class="line">     fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h3 id="清理服务-2"><a href="#清理服务-2" class="headerlink" title="清理服务"></a>清理服务</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/bash</span></span><br><span class="line">name=logstash-7.17.4</span><br><span class="line">cId=$(docker ps | grep $name | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line">if [ -n &quot;$cId&quot; ]; then</span><br><span class="line">   echo &quot;stop $name id:$cId ...&quot;</span><br><span class="line">   docker stop $cId</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">sId=$(docker ps -a | grep $name | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line">if [ -n &quot;$sId&quot; ]; then</span><br><span class="line">   echo &quot;remove $name id:$sId !&quot;</span><br><span class="line">   docker rm $sId</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h2 id="Filebeat-安装"><a href="#Filebeat-安装" class="headerlink" title="Filebeat 安装"></a>Filebeat 安装</h2><h3 id="前期准备-3"><a href="#前期准备-3" class="headerlink" title="前期准备"></a>前期准备</h3><ul>
<li>需要准备一台安装了docker的宿主机（filebeat需发布在业务系统机器上或k8s的同一个Pod中）</li>
</ul>
<h3 id="安装目录-3"><a href="#安装目录-3" class="headerlink" title="安装目录"></a>安装目录</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以选在服务系统的子目录下</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">mkdir</span> -p /usr/local/www/zzjyes8888/filebeat-7.17.4</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建必要目录（config用于存放配置；）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cd</span> /usr/local/www/zzjyes8888/filebeat-7.17.4 &amp;&amp; <span class="built_in">mkdir</span> -p config</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ll@查看目录</span></span><br><span class="line">-rw-r--r-- 1 root root 298 May  4 14:57 cleanup.sh</span><br><span class="line">drwxr-xr-x 2 root root  25 May  4 15:39 config</span><br><span class="line">-rw-r--r-- 1 root root 737 May  4 16:29 restart.sh</span><br></pre></td></tr></table></figure>

<h3 id="配置文件-3"><a href="#配置文件-3" class="headerlink" title="配置文件"></a>配置文件</h3><ul>
<li>config&#x2F;filebeat.yaml</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">filebeat.inputs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">filestream</span></span><br><span class="line">    <span class="attr">id:</span> <span class="string">zzjyes8888id</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/logs/console.log</span>                       <span class="comment"># 日志目录，支持通配符，例如：/var/logs/*.log </span></span><br><span class="line">    <span class="attr">fields:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">zzjyes8888</span></span><br><span class="line">      <span class="attr">level:</span> <span class="string">info</span></span><br><span class="line">    <span class="attr">fields_under_root:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">parsers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">multiline:</span> <span class="comment"># 多行合并显示</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">pattern</span>                             <span class="comment"># 正则表达式</span></span><br><span class="line">          <span class="attr">pattern:</span> <span class="string">&#x27;^[0-9]&#123;4&#125;-[0-9]&#123;2&#125;-[0-9]&#123;2&#125;&#x27;</span>    <span class="comment"># 已日期开头的</span></span><br><span class="line">          <span class="attr">negate:</span> <span class="literal">true</span>                              <span class="comment"># 正向匹配通过</span></span><br><span class="line">          <span class="attr">match:</span> <span class="string">after</span>                              <span class="comment"># 向下合并显示</span></span><br><span class="line">    <span class="attr">tail_files:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">ignore_older:</span> <span class="string">168h</span></span><br><span class="line"></span><br><span class="line"><span class="attr">output.logstash:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hosts:</span> [ <span class="string">&quot;192.168.11.20:5044&quot;</span> ]</span><br></pre></td></tr></table></figure>

<h3 id="启动服务-3"><a href="#启动服务-3" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">name=filebeat-of-zzjyes</span><br><span class="line">dir=/usr/local/www/zzjyes8888/filebeat-7.17.4</span><br><span class="line">containerId=$(docker ps --filter name=$name -aq)</span><br><span class="line"></span><br><span class="line">if [ -z &quot;$containerId&quot; ]; then</span><br><span class="line">     echo &quot;create container: $name (dir: $dir)&quot;</span><br><span class="line">     docker run --name $name \</span><br><span class="line">     --privileged=true \</span><br><span class="line">     -v $dir/config/filebeat.yml:/usr/share/filebeat/filebeat.yml \</span><br><span class="line">     -v /usr/local/www/zzjyes8888/logs:/var/logs \</span><br><span class="line">     -v /etc/localtime:/etc/localtime:ro \</span><br><span class="line">     -d elastic/filebeat:7.17.4 </span><br><span class="line">else</span><br><span class="line">     sContainerId=$(docker ps --filter name=$name -q)</span><br><span class="line">     if [ -n &quot;$sContainerId&quot; ]; then</span><br><span class="line">         echo &quot;restart container: $name&quot;</span><br><span class="line">         docker restart $sContainerId</span><br><span class="line">     else</span><br><span class="line">         echo &quot;start container: $name&quot;</span><br><span class="line">         docker start $containerId     </span><br><span class="line">     fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h3 id="清理服务-3"><a href="#清理服务-3" class="headerlink" title="清理服务"></a>清理服务</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/bash</span></span><br><span class="line">name=filebeat-of-zzjyes</span><br><span class="line">cId=$(docker ps | grep $name | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line">if [ -n &quot;$cId&quot; ]; then</span><br><span class="line">   echo &quot;stop $name id:$cId ...&quot;</span><br><span class="line">   docker stop $cId</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">sId=$(docker ps -a | grep $name | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line">if [ -n &quot;$sId&quot; ]; then</span><br><span class="line">   echo &quot;remove $name id:$sId !&quot;</span><br><span class="line">   docker rm $sId</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>中间件</category>
        <category>存储</category>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>容器</tag>
        <tag>ELK</tag>
      </tags>
  </entry>
  <entry>
    <title>JWT原理及应用场景</title>
    <url>/2023/05/25/java-jwt-notes/</url>
    <content><![CDATA[<h3 id="JWT简介"><a href="#JWT简介" class="headerlink" title="JWT简介"></a>JWT简介</h3><h4 id="认证流程"><a href="#认证流程" class="headerlink" title="认证流程"></a>认证流程</h4><blockquote>
<p>JWT即Java Web Token缩写，一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该 Token 也可直接被用于认证，也可被加密。<br>JWT有如下特点：</p>
<ol>
<li>授权服务器将 <font color=#FF0000>用户信息</font> 和 <font color=#FF0000>授权范围</font><br>  序列化后放入一个JSON字符串，然后使用Base64进行编码，最终在授权服务器用私钥对这个字符串进行签名，得到一个JWT。</li>
<li>其他所有的资源服务器都将持有一个由<font color=#FF0000> 授权服务器颁发 </font>的 <font color=#FF0000>RSA公钥</font>，当资源服务器接收到这个在Http<br>  Header中存有Token的请求，使用RSA公钥进行验签。通过则说Token中的内容可信，进行作为业务处理的数据。</li>
</ol>
</blockquote>
<p><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jwt/652a1d5d4b2e45118327257628dfb47d.png" alt="JWT认证流程图"></p>
<h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><blockquote>
<p>是由三段信息构成的，第一段为头部（Header），第二段为载荷（Payload)，第三段为签名（Signature）格式：header.payload.signature <font color=#FF0000><br>用点隔开 </font>。每一段内容都是一个<font color=#FF0000> JSON对象 </font>，将每一段 JSON 对象采用<font color=#FF0000> BASE64编码 </font><br>，将编码后的内容用.<br>链接一起就构成了JWT字符串。</p>
</blockquote>
<p><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jwt/f35abcc9470548d29c534108ef02ab10.png" alt="JWT数据结构示意图"></p>
<h5 id="头部"><a href="#头部" class="headerlink" title="头部"></a>头部</h5><p><strong>Header</strong>：头部用于描述关于该 JWT 的最基本的信息，例如其类型以及签名所用的算法等。指明了类型为JWT，签名算法是 RS256算法的header。<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jwt/dca0623a4f9a4e3482f308887c5caac3.png" alt="数据结构及生成方式"></p>
<h5 id="载荷"><a href="#载荷" class="headerlink" title="载荷"></a>载荷</h5><p><strong>Payload</strong>：载荷也是body，是存放有效信息的地方。有效信息包含以下内容：<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jwt/ea5c11ef3fbd4a6f9ac476465404294a.png" alt="数据结构及生成方式"><br>字段说明：<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jwt/f2fbe0fcb01544b7bb0b025886949759.png" alt="字段说明"><br>除了上面的默认字段外，我们还可以自定义私有字段，如：<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jwt/3d7e5b80e1a64f8dae881a1a43ff41c1.png" alt="自定义字段"></p>
<h5 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h5><p><strong>Signature</strong>：创建签名需要使用 Base64 编码后的 header 和 payload 以及一个秘钥，将 base64 编码后的 header 和 base64 编码后的 payload 使用.连接组成的字符串，通过<br>header 中声明的加密方式进行加盐 secret 组合加密，然后就构成了 jwt 的第三部分。<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jwt/d504e0504a764a9098ae0f5fb8c9908f.png" alt="数据结构及生成方式"></p>
<h3 id="JWT使用"><a href="#JWT使用" class="headerlink" title="JWT使用"></a>JWT使用</h3><h4 id="注销问题"><a href="#注销问题" class="headerlink" title="注销问题"></a>注销问题</h4><ul>
<li>客户端：在本地存储中执行注销操作</li>
<li>服务端：将 token 存放到分布式缓存中，每次校验token时检查下该token是否已注销（<font color=#FF0000>违背了无状态的设计初衷，与普通token再无区别</font>）。</li>
<li>采用<font color=#FF0000> 短期令牌</font>，比如token有效期是20分钟，这样可以一定程度上降低注销后 token 可用性的风险。</li>
</ul>
<h4 id="续期问题"><a href="#续期问题" class="headerlink" title="续期问题"></a>续期问题</h4><ul>
<li>将Token设置一个长时间的有效期（<font color=#FF0000>风险较大，不推荐</font>）</li>
<li>结合上一条，并将token状态缓存在Redis中（<font color=#FF0000>违背了无状态的设计初衷，与普通token再无区别</font>）。</li>
<li>模仿oauth2的 <font color=#FF0000>双token设计</font><br>，用户登录时后端返回两个token：access_token和refresh_token；一般refresh_token过期时间为access_token的2倍左右（<font color=#FF0000><br>能解决无感续期问题，但是会产生大量的refresh_token垃圾</font>）。</li>
</ul>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul>
<li>跨语言，基于JSON格式保证了跨语言的能力。</li>
<li>基于token，无状态（服务端不需要保存Token信息，没有额外的开销）。</li>
<li>快速校验（由于载荷中存放了身份信息，不需要额外的查库操作）</li>
</ul>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>载荷Payload只使用了base64进行了转码，相当于明文传输。所以用户和业务敏感的信息要避免放在JWT中。</li>
<li>由于JWT的过期时间是在认证时写死的，服务端并不存储相关信息；故无法从服务端强制注销（<font color=#FF0000>也即当Token泄漏后，直至其自然过期前都存在安全风险</font>）。</li>
<li>没办法在保证无状态特性的情况下解决Token续期的问题（<font color=#FF0000>不适合作为保持保持会话的场景</font>）。</li>
</ul>
<h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><p>主要为<font color=#FF0000> 一次性使用的场景</font> 下，比如：无状态的API、邮箱验证码等需要一定用户标识，但无法篡改，且只在一定时间内有效的操作。</p>]]></content>
      <categories>
        <category>开发语言</category>
        <category>Java</category>
        <category>JWT</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>网站</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Jenkins服务（容器）</title>
    <url>/2023/05/28/jenkins-docker/</url>
    <content><![CDATA[<h3 id="软件介绍"><a href="#软件介绍" class="headerlink" title="软件介绍"></a>软件介绍</h3><p>Jenkins是一个开源软件项目，是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件项目可以进行持续集成</p>
<span id="more"></span>

<h3 id="镜像选择"><a href="#镜像选择" class="headerlink" title="镜像选择"></a>镜像选择</h3><h4 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建数据存放锚点</span></span><br><span class="line">[root@jenkins01 ~]<span class="comment"># cd /usr/local/</span></span><br><span class="line">[root@jenkins01 <span class="built_in">local</span>]<span class="comment"># mkdir jenkins &amp;&amp; cd jenkins</span></span><br><span class="line"><span class="comment"># 拉取jenkins镜像</span></span><br><span class="line">docker pull jenkins/jenkins:centos7-jdk11</span><br></pre></td></tr></table></figure>

<h4 id="启停脚本"><a href="#启停脚本" class="headerlink" title="启停脚本"></a>启停脚本</h4><ul>
<li>restart.sh</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">name=jenkins</span><br><span class="line">cId=$(docker ps -a | grep <span class="variable">$name</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$name</span> container id : <span class="variable">$cId</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$cId</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">     docker run --name <span class="variable">$name</span> \</span><br><span class="line">     --restart always \</span><br><span class="line">     -p 8080:8080 \</span><br><span class="line">     -p 50000:50000 \</span><br><span class="line">     -v /usr/local/jenkins/home:/var/jenkins_home \</span><br><span class="line">     -v /usr/local/jenkins/tool:/usr/local/tools \</span><br><span class="line">     -d jenkins/jenkins:centos7-jdk11</span><br><span class="line"><span class="keyword">else</span>     </span><br><span class="line">     sId=$(docker ps | grep <span class="variable">$name</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line">     <span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$sId</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">         docker stop <span class="variable">$sId</span></span><br><span class="line">     <span class="keyword">fi</span></span><br><span class="line">     docker start <span class="variable">$cId</span> </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<ul>
<li>cleanup.sh</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">name=jenkins</span><br><span class="line">cId=$(docker ps | grep <span class="variable">$name</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$cId</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;stop <span class="variable">$name</span> id:<span class="variable">$cId</span> ...&quot;</span></span><br><span class="line">   docker stop <span class="variable">$cId</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">sId=$(docker ps -a | grep <span class="variable">$name</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$sId</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;remove <span class="variable">$name</span> id:<span class="variable">$sId</span> !&quot;</span></span><br><span class="line">   docker <span class="built_in">rm</span> <span class="variable">$sId</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h3 id="安装服务"><a href="#安装服务" class="headerlink" title="安装服务"></a>安装服务</h3><h4 id="修改目录权限"><a href="#修改目录权限" class="headerlink" title="修改目录权限"></a>修改目录权限</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#容器内使用了jenkins作为默认用户，uid=1000</span></span><br><span class="line">[root@jenkins01 jenkins]<span class="comment"># mkdir home &amp;&amp; chmod -R 1000:1000 home/</span></span><br><span class="line">[root@jenkins01 jenkins]<span class="comment"># ll</span></span><br><span class="line">总用量 12</span><br><span class="line">-rw-r--r--.  1 root root  283 9月  26 19:45 cleanup.sh</span><br><span class="line">drwxrwsrwx. 11 root root 4096 9月  26 19:48 home</span><br><span class="line">-rw-r--r--.  1 root root  464 9月  26 19:39 restart.sh</span><br></pre></td></tr></table></figure>

<h4 id="增加域名解析"><a href="#增加域名解析" class="headerlink" title="增加域名解析"></a>增加域名解析</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@jenkins01 jenkins]<span class="comment"># vi /etc/hosts</span></span><br><span class="line">……</span><br><span class="line">180.101.49.11 www.google.com</span><br><span class="line">……</span><br></pre></td></tr></table></figure>

<h4 id="开放防火墙端口"><a href="#开放防火墙端口" class="headerlink" title="开放防火墙端口"></a>开放防火墙端口</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@jenkins01 jenkins]<span class="comment"># firewall-cmd --zone=public --add-port=8080/tcp --permanent</span></span><br><span class="line">[root@jenkins01 jenkins]<span class="comment"># firewall-cmd --reload</span></span><br></pre></td></tr></table></figure>

<h4 id="启动服务并安装插件"><a href="#启动服务并安装插件" class="headerlink" title="启动服务并安装插件"></a>启动服务并安装插件</h4><ul>
<li>启动服务并输入秘钥</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@jenkins01 jenkins]<span class="comment"># sh restart.sh</span></span><br><span class="line">[root@jenkins01 jenkins]<span class="comment"># docker logs -f jenkins</span></span><br><span class="line"></span><br><span class="line">*************************************************************</span><br><span class="line">*************************************************************</span><br><span class="line">*************************************************************</span><br><span class="line"></span><br><span class="line">Jenkins initial setup is required. An admin user has been created and a password generated.</span><br><span class="line">Please use the following password to proceed to installation:</span><br><span class="line"></span><br><span class="line"><span class="comment">## 默认密码，安装时使用</span></span><br><span class="line">c09131f66d414a95b6828c45dd2d2d6f</span><br><span class="line"></span><br><span class="line">This may also be found at: /var/jenkins_home/secrets/initialAdminPassword</span><br><span class="line"></span><br><span class="line">*************************************************************</span><br><span class="line">*************************************************************</span><br><span class="line">*************************************************************</span><br></pre></td></tr></table></figure>

<ul>
<li>访问地址：<a href="http://172.16.4.192:8080/%EF%BC%8C%E9%80%89%E6%8B%A9%E6%8F%92%E4%BB%B6%E5%B9%B6%E5%AE%89%E8%A3%85">http://172.16.4.192:8080/，选择插件并安装</a><br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/ec2f90865d8641229ecbeb7f4e7eab3c.png" alt="插件截图"></li>
<li>输入默认用户：jenkins&#x2F;jenkins，下一步<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/cf55eaa6e13549c7b97c35932243816e.png" alt="在这里插入图片描述"></li>
<li>对外暴露的地址和端口，用于触发回调<img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/aa6e0e1752234b26b8f76c5e01c17f41.png" alt="暴露接口配置"></li>
<li>待所有插件安装后，需重启jenkins（<font color=#00f>否则有些插件可能无法正常工作，例如：汉化插件</font>）<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/c7a66c07eea7459295edf2bc22f9a530.png" alt="在这里插入图片描述"></li>
</ul>
<h3 id="工具配置"><a href="#工具配置" class="headerlink" title="工具配置"></a>工具配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@jenkins01 jenkins]<span class="comment"># mkdir tool &amp;&amp; chown -R 1000:1000 tool</span></span><br><span class="line">[root@jenkins01 jenkins]<span class="comment"># ll tool/</span></span><br><span class="line">总用量 0</span><br><span class="line">drwxr-xr-x. 6 1000 1000  99 9月  27 2021 apache-maven-3.8.3</span><br><span class="line">drwxr-xr-x. 8 1000 1000 273 9月  29 10:31 jdk1.8.0_341</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CI/CD</category>
        <category>工具</category>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>容器</tag>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Java专业名词，概念术语等</title>
    <url>/2023/06/19/java-notion-notes/</url>
    <content><![CDATA[<h3 id="套接字专区"><a href="#套接字专区" class="headerlink" title="套接字专区"></a>套接字专区</h3><h4 id="本地套接字与网络套接字"><a href="#本地套接字与网络套接字" class="headerlink" title="本地套接字与网络套接字"></a>本地套接字与网络套接字</h4><h5 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h5><p>本地套接字的使用与网络套接字的使用大体上是类似的。</p>
<h5 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h5><ol>
<li>和套接字绑定的地址结构体不同，本地套接字使用的结构体是 struct sockaddr_un ，而网络套接字使用的是 struct sockaddr_in；</li>
<li>协议族不同，本地套接字使用的是AF_UNIX 或AF_LOCAL， 网络套接字常用的是AF_INET；</li>
<li>对于使用本地套接字的C&#x2F;S模型，服务器和客户端都需要显式绑定套接字描述符和地址信息，即（1）中提到的存放地址信息的结构体；</li>
<li>用本地套接字的C&#x2F;S模型中，服务器和客户端都是通过 bind 函数创建本地套接字伪文件，服务器和客户端之间即是通过各自的套接字伪文件来产生连接然后进行数据通信。</li>
</ol>
<h3 id="并发专区"><a href="#并发专区" class="headerlink" title="并发专区"></a>并发专区</h3><h4 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h4><blockquote>
<p>进程间通信(IPC，InterProcess Communication)<br>Linux环境下进程地址空间相互独立，每个进程各自有不同的用户地址空间。任何一个进程的全局变量在另一个进程中都看不到，所以进程与进程之间不能相互访问，要交换数据必须通过内核，在内核中开辟一块缓冲区，进程1把数据从用户空间考到内核缓存区，进程2再从内核缓冲区把数据读走。</p>
</blockquote>
<p>在进程间完成数据传递需要借助操作系统提供特殊的方法，如：文件、管道、信号、共享内存、消息队列、套接字、命名管道等。<br>随着计算机的蓬勃发展，一些方法由于自身设计缺陷被淘汰或弃用。<br>现今常用的通信方式有：</p>
<ul>
<li>管道（使用简单）</li>
<li>信号（开销最小）</li>
<li>共享映射区（无血缘关系）</li>
<li>本地套接字（最稳定）</li>
</ul>
<p><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/java/20200316133427357.png" alt="IPC思维导图"></p>
<h5 id="种类"><a href="#种类" class="headerlink" title="种类"></a>种类</h5><ul>
<li>数据传输：一个进程需要将它的数据发送给另一个进程</li>
<li>资源共享：多个进程之间共享同样的资源</li>
<li>通知事件：一个进程需要向另一个或一组进程发送消息，通知它(它们)发生了某种事件(如进程终止<br>时要通知父进程)</li>
<li>进程控制：有些进程希望完全控制另一个进程的执行(如Debug进程)，此时控制进程希望能够拦截另<br>一个进程的所有陷入和异常，并能够及时知道它的状态改变</li>
</ul>
<h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><p>管道(数据传输)，共享内存(数据共享)，消息队列(数据传输)，信号量(进程控制)</p>
<h5 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h5><p>每一个进程都有自己的独立的虚拟地址空间和页表结构，促使进程独立，导致进程之间相互协作工作，从而产生了进程间通信。</p>
<h4 id="并发与并行"><a href="#并发与并行" class="headerlink" title="并发与并行"></a>并发与并行</h4><h4 id="互斥与同步"><a href="#互斥与同步" class="headerlink" title="互斥与同步"></a>互斥与同步</h4><ul>
<li>互斥：是指某一资源同时只允许一个访问者对其进行访问，具有唯一性和排它性。但互斥无法限制访问者对资源的访问顺序，即访问是无序的。</li>
<li>同步：是指在互斥的基础上（大多数情况），通过其它机制实现访问者对资源的有序访问。在大多数情况下，同步已经实现了互斥，特别是所有写入资源的情况必定是互斥的。少数情况是指可以允许多个访问者同时访问资源。</li>
</ul>
<h5 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h5><ul>
<li>互斥：是指散布在不同进程之间的若干程序片断，当某个进程运行其中一个程序片段时，其它进程就不能运行它们之中的任一程序片段，<em>只能等到该进程运行完这个程序片段后才可以运行</em>。</li>
<li>同步：是指散布在不同进程之间的若干程序片断，<em>它们的运行必须严格按照规定的某种先后次序来运行，这种先后次序依赖于要完成的特定的任务</em>。</li>
</ul>
<h5 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h5><p>同步是一种更为复杂的互斥，而互斥是一种特殊的同步。<br>也就是说互斥是两个线程之间不可以同时运行，他们会相互排斥，必须等待一个线程运行完毕，另一个才能运行，而同步也是不能同时运行，但他是必须要安照某种次序来运行相应的线程（也是一种互斥）。</p>
<h3 id="语言特性"><a href="#语言特性" class="headerlink" title="语言特性"></a>语言特性</h3><h4 id="动静态类型语言"><a href="#动静态类型语言" class="headerlink" title="动静态类型语言"></a>动静态类型语言</h4><p>动态类型语言的关键特征：是它的类型检查的主体过程是在运行期而不是编译期进行的，满足这个特征的语言有很多，常用的包括：APL、Clojure、Erlang、Groovy、JavaScript、Lisp、Lua、PHP、Prolog、Python、Ruby、Smalltalk、Tcl，等等。<br>相对地，在编译期就进行类型检查过程的语言，譬如C++和Java等就是最常用的静态类型语言。</p>
<ol>
<li>变量类型的确定时间点</li>
<li>变量类型是否在非强制类型转换的情况下可变</li>
</ol>
]]></content>
      <categories>
        <category>开发语言</category>
        <category>Java</category>
        <category>概念术语</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>网站</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Jenkins服务</title>
    <url>/2023/05/28/jenkins-setup/</url>
    <content><![CDATA[<h3 id="软件介绍"><a href="#软件介绍" class="headerlink" title="软件介绍"></a>软件介绍</h3><p>Jenkins是一个开源软件项目，是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件项目可以进行持续集成</p>
<span id="more"></span>

<h3 id="资料准备"><a href="#资料准备" class="headerlink" title="资料准备"></a>资料准备</h3><h4 id="下载安装jar包"><a href="#下载安装jar包" class="headerlink" title="下载安装jar包"></a>下载安装jar包</h4><blockquote>
<p><a href="https://www.jenkins.io/">下载地址</a> &gt; 下载按钮 &gt; Regular releases (Weekly) &gt; Past Releases &gt; 2.343 &gt; jenkins.war</p>
</blockquote>
<h4 id="准备集群节点"><a href="#准备集群节点" class="headerlink" title="准备集群节点"></a>准备集群节点</h4><ul>
<li>如下1主2从集群架构。</li>
<li>节点之间需要互通，配置ssh免登参考：<a href="https://blog.csdn.net/u012285269/article/details/125435904">笔记【SSH免密登录 in CentOS7.x】</a></li>
</ul>
<table>
<thead>
<tr>
<th>节点</th>
<th>角色</th>
<th>地址</th>
<th>端口</th>
<th>安装软件</th>
</tr>
</thead>
<tbody><tr>
<td>node-126.35</td>
<td>master</td>
<td>192.168.126.35</td>
<td>8080</td>
<td>jenkins.jar、git、jdk、maven</td>
</tr>
<tr>
<td>node-126.36</td>
<td>node</td>
<td>192.168.126.36</td>
<td>x</td>
<td>remote.jar、git、jdk、maven</td>
</tr>
<tr>
<td>node-126.28</td>
<td>node</td>
<td>192.168.126.35</td>
<td>x</td>
<td>remote.jar、git、jdk、maven</td>
</tr>
</tbody></table>
<h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><h4 id="安装目录"><a href="#安装目录" class="headerlink" title="安装目录"></a>安装目录</h4><p>安装目录默认为&#x2F;root&#x2F;.jenkins&#x2F;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost jenkins]<span class="comment"># pwd</span></span><br><span class="line">/usr/local/jenkins</span><br><span class="line">[root@localhost jenkins]<span class="comment"># ll</span></span><br><span class="line">总用量 88664</span><br><span class="line">-rw-r--r-- 1 root root 90780629 7月   8 15:10 jenkins.war</span><br><span class="line">drwxr-xr-x 2 root root       24 7月   8 15:19 logs</span><br><span class="line">-rwxr-xr-x 1 root root      184 7月   8 16:27 start.sh</span><br><span class="line">-rwxr-xr-x 1 root root      209 7月   8 14:32 stop.sh</span><br></pre></td></tr></table></figure>

<h4 id="开机自启动服务脚本"><a href="#开机自启动服务脚本" class="headerlink" title="开机自启动服务脚本"></a>开机自启动服务脚本</h4><p>安放路径：&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;jenkins.service</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Jenkins-Console</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/jenkins/start.sh</span><br><span class="line">ExecReload=/usr/local/jenkins/stop.sh &amp;&amp; /usr/local/jenkins/start.sh</span><br><span class="line">ExecStop=/usr/local/jenkins/stop.sh</span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<h4 id="启动服务脚本"><a href="#启动服务脚本" class="headerlink" title="启动服务脚本"></a>启动服务脚本</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">nohup</span> /usr/local/jdk-11.0.15.1/bin/java -jar /usr/local/jenkins/jenkins.war --httpPort=8080 --javaHome=/usr/local/jdk-11.0.15.1 &gt;/usr/local/jenkins/logs/jenkins.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

<h4 id="停止服务脚本"><a href="#停止服务脚本" class="headerlink" title="停止服务脚本"></a>停止服务脚本</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">pid=$(ps -ef | grep jenkins | grep -v grep | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$&#123;pid&#125;</span>&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">   <span class="built_in">kill</span> -9 <span class="variable">$pid</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;pid = <span class="variable">$&#123;pid&#125;</span>, already stopped jenkins ~&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;jenkins not in running ~&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h3 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h3><h4 id="Git安装以及配置"><a href="#Git安装以及配置" class="headerlink" title="Git安装以及配置"></a>Git安装以及配置</h4><blockquote>
<p>安装参考：<a href="https://blog.csdn.net/u012285269/article/details/125360395">安装【Git in CentOS7.x】</a></p>
</blockquote>
<h4 id="Maven安装以及配置"><a href="#Maven安装以及配置" class="headerlink" title="Maven安装以及配置"></a>Maven安装以及配置</h4><blockquote>
<p>安装参考：<a href="https://blog.csdn.net/u012285269/article/details/125360428">安装【Maven in CentOS7.x】</a></p>
</blockquote>
<h4 id="Jdk11安装以及配置"><a href="#Jdk11安装以及配置" class="headerlink" title="Jdk11安装以及配置"></a>Jdk11安装以及配置</h4><blockquote>
<p>安装参考：<a href="https://blog.csdn.net/u012285269/article/details/125324006">安装【Jdk11 in CentOS7.x】</a></p>
</blockquote>
<h3 id="软件安装-1"><a href="#软件安装-1" class="headerlink" title="软件安装"></a>软件安装</h3><h4 id="权限说明"><a href="#权限说明" class="headerlink" title="权限说明"></a>权限说明</h4><p>系统管理 &gt; 全局安全配置</p>
<ul>
<li>授权策略选择 <strong>安全矩阵</strong></li>
<li>管理员选择 <strong>全部</strong></li>
<li>非管理员选择除了 <em>“Administer”</em> 以外的所有权限-&gt;登录后看不到 <strong>系统管理</strong> 菜单</li>
</ul>
<h4 id="插件选择"><a href="#插件选择" class="headerlink" title="插件选择"></a>插件选择</h4><p>推荐使用自定义安装，选择自己需要的插件。<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/e7653542358f432d96a92affd2d20696.png" alt="插件选择截图"></p>
<h3 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h3><h4 id="部署slave从节点"><a href="#部署slave从节点" class="headerlink" title="部署slave从节点"></a>部署slave从节点</h4><blockquote>
<p>系统管理 &gt; 节点管理 &gt; 新增节点</p>
</blockquote>
<p><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/187bf1713c9e4e8ea852a9630b64136b.png" alt="节点管理截图"></p>
<ol>
<li>用法：只允许绑定的job使用</li>
<li>目录：尽量保证master&#x2F;slave一致的，便于启动脚本复用。默认：&#x2F;root&#x2F;.jenkins</li>
<li>配置：<ol>
<li>主机：121.199.160.218</li>
<li>令牌：通过添加凭证配置（账号&#x2F;密码）</li>
</ol>
</li>
<li>启动方式选择：Launch agent via SSH【共有4种】<ol>
<li>该方法无需提前将slave.jar部署到Node服务器，仅需配置Node服务器IP和Login Credentials（常用用户名+密码），Jenkins会自动调用sftp传送slave.jar到Node并完成该Jar包的启动。</li>
<li>节点管理-&gt;节点列表【点击指定节点名称】-&gt;点击启动代理按钮</li>
<li>代理节点需要提前安装好java环境，默认检查目录…；如果不存在会在日志中提示… 可通过ln -s xxx xxx 软连接做映射</li>
</ol>
</li>
</ol>
<p><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/78615a9b8f4f4bb49df921179906b838.png" alt="配置截图01"><br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/5726d9d8071f4b1985b191439e220b43.png" alt="配置截图02"><br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/9112f552a0dc480da5807d0493bb76f4.png" alt="配置截图03"><br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/564ca3d5646a4006abc9c2a237777a07.png" alt="配置截图04"><br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/a4a2092801a4439ebc6b294f2532a1af.png" alt="配置截图05"></p>
<ul>
<li>启动jenkins节点的日志如下：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SSHLauncher&#123;host=<span class="string">&#x27;192.168.1.143&#x27;</span>, port=22, credentialsId=<span class="string">&#x27;0feb6f2c-b4fc-4e76-b09c-cab19d5b27ec&#x27;</span>, jvmOptions=<span class="string">&#x27;&#x27;</span>, javaPath=<span class="string">&#x27;&#x27;</span>, prefixStartSlaveCmd=<span class="string">&#x27;&#x27;</span>, suffixStartSlaveCmd=<span class="string">&#x27;&#x27;</span>, launchTimeoutSeconds=60, maxNumRetries=10, retryWaitTime=15, sshHostKeyVerificationStrategy=hudson.plugins.sshslaves.verifiers.NonVerifyingKeyVerificationStrategy, tcpNoDelay=<span class="literal">true</span>, trackCredentials=<span class="literal">true</span>&#125;</span><br><span class="line">[06/19/22 09:37:11] [SSH] Opening SSH connection to 192.168.1.143:22.</span><br><span class="line">[06/19/22 09:37:11] [SSH] WARNING: SSH Host Keys are not being verified. Man-in-the-middle attacks may be possible against this connection.</span><br><span class="line">[06/19/22 09:37:11] [SSH] 认证成功。</span><br><span class="line">[06/19/22 09:37:11] [SSH] The remote user<span class="string">&#x27;s environment is:</span></span><br><span class="line"><span class="string">BASH=/usr/bin/bash</span></span><br><span class="line"><span class="string">BASHOPTS=cmdhist:extquote:force_fignore:hostcomplete:interactive_comments:progcomp:promptvars:sourcepath</span></span><br><span class="line"><span class="string">BASH_ALIASES=()</span></span><br><span class="line"><span class="string">BASH_ARGC=()</span></span><br><span class="line"><span class="string">BASH_ARGV=()</span></span><br><span class="line"><span class="string">BASH_CMDS=()</span></span><br><span class="line"><span class="string">BASH_EXECUTION_STRING=set</span></span><br><span class="line"><span class="string">BASH_LINENO=()</span></span><br><span class="line"><span class="string">BASH_SOURCE=()</span></span><br><span class="line"><span class="string">BASH_VERSINFO=([0]=&quot;4&quot; [1]=&quot;2&quot; [2]=&quot;46&quot; [3]=&quot;2&quot; [4]=&quot;release&quot; [5]=&quot;x86_64-redhat-linux-gnu&quot;)</span></span><br><span class="line"><span class="string">BASH_VERSION=&#x27;</span>4.2.46(2)-release<span class="string">&#x27;</span></span><br><span class="line"><span class="string">CLASSPATH=.:/usr/local/jdk-11.0.15.1/lib</span></span><br><span class="line"><span class="string">DIRSTACK=()</span></span><br><span class="line"><span class="string">EUID=0</span></span><br><span class="line"><span class="string">GROUPS=()</span></span><br><span class="line"><span class="string">HOME=/root</span></span><br><span class="line"><span class="string">HOSTNAME=jenkins04.zangh</span></span><br><span class="line"><span class="string">HOSTTYPE=x86_64</span></span><br><span class="line"><span class="string">IFS=$&#x27;</span> \t\n<span class="string">&#x27;</span></span><br><span class="line"><span class="string">JAVA_HOME=/usr/local/jdk-11.0.15.1</span></span><br><span class="line"><span class="string">LANG=zh_CN.UTF-8</span></span><br><span class="line"><span class="string">LESSOPEN=&#x27;</span>||/usr/bin/lesspipe.sh %s<span class="string">&#x27;</span></span><br><span class="line"><span class="string">LOGNAME=root</span></span><br><span class="line"><span class="string">MACHTYPE=x86_64-redhat-linux-gnu</span></span><br><span class="line"><span class="string">MAIL=/var/mail/root</span></span><br><span class="line"><span class="string">MAVEN_HOME=/usr/local/apache-maven-3.8.5</span></span><br><span class="line"><span class="string">OPTERR=1</span></span><br><span class="line"><span class="string">OPTIND=1</span></span><br><span class="line"><span class="string">OSTYPE=linux-gnu</span></span><br><span class="line"><span class="string">PATH=/usr/local/apache-maven-3.8.5/bin:/usr/local/jdk-11.0.15.1/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin</span></span><br><span class="line"><span class="string">PIPESTATUS=([0]=&quot;0&quot;)</span></span><br><span class="line"><span class="string">PPID=1212</span></span><br><span class="line"><span class="string">PS4=&#x27;</span>+ <span class="string">&#x27;</span></span><br><span class="line"><span class="string">PWD=/root</span></span><br><span class="line"><span class="string">SELINUX_LEVEL_REQUESTED=</span></span><br><span class="line"><span class="string">SELINUX_ROLE_REQUESTED=</span></span><br><span class="line"><span class="string">SELINUX_USE_CURRENT_RANGE=</span></span><br><span class="line"><span class="string">SHELL=/bin/bash</span></span><br><span class="line"><span class="string">SHELLOPTS=braceexpand:hashall:interactive-comments</span></span><br><span class="line"><span class="string">SHLVL=1</span></span><br><span class="line"><span class="string">SSH_CLIENT=&#x27;</span>192.168.1.140 60070 22<span class="string">&#x27;</span></span><br><span class="line"><span class="string">SSH_CONNECTION=&#x27;</span>192.168.1.140 60070 192.168.1.143 22<span class="string">&#x27;</span></span><br><span class="line"><span class="string">TERM=dumb</span></span><br><span class="line"><span class="string">UID=0</span></span><br><span class="line"><span class="string">USER=root</span></span><br><span class="line"><span class="string">XDG_RUNTIME_DIR=/run/user/0</span></span><br><span class="line"><span class="string">XDG_SESSION_ID=2</span></span><br><span class="line"><span class="string">_=/etc/bashrc</span></span><br><span class="line"><span class="string">Checking Java version in the PATH</span></span><br><span class="line"><span class="string">java version &quot;11.0.15.1&quot; 2022-04-22 LTS</span></span><br><span class="line"><span class="string">Java(TM) SE Runtime Environment 18.9 (build 11.0.15.1+2-LTS-10)</span></span><br><span class="line"><span class="string">Java HotSpot(TM) 64-Bit Server VM 18.9 (build 11.0.15.1+2-LTS-10, mixed mode)</span></span><br><span class="line"><span class="string">[06/19/22 09:37:12] [SSH] Checking java version of /root/.jenkins/jdk/bin/java</span></span><br><span class="line"><span class="string">Couldn&#x27;</span>t figure out the Java version of /root/.jenkins/jdk/bin/java</span><br><span class="line">bash: /root/.jenkins/jdk/bin/java: 没有那个文件或目录</span><br><span class="line"></span><br><span class="line">[06/19/22 09:37:12] [SSH] Checking java version of /usr/local/jdk-11.0.15.1/bin/java</span><br><span class="line">[06/19/22 09:37:12] [SSH] /usr/local/jdk-11.0.15.1/bin/java -version returned 11.0.15.1.</span><br><span class="line">[06/19/22 09:37:12] [SSH] Starting sftp client.</span><br><span class="line">[06/19/22 09:37:12] [SSH] 正在拷贝最新版本的 remoting.jar...</span><br><span class="line">Source agent <span class="built_in">hash</span> is CFA58B0B329D35B9E202D2E27A11B3A2. Installed agent <span class="built_in">hash</span> is CFA58B0B329D35B9E202D2E27A11B3A2</span><br><span class="line">Verified agent jar. No update is necessary.</span><br><span class="line">Expanded the channel window size to 4MB</span><br><span class="line">[06/19/22 09:37:13] [SSH] Starting agent process: <span class="built_in">cd</span> <span class="string">&quot;/root/.jenkins&quot;</span> &amp;&amp; /usr/local/jdk-11.0.15.1/bin/java  -jar remoting.jar -workDir /root/.jenkins -jar-cache /root/.jenkins/remoting/jarCache</span><br><span class="line">6月 19, 2022 9:37:13 上午 org.jenkinsci.remoting.engine.WorkDirManager initializeWorkDir</span><br><span class="line">信息: Using /root/.jenkins/remoting as a remoting work directory</span><br><span class="line">6月 19, 2022 9:37:14 上午 org.jenkinsci.remoting.engine.WorkDirManager setupLogging</span><br><span class="line">信息: Both error and output logs will be printed to /root/.jenkins/remoting</span><br><span class="line">&lt;===[JENKINS REMOTING CAPACITY]===&gt;channel started</span><br><span class="line">Remoting version: 3025.vf64a_a_3da_6b_55</span><br><span class="line">Launcher: SSHLauncher</span><br><span class="line">Communication Protocol: Standard <span class="keyword">in</span>/out</span><br><span class="line">This is a Unix agent</span><br><span class="line">WARNING: An illegal reflective access operation has occurred</span><br><span class="line">WARNING: Illegal reflective access by jenkins.slaves.StandardOutputSwapper<span class="variable">$ChannelSwapper</span> to constructor java.io.FileDescriptor(int)</span><br><span class="line">WARNING: Please consider reporting this to the maintainers of jenkins.slaves.StandardOutputSwapper<span class="variable">$ChannelSwapper</span></span><br><span class="line">WARNING: Use --illegal-access=warn to <span class="built_in">enable</span> warnings of further illegal reflective access operations</span><br><span class="line">WARNING: All illegal access operations will be denied <span class="keyword">in</span> a future release</span><br><span class="line">Evacuated stdout</span><br><span class="line">Agent successfully connected and online</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<h3 id="新建任务"><a href="#新建任务" class="headerlink" title="新建任务"></a>新建任务</h3><h4 id="限制任务执行的节点"><a href="#限制任务执行的节点" class="headerlink" title="限制任务执行的节点"></a>限制任务执行的节点</h4><blockquote>
<p>新建test01任务 &gt; General &gt; 限制项目的运行节点【选择douke-slave】</p>
</blockquote>
<ul>
<li><p>系统管理 &gt; 全局工具配置 &gt; Git&#x2F;Maven&#x2F;Jdk配置</p>
<ul>
<li>此配置只对master主节点生效</li>
</ul>
</li>
<li><p>系统管理 &gt; 节点管理 &gt; 配置从节点 &gt; 节点属性 &gt; Git&#x2F;Maven&#x2F;Jdk配置</p>
<ul>
<li>此配置只对slave节点单独生效</li>
</ul>
</li>
</ul>
<h4 id="新建第一个项目"><a href="#新建第一个项目" class="headerlink" title="新建第一个项目"></a>新建第一个项目</h4><ul>
<li>新建一个任务名称【选择“构建一个自由风格的软件项目”】</li>
<li>Git配置&#x2F;调用顶层Maven项目<ul>
<li>目标：clean package -Dmaven.test.skip&#x3D;true</li>
<li>POM：pom.xml</li>
</ul>
</li>
<li>执行shell【构建】<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 复制可执行jar文件</span></span><br><span class="line"><span class="built_in">cp</span> /root/.jenkins/workspace/dev002/target/demo-0.0.1-SNAPSHOT.jar /usr/local/opt/demo/demo-0.0.1-SNAPSHOT.jar</span><br><span class="line"><span class="comment"># 执行启动脚本</span></span><br><span class="line">sh /usr/local/opt/demo/restart.sh</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="构建后操作"><a href="#构建后操作" class="headerlink" title="构建后操作"></a>构建后操作</h4><p>发邮件，采用”Email Extension Plugin“插件，版本为2.87<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/de54a2d1ad114ef1ad549fbd0bbf1f54.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Ien6aaG6ZW_,size_20,color_FFFFFF,t_70,g_se,x_16" alt="邮件扩展插件截图"></p>
<h3 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h3><h4 id="Jenkins启动报错：AWT-is-not-properly-configured-on-this-server"><a href="#Jenkins启动报错：AWT-is-not-properly-configured-on-this-server" class="headerlink" title="Jenkins启动报错：AWT is not properly configured on this server."></a>Jenkins启动报错：AWT is not properly configured on this server.</h4><p>安装如下软件后，重新启动jenkins</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install dejavu-sans-fonts -y</span><br><span class="line">yum install fontconfig -y</span><br><span class="line">yum install xorg-x11-server-Xvfb -y</span><br></pre></td></tr></table></figure>

<h4 id="Jenkins节点报错：-x2F-root-x2F-ssh-x2F-known-hosts-SSH-No-Known-Hosts-file-was-found-at-x2F-root-x2F-ssh-x2F-known-hosts-Please-ensure"><a href="#Jenkins节点报错：-x2F-root-x2F-ssh-x2F-known-hosts-SSH-No-Known-Hosts-file-was-found-at-x2F-root-x2F-ssh-x2F-known-hosts-Please-ensure" class="headerlink" title="Jenkins节点报错：&#x2F;root&#x2F;.ssh&#x2F;known_hosts [SSH] No Known Hosts file was found at &#x2F;root&#x2F;.ssh&#x2F;known_hosts. Please ensure"></a>Jenkins节点报错：&#x2F;root&#x2F;.ssh&#x2F;known_hosts [SSH] No Known Hosts file was found at &#x2F;root&#x2F;.ssh&#x2F;known_hosts. Please ensure</h4><p>Host Key的校验策略选择“不校验”即可<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/0fbee21a8f324f1d922af275f77de8e2.png" alt="配置截图01"></p>
<h4 id="某些时候安装的时候会报“该Jenkins实例似乎已离线”，导致无法在线安装插件"><a href="#某些时候安装的时候会报“该Jenkins实例似乎已离线”，导致无法在线安装插件" class="headerlink" title="某些时候安装的时候会报“该Jenkins实例似乎已离线”，导致无法在线安装插件"></a>某些时候安装的时候会报“该Jenkins实例似乎已离线”，导致无法在线安装插件</h4><p><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/05074df548014d39853a1f76c42aa10c.png" alt="问题截图"></p>
<ul>
<li>出错是的安装页面，一般原因有两种：<ol>
<li>确实网络不通</li>
<li>Jenkins会通过检查<a href="http://www.google.com链接测试网络连通性(位置在jenkins_home/updates/default.json%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84connectionCheckUrl%E5%AD%97%E6%AE%B5%EF%BC%89%EF%BC%8C%E4%BD%86%E6%98%AF%E5%9B%A0%E4%B8%BA%E5%9B%BD%E5%86%85%E8%A2%AB%E5%A2%99%E4%BA%86%E5%AF%BC%E8%87%B4%E6%A3%80%E6%9F%A5%E5%A4%B1%E8%B4%A5%E3%80%82">www.google.com链接测试网络连通性（位置在JENKINS_HOME/updates/default.json文件中的connectionCheckUrl字段），但是因为国内被墙了导致检查失败。</a></li>
</ol>
</li>
</ul>
<p><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/84e229ccc05f4892adc9301c14628898.png" alt="修改后重启启动，正常截图"></p>
<ul>
<li>解决方法：<ol>
<li>通过修改default.json文件的 <strong>connectionCheckUrl</strong> 为 <em><a href="http://www.baidu.com/">http://www.baidu.com/</a></em> ，但是实践发现这种修改方式，每次jenkins重启后又会被还原。</li>
<li>最终通过修改&#x2F;etc&#x2F;hosts文件添加 <em>180.101.49.11 <a href="http://www.google.com/">www.google.com</a></em> 本地对google域名进行解析到一个能访问的通的地址（此处给出的是 <em>180.101.49.11</em><br> 是百度的地址），改完后重新启动Jenkins。注：此url应该是一个页面，只能 <strong>ping</strong> 通是不行的，例如 <del>114.114.114.114</del>。</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>CI/CD</category>
        <category>工具</category>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>centos7</tag>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins配置介绍、备忘录等</title>
    <url>/2023/05/28/jenkins-notes/</url>
    <content><![CDATA[<h3 id="软件介绍"><a href="#软件介绍" class="headerlink" title="软件介绍"></a>软件介绍</h3><p>Jenkins是一个开源软件项目，是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件项目可以进行持续集成</p>
<span id="more"></span>

<h3 id="任务分类"><a href="#任务分类" class="headerlink" title="任务分类"></a>任务分类</h3><p><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/5875a8cd3f874a87b4e6910547f74a25.png" alt="jenkins新建任务界面截图"></p>
<ul>
<li>文件夹：创建一个可以嵌套存储的容器。利用它可以进行分组。 视图仅仅是一个过滤器，而文件夹则是一个独立的命名空间， 因此你可以有多个相同名称的的内容，只要它们在不同的文件 夹里即可。<strong>增强了任务的管理方式</strong>。</li>
<li>构建一个自由风格的软件项目：这是 Jenkins 的主要功能， Jenkins 将会结合任何 SCM 和任何构建系统来构建你的项目，甚至可以构建软件以外的系统。<ul>
<li>缺点：每个步骤流程都要通过不同的方式设置，并且构建过程中整体流程是不可见的，无法确认每个流程花费的时间，并且不方便定位问题。</li>
</ul>
</li>
<li>流水线：精心地组织一个可以长期运行在多个节点上的任务。适用于构建流水线（更加正式地应当称为工作流），增加或者组织难以采用自由风格的任务类型。<ul>
<li>优点：Jenkins的Pipeline可以让项目的发布整体流程可视化，明确执行的阶段，可以快速的定位问题。并且整个项目的生命周期可以通过一个Jenkinsfile文件管理，而且Jenkinsfile文件是可以放在项目中维护。**<br>所以Pipeline相对自由风格或者其他的项目风格更容易操作**。<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/a73de54e71d247a1b736c9915f51ba62.png" alt="Pipline运行结果截图"></li>
</ul>
</li>
</ul>
<h3 id="创建Pipline任务"><a href="#创建Pipline任务" class="headerlink" title="创建Pipline任务"></a>创建Pipline任务</h3><blockquote>
<p>流水线可以通过以下任一方式来创建：</p>
<ol>
<li>通过 Blue Ocean - 在 Blue Ocean 中设置一个流水线项目后，Blue Ocean UI 会帮你编写流水线的 Jenkinsfile 文件并提交到源代码管理系统。</li>
<li>通过经典 UI - 你可以通过经典 UI 在 Jenkins 中直接输入基本的流水线。</li>
<li>在源码管理系统中定义-你可以手动编写一个**Jenkinsfile文件<del>&lt;重点&gt;</del>**，然后提交到项目的源代码管理仓库中。</li>
</ol>
</blockquote>
<h4 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h4><blockquote>
<p>由于流水线代码（特别是脚本式流水线）是使用类似 Groovy 的语法编写的, 如果你的IDE不能正确的使用语法高亮显示你的 Jenkinsfile，可以尝试在 Jenkinsfile 文件的顶部插入行 #!&#x2F;usr&#x2F;bin&#x2F;env<br>groovy 纠正这个问题。</p>
</blockquote>
<ul>
<li>Groovy 对使用流水线有所帮助，但并不是必须的；以下为基本的语法说明（同时jenkins也内置了一批流水线语法模板【<strong>项目根目录</strong> &#x3D;&gt; <strong>流水线语法</strong>】）：</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 所有脚本命令包含在pipeline&#123;&#125;中</span></span><br><span class="line">pipeline &#123;  </span><br><span class="line">	<span class="comment">// 指定任务在哪个节点执行（Jenkins支持分布式）</span></span><br><span class="line">    agent any</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 配置全局环境，指定变量名=变量值信息</span></span><br><span class="line">    environment&#123;</span><br><span class="line">    	host = <span class="string">&#x27;172.17.1.22&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 存放所有任务的合集</span></span><br><span class="line">    stages &#123;</span><br><span class="line">    	<span class="comment">// 单个任务</span></span><br><span class="line">        stage(<span class="string">&#x27;任务1&#x27;</span>) &#123;</span><br><span class="line">        	<span class="comment">// 实现任务的具体流程</span></span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&#x27;do something&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="comment">// 单个任务</span></span><br><span class="line">        stage(<span class="string">&#x27;任务2&#x27;</span>) &#123;</span><br><span class="line">        	<span class="comment">// 实现任务的具体流程</span></span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&#x27;do something&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ……</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>根据语法要求编写第一个测试用例：</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 指定任务重需要用到的工具，maven-3.8.5或jdk11的来源是“系统管理 &gt; 全局工具配置”</span></span><br><span class="line">	tools &#123; </span><br><span class="line">        maven <span class="string">&#x27;maven-3.8.5&#x27;</span></span><br><span class="line">        jdk <span class="string">&#x27;jdk11&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        <span class="comment">// step 1</span></span><br><span class="line">        stage(<span class="string">&#x27;Pull code from Gitee&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&#x27;code pull successfullly ~&#x27;</span></span><br><span class="line">                git <span class="attr">credentialsId:</span> <span class="string">&#x27;95ba22c9-5edd-4f72-b5bf-876e52bc9ce5&#x27;</span>, <span class="attr">url:</span> <span class="string">&#x27;https://gitee.com/www.bau123.com/mock.git&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// step 2</span></span><br><span class="line">        stage(<span class="string">&#x27;Compile code with Maven&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&#x27;code compile successfullly ~&#x27;</span></span><br><span class="line">                sh <span class="string">&#x27;mvn clean package -f pom.xml&#x27;</span></span><br><span class="line">                <span class="comment">// junit &#x27;**/target/surefire-reports/*.xml&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// step 3</span></span><br><span class="line">        stage(<span class="string">&#x27;Transfer *.jar to Target by SSH&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&#x27;transfer successfullly ~&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// step 4</span></span><br><span class="line">        stage(<span class="string">&#x27;Start service&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&#x27;Start service successfullly ~&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>运行结果如下：</li>
</ul>
<p><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/6b8c2d8b3a7345c5828d494f313c3c58.png" alt="Pipline测试脚本截图"></p>
<h4 id="定义Jenkinsfile文件"><a href="#定义Jenkinsfile文件" class="headerlink" title="定义Jenkinsfile文件"></a>定义Jenkinsfile文件</h4><ul>
<li>代码托管处的Jenkinsfile默认放在项目根目录下</li>
</ul>
<p><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/0c777227dee449eb9f04eec9745e52ac.png" alt="Jenkinsfile托管在项目中管理"></p>
<ul>
<li>流水线项目的关键配置</li>
</ul>
<p><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/930ebed9b08841d1960fb01d48b9f896.png" alt="Jenkinsfile项目中的流水线配置"></p>
<ul>
<li>多了个Declarative: Checkout SCM的动作</li>
</ul>
<p><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/0817a29b9a014c2eadc3940c85547b6d.png" alt="Jenkinsfile执行结果截图"></p>
<h4 id="集成单元测试"><a href="#集成单元测试" class="headerlink" title="集成单元测试"></a>集成单元测试</h4><ul>
<li>集成junit单元测试组件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line"></span><br><span class="line">    tools &#123; </span><br><span class="line">        maven <span class="string">&#x27;maven-3.8.5&#x27;</span></span><br><span class="line">        jdk <span class="string">&#x27;jdk11&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;从Gitee拉取源代码&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                git credentialsId: <span class="string">&#x27;95ba22c9-5edd-4f72-b5bf-876e52bc9ce5&#x27;</span>, url: <span class="string">&#x27;https://gitee.com/www.bau123.com/mock.git&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        stage(<span class="string">&#x27;运行单元测试&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                // <span class="string">&#x27;|| true&#x27;</span>的目的是为了测试失败时也能获取到测试报告</span><br><span class="line">                sh <span class="string">&#x27;mvn test -f pom.xml || true&#x27;</span></span><br><span class="line">                junit <span class="string">&#x27;**/target/surefire-reports/*.xml&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>运行结果截图如下（无测试覆盖率报告，计划集成jacoco提交覆盖率报告）：</li>
</ul>
<p><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/872b642ed1d8413da320d66569623cfd.png" alt="在这里插入图片描述"></p>
<h4 id="集成Jacoco插件"><a href="#集成Jacoco插件" class="headerlink" title="集成Jacoco插件"></a>集成Jacoco插件</h4><h5 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h5><ul>
<li>在可选插件中搜索jacoco，这里我已经安装过了，显示如下：<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/d47ce5e491fc429bb35e0510a9929c0f.png" alt="在这里插入图片描述"></li>
<li>安装中，选择“安装后重启jenkins”保证插件能生效<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/501481d57dc24171a1ff9a3bc9d15edc.png" alt="在这里插入图片描述"></li>
</ul>
<h5 id="项目集成"><a href="#项目集成" class="headerlink" title="项目集成"></a>项目集成</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jacoco生成测试报告 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jacoco<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jacoco-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.8.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">destFile</span>&gt;</span>target/test-coverage/jacoco-unit.exec<span class="tag">&lt;/<span class="name">destFile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataFile</span>&gt;</span>target/test-coverage/jacoco-unit.exec<span class="tag">&lt;/<span class="name">dataFile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>default-prepare-agent<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>prepare-agent<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>jacoco-site<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">phase</span>&gt;</span>test<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>report<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="Jenkinsfile"><a href="#Jenkinsfile" class="headerlink" title="Jenkinsfile"></a>Jenkinsfile</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env groovy</span></span><br><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line"></span><br><span class="line">    tools &#123;</span><br><span class="line">        maven <span class="string">&#x27;maven-3.8.5&#x27;</span></span><br><span class="line">        jdk <span class="string">&#x27;jdk11&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;从Gitee拉取源代码&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                git credentialsId: <span class="string">&#x27;95ba22c9-5edd-4f72-b5bf-876e52bc9ce5&#x27;</span>, url: <span class="string">&#x27;https://gitee.com/www.bau123.com/mock.git&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">&#x27;单元测试并生成报告&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh <span class="string">&#x27;mvn test -f pom.xml || true&#x27;</span></span><br><span class="line">                junit <span class="string">&#x27;**/target/surefire-reports/*.xml&#x27;</span></span><br><span class="line">                // 此处触发jacoco回显测试覆盖率报告</span><br><span class="line">                jacoco()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="执行效果"><a href="#执行效果" class="headerlink" title="执行效果"></a>执行效果</h5><ul>
<li>单元测试覆盖率概览（只扫描junit4的单元测试）<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/789769518b124ac0a9d3427d8a8b2aa2.png" alt="在这里插入图片描述"></li>
<li>单元测试覆盖率明细<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/1d1f124faf9d41dcbb87f599ca24749d.png" alt="在这里插入图片描述"></li>
</ul>
<h4 id="集成Allure插件"><a href="#集成Allure插件" class="headerlink" title="集成Allure插件"></a>集成Allure插件</h4><h5 id="下载并安装allure工具"><a href="#下载并安装allure工具" class="headerlink" title="下载并安装allure工具"></a>下载并安装allure工具</h5><blockquote>
<p><a href="https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/">下载地址</a> &gt; 2.18.1 下载对应平台的安装包</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ejy-kf2-jyxt2 src]<span class="comment"># ll</span></span><br><span class="line">总用量 337700</span><br><span class="line">-rw-r--r-- 1 root root  19980996 9月  14 16:03 allure-2.18.1.tgz</span><br><span class="line">-rw-r--r-- 1 root root   8676320 7月   8 18:14 apache-maven-3.8.6-bin.tar.gz</span><br><span class="line">-rw-r--r-- 1 root root    141872 8月   3 21:10 arthas-boot.jar</span><br><span class="line">-rw-r--r-- 1 root root 168829286 7月   8 18:23 jdk-11.0.15.1_linux-x64_bin.tar.gz</span><br><span class="line">-rw-r--r-- 1 root root 148162542 8月   4 16:42 jdk-8u341-linux-x64.tar.gz</span><br><span class="line"><span class="comment"># 解压并移动到指定目录</span></span><br><span class="line">[root@ejy-kf2-jyxt2 src]<span class="comment"># tar zxf allure-2.18.1.tgz &amp;&amp; mv allure-2.18.1 ../ &amp;&amp; cd ../allure-2.18.1/</span></span><br><span class="line">[root@ejy-kf2-jyxt2 allure-2.18.1]<span class="comment"># ll</span></span><br><span class="line">总用量 4</span><br><span class="line">drwxr-xr-x  2 root root   38 5月  23 19:39 bin</span><br><span class="line">drwxr-xr-x  2 root root   75 5月  23 19:39 config</span><br><span class="line">drwxr-xr-x  3 root root 4096 9月  14 16:04 lib</span><br><span class="line">drwxr-xr-x 12 root root  248 9月  14 16:04 plugins</span><br></pre></td></tr></table></figure>

<h5 id="jenkins中安装指定allure插件"><a href="#jenkins中安装指定allure插件" class="headerlink" title="jenkins中安装指定allure插件"></a>jenkins中安装指定allure插件</h5><ul>
<li>下载jenkins的allure插件<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/893e1e1146214ba3963b339bebede6c9.png" alt="allure插件安装界面"></li>
<li>配置全局工具类<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/d5f94d74e92d426891fad1c6be314cb6.png" alt="allure插件配置界面"></li>
<li>项目配置页面（<strong>切记：</strong> <font color=#ff0000>以下两张图中的路径不要配成一样的，否则会覆盖导致报表无法正常生成</font>）<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/e4650cc9ae404e38a22c5ebfdceb5e92.png" alt="jenkins配置截图01"><br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/6041ca74977e420ab2c9ac1f26fd3140.png" alt="jenkins配置截图01"></li>
</ul>
<h5 id="SpringBoot2-x项目集成allure工具"><a href="#SpringBoot2-x项目集成allure工具" class="headerlink" title="SpringBoot2.x项目集成allure工具"></a>SpringBoot2.x项目集成allure工具</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 基于junit4的allure依赖包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.qameta.allure<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>allure-junit4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 测试插件中配置allure --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">excludedGroups</span>&gt;</span>$&#123;integration.test.mark&#125;<span class="tag">&lt;/<span class="name">excludedGroups</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">argLine</span>&gt;</span></span><br><span class="line">    -javaagent:$&#123;settings.localRepository&#125;/org/aspectj/aspectjweaver/1.9.7/aspectjweaver-1.9.7.jar</span><br><span class="line">  <span class="tag">&lt;/<span class="name">argLine</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">testFailureIgnore</span>&gt;</span>true<span class="tag">&lt;/<span class="name">testFailureIgnore</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">forkCount</span>&gt;</span>1<span class="tag">&lt;/<span class="name">forkCount</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">reuseForks</span>&gt;</span>true<span class="tag">&lt;/<span class="name">reuseForks</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*IgnoreTest.java<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>listener<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>io.qameta.allure.junit4.AllureJunit4<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">systemProperties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">allure.results.directory</span>&gt;</span>target/allure-results<span class="tag">&lt;/<span class="name">allure.results.directory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>allure.link.issue.pattern<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>http://example.org/issue/&#123;&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">systemProperties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- JUnit4.7及以上版本需要手动引入该依赖，否则无法执行单元测试（本项目使用Junit4.13）--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.surefire<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>surefire-junit47<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="集成SonarQube-Scanner插件"><a href="#集成SonarQube-Scanner插件" class="headerlink" title="集成SonarQube Scanner插件"></a>集成SonarQube Scanner插件</h4><h5 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h5><ul>
<li>jenkins插件库中搜索sonar插件，并安装<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/3131e1506c10448ba66e132c71914394.png" alt="在这里插入图片描述"></li>
<li>安装完成后重启jenkins使插件生效<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/c358f546692647c2b227c953f3ea5ced.png" alt="在这里插入图片描述"></li>
</ul>
<h5 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h5><ul>
<li>开启Sonar Qube权限验证<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/a0ce51d1acd441459f7d0634c90633a8.png" alt="在这里插入图片描述"></li>
<li>获取Sonar Qube的令牌（选择“用户令牌”和“永不过期”）<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/eec879fd015148daa6b86acdd4ff46c5.png" alt="在这里插入图片描述"></li>
<li>配置Jenkins的SonarQube-Server信息（“系统管理”&#x3D;&gt;“系统配置”&#x3D;&gt;“SonarQube servers”）<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/596e087a032840ff9e5af2e2e55d2333.png" alt="在这里插入图片描述"></li>
<li>安装NodeJs插件（“系统管理”&#x3D;&gt;“插件管理”&#x3D;&gt;“Avaliable plugins”）<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/b4ba2626d2c54060a414b715a13b2317.png" alt="在这里插入图片描述"></li>
<li>安装 <a href="https://nodejs.org/en/download/">nodejs</a> &#x3D;&gt;<br>下载地址 <a href="https://nodejs.org/dist/v16.17.1/node-v16.17.1-linux-x64.tar.xz">node-v16.17.1-linux-x64.tar.xz</a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@jenkins02 tool]<span class="comment"># ll</span></span><br><span class="line">总用量 0</span><br><span class="line">drwxr-xr-x. 6 1000 1000  57 5月  23 19:39 allure-2.18.1</span><br><span class="line">drwxr-xr-x. 6 1000 1000  99 9月  27 2021 apache-maven-3.8.3</span><br><span class="line">drwxr-xr-x. 8 1000 1000 273 9月  29 10:31 jdk1.8.0_341</span><br><span class="line">drwxrwxr-x. 6 1000 1000 108 12月 11 2018 node-v10.14.2-linux-x64</span><br><span class="line">drwxr-xr-x. 6 1001 1001 108 9月  23 10:42 node-v16.17.1-linux-x64</span><br><span class="line">drwxr-xr-x. 6 1000 1000  51 2月  22 2022 sonar-scanner-4.7.0.2747-linux</span><br></pre></td></tr></table></figure>

<ul>
<li>配置SonarQube-Scanner和NodeJs配置<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/a0c7b4fba4e2457eb09b7e10531463ce.png" alt="在这里插入图片描述"><br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/a5fe84fa8c174ee9b4ae8b22f699c2de.png" alt="在这里插入图片描述"></li>
<li>项目springboot-test01配置nodejs和sonarqube-scanner<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/a2b1e5373568440ab292c108f4bb4b20.png" alt="在这里插入图片描述"><br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/e0740e55fd6d4349a9c0fbcef929bfb8.png" alt="在这里插入图片描述"></li>
<li>成功运行后的截图<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/09dfd82362f14b39886f2cc2606ff7e5.png" alt="在这里插入图片描述"></li>
</ul>
<h4 id="IDE插件CheckStyle、FindBugs的使用"><a href="#IDE插件CheckStyle、FindBugs的使用" class="headerlink" title="IDE插件CheckStyle、FindBugs的使用"></a>IDE插件CheckStyle、FindBugs的使用</h4><ul>
<li>能够在本地直接运行代码质量检查的工具集合，与sonar平台的功能类似！</li>
</ul>
<h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><ul>
<li>CheckStyle：代码样式风格检查，专门check代码规范风格的，比如缩进，换行操作，命名大项目往往是有很多人一起完成的，然而每个人都有自己的style，导致整个项目的代码不仅存在不符合语言规范的情况，而且读起来非常困难。因此，这样的项目中都会引入Checkstyle，来规范大家的编码风格，尽量做到统一和合理。所以使用CheckStyle检查到问题，理论上CheckStyle应该包含以下3方面配置：<ol>
<li>Code Template</li>
<li>Code Fomatter</li>
<li>Check Style</li>
</ol>
</li>
<li>FindBugs：只寻找可能存在bug的地方，不注重样式或者格式，它试图只寻找真正的缺陷或者潜在的性能问题。</li>
</ul>
<h5 id="安装（仅介绍idea环境）"><a href="#安装（仅介绍idea环境）" class="headerlink" title="安装（仅介绍idea环境）"></a>安装（仅介绍idea环境）</h5><h6 id="Adapter-Eclipse-Code-Formatter"><a href="#Adapter-Eclipse-Code-Formatter" class="headerlink" title="Adapter Eclipse Code Formatter"></a>Adapter Eclipse Code Formatter</h6><blockquote>
</blockquote>
<p>安装及使用参考 <a href="https://blog.csdn.net/u012285269/article/details/125527184">《笔记【intellij idea + Eclipse Code Formatter 实现统一代码风格】》</a></p>
<h6 id="CheckStyle-IDEA"><a href="#CheckStyle-IDEA" class="headerlink" title="CheckStyle-IDEA"></a>CheckStyle-IDEA</h6><blockquote>
</blockquote>
<p>安装及使用参考 <a href="https://blog.csdn.net/u012285269/article/details/125534041">《笔记【intellij idea + Eclipse Code Formatter 实现统一代码风格】》</a></p>
<h6 id="集成FindBugs插件"><a href="#集成FindBugs插件" class="headerlink" title="集成FindBugs插件"></a>集成FindBugs插件</h6><blockquote>
<p>安装及使用参考 <a href="https://blog.csdn.net/u012285269/article/details/125536803">《笔记【intellij idea + FindBugs 实现静态代码分析】》</a></p>
</blockquote>
<h4 id="集成CheckStyle插件"><a href="#集成CheckStyle插件" class="headerlink" title="集成CheckStyle插件"></a>集成CheckStyle插件</h4><ul>
<li>pom.xml指明项目编码</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>pom.xml添加maven-checkstyle-plugin，mvn:validate时触发</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 集成CheckStyle插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-checkstyle-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configLocation</span>&gt;</span>checkstyle-ali-simple.xml<span class="tag">&lt;/<span class="name">configLocation</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>checkstyle<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">phase</span>&gt;</span>validate<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>check<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">failOnViolation</span>&gt;</span>true<span class="tag">&lt;/<span class="name">failOnViolation</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-checkstyle-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">type</span>&gt;</span>maven-plugin<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="集成SonarLint插件"><a href="#集成SonarLint插件" class="headerlink" title="集成SonarLint插件"></a>集成SonarLint插件</h4><ul>
<li>开发工具中安装插件<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/08933631171f442a9b251105c78cda16.png" alt="在这里插入图片描述"></li>
<li>配置server服务<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/a6f65c21fbc6485a9c0b15d1089ee68a.png" alt="在这里插入图片描述"></li>
<li>配置server账号<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/10f581a4470a48e78ddceaf74d93f7c9.png" alt="在这里插入图片描述"></li>
<li>配置项目对应的SonarQube链接（可用于同步规则和检查报告）<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/f320a920ad6d46d2a8686d27d48277f8.png" alt="在这里插入图片描述"></li>
<li>排除不需要检测的目录<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/2f89a81dc44149879e58559530f5ce42.png" alt="在这里插入图片描述"></li>
<li>查看报告以及修改点提示<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jenkins/02dc3e70683442498221ad2cfa456227.png" alt="在这里插入图片描述"></li>
</ul>
<h3 id="实战示例"><a href="#实战示例" class="headerlink" title="实战示例"></a>实战示例</h3><h4 id="zzjy-es项目Jenkinsfile"><a href="#zzjy-es项目Jenkinsfile" class="headerlink" title="zzjy-es项目Jenkinsfile"></a>zzjy-es项目Jenkinsfile</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent &#123;</span><br><span class="line">        <span class="comment">// 指定缓存项目的运行节点</span></span><br><span class="line">        label <span class="string">&quot;zzjy-es&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tools &#123;</span><br><span class="line">        maven <span class="string">&#x27;Maven-3.8.6&#x27;</span></span><br><span class="line">        jdk <span class="string">&#x27;Jdk-11.0.15.1&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;拉取分支代码&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                git <span class="attr">branch:</span> <span class="string">&quot;$&#123;BRANCH&#125;&quot;</span>, <span class="attr">credentialsId:</span> <span class="string">&#x27;c7cca5e6-08da-4a03-b3a1-a7907e335737&#x27;</span>, <span class="attr">url:</span> <span class="string">&#x27;http://192.168.125.2/group2/zzjy-es.git&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">&#x27;单元测试&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                <span class="comment">// &#x27;|| true&#x27;的目的是为了测试失败时也能获取到测试报告</span></span><br><span class="line">                sh <span class="string">&#x27;mvn clean package -f pom.xml || true&#x27;</span></span><br><span class="line">                junit <span class="string">&#x27;**/target/surefire-reports/*.xml&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">&#x27;生成测试报告&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                <span class="comment">// 此处触发jacoco回显测试覆盖率报告</span></span><br><span class="line">                jacoco()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">&#x27;启动项目&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh <span class="string">&#x27;/usr/bin/cp $&#123;WORKSPACE&#125;/target/zzjy-es-0.0.1-SNAPSHOT.jar /usr/local/www/zzjyes8888/zzjy-es-0.0.1-SNAPSHOT.jar123&#x27;</span></span><br><span class="line">                sh <span class="string">&#x27;/usr/bin/sh /usr/local/www/zzjyes8888/restart.sh&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ol>
<li><a href="https://www.jenkins.io/zh/doc/book/pipeline/">Jenkins官方中文文档</a></li>
<li><a href="https://blog.csdn.net/liuwei0376/article/details/123180920">IDEA中配置alibaba代码规范校验工具checkstyle详细教程</a></li>
<li><a href="https://blog.csdn.net/qq_42234452/article/details/108574308">FindBugs-IDEA插件</a></li>
<li><a href="https://blog.csdn.net/tianyucxh/article/details/112974138">Maven集成CheckStyle</a></li>
<li><a href="https://segmentfault.com/a/1190000040482320?utm_source=sf-similar-article">idea的代码规范设置</a></li>
<li><a href="https://blog.csdn.net/dkm123456/article/details/123257202">IDEA从零到精通（27）之Eclipse Code Formatter插件的安装与使用</a></li>
<li><a href="https://blog.csdn.net/xiaocui1995/article/details/123953752">IDEA创建类注释模板和方法注释模板</a></li>
<li><a href="https://www.dandelioncloud.cn/article/details/1513799465017360385">Maven经验分享（七）maven集成findBugs插件</a></li>
</ol>
]]></content>
      <categories>
        <category>CI/CD</category>
        <category>工具</category>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>安装k8s服务</title>
    <url>/2023/05/29/k8s-setup/</url>
    <content><![CDATA[<h3 id="软件简介"><a href="#软件简介" class="headerlink" title="软件简介"></a>软件简介</h3><p>kubernetes，简称K8s，是用8代替名字中间的8个字符 “ubernete”<br>而成的缩写。是一个开源的，用于管理云平台中多个主机上的容器化的应用，Kubernetes的目标是让部署容器化的应用简单并且高效（powerful）,Kubernetes提供了应用部署，规划，更新，维护的一种机制。</p>
<span id="more"></span>

<h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><h4 id="准备节点"><a href="#准备节点" class="headerlink" title="准备节点"></a>准备节点</h4><p>此处演示通过VirtualBox准备5台k8s节点，Docker安装参考：<a href="http://localhost:4000/2023/05/28/docker-setup/">安装Docker服务</a></p>
<table>
<thead>
<tr>
<th>节点名</th>
<th>角色</th>
<th>地址</th>
<th>预安装软件</th>
</tr>
</thead>
<tbody><tr>
<td>k8s-01</td>
<td>master</td>
<td>192.168.1.121</td>
<td>docker-ce-20.x</td>
</tr>
<tr>
<td>k8s-02</td>
<td>node</td>
<td>192.168.1.122</td>
<td>docker-ce-20.x</td>
</tr>
<tr>
<td>k8s-03</td>
<td>node</td>
<td>192.168.1.123</td>
<td>docker-ce-20.x</td>
</tr>
<tr>
<td>k8s-04</td>
<td>node</td>
<td>192.168.1.124</td>
<td>docker-ce-20.x</td>
</tr>
<tr>
<td>k8s-05</td>
<td>node</td>
<td>192.168.1.125</td>
<td>docker-ce-20.x</td>
</tr>
</tbody></table>
<p>通过复制虚拟机模板，修改主机名和网络地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改模板的主机名</span></span><br><span class="line">[root@example-04 ~]<span class="comment"># sed -i &#x27;s/example-04/k8s-01/&#x27; /etc/hostname</span></span><br><span class="line"><span class="comment"># 修改模板的IP地址</span></span><br><span class="line">[root@example-04 ~]<span class="comment"># sed -i &#x27;s/192.168.1.106/192.168.1.121/&#x27; /etc/sysconfig/network-scripts/ifcfg-enp0s3</span></span><br></pre></td></tr></table></figure>

<h4 id="节点检查"><a href="#节点检查" class="headerlink" title="节点检查"></a>节点检查</h4><ol>
<li>确保每个节点MAC地址都唯一（由于复制虚拟机产生的节点，可能会导致MAC地址相同）</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-01 ~]<span class="comment"># ip addr show enp0s3</span></span><br><span class="line">2: enp0s3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 08:00:27:95:73:a5 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.1.121/24 brd 192.168.1.255 scope global noprefixroute enp0s3</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::f535:11dd:60c7:61de/64 scope <span class="built_in">link</span> noprefixroute </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>确保每个节点product_uuid地址都唯一（由于复制虚拟机产生的节点，可能会导致product_uuid地址相同）</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s01 ~]<span class="comment"># cat /sys/class/dmi/id/product_uuid </span></span><br><span class="line">F351227A-95B9-E543-8DB4-639FEF6915D5</span><br></pre></td></tr></table></figure>

<h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><p>安装步骤参考：<a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/">官方文档</a>，以下三个软件需要在每个节点都安装：</p>
<ol>
<li>kubeadm：用于构建集群（类似docker swarm命令）。</li>
<li>kubelet：安装在集群的每个节点，作为agent与管理节点交互；负责启动Pod和管理容器。</li>
<li>kubectl：与集群交互的命令行工具。</li>
</ol>
<h4 id="节点安装"><a href="#节点安装" class="headerlink" title="节点安装"></a>节点安装</h4><h5 id="配置k8s镜像源"><a href="#配置k8s镜像源" class="headerlink" title="配置k8s镜像源"></a>配置k8s镜像源</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 国内推荐替换为aliyun的镜像源</span></span><br><span class="line">[root@k8s-01 yum.repos.d]<span class="comment"># cat &lt;&lt;EOF | sudo tee /etc/yum.repos.d/kubernetes.repo</span></span><br><span class="line">[kubernetes] </span><br><span class="line">name=Kubernetes </span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64 </span><br><span class="line">enabled=1 </span><br><span class="line">gpgcheck=0 </span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">EOF</span><br><span class="line"><span class="comment"># 国外也可以采用以下配置（google镜像源）</span></span><br><span class="line">[root@k8s-01 yum.repos.d]<span class="comment"># cat &lt;&lt;EOF | sudo tee /etc/yum.repos.d/kubernetes.repo</span></span><br><span class="line">&gt; [kubernetes]</span><br><span class="line">&gt; name=Kubernetes</span><br><span class="line">&gt; baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\<span class="variable">$basearch</span></span><br><span class="line">&gt; enabled=1</span><br><span class="line">&gt; gpgcheck=1</span><br><span class="line">&gt; gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg</span><br><span class="line">&gt; exclude=kubelet kubeadm kubectl</span><br><span class="line">&gt; EOF</span><br></pre></td></tr></table></figure>

<h5 id="配置SELinux为默认通过模式"><a href="#配置SELinux为默认通过模式" class="headerlink" title="配置SELinux为默认通过模式"></a>配置SELinux为默认通过模式</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-01 yum.repos.d]<span class="comment"># setenforce 0 &amp;&amp; getenforce</span></span><br><span class="line">Permissive</span><br><span class="line"><span class="comment"># 修改selinux的配置文件</span></span><br><span class="line">[root@k8s-01 yum.repos.d]<span class="comment"># sed -i &#x27;s/^SELINUX=enforcing$/SELINUX=permissive/&#x27; /etc/selinux/config</span></span><br></pre></td></tr></table></figure>

<h5 id="安装kubeadm、kubelet、kubectl软件"><a href="#安装kubeadm、kubelet、kubectl软件" class="headerlink" title="安装kubeadm、kubelet、kubectl软件"></a>安装kubeadm、kubelet、kubectl软件</h5><p>此处版本为1.23.6（不添加版本号默认为最新版本）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-01 yum.repos.d]<span class="comment"># yum install -y kubelet-1.23.6 kubeadm-1.23.6 kubectl-1.23.6 --disableexcludes=kubernetes</span></span><br></pre></td></tr></table></figure>

<h5 id="启动kubelet并加入自启动服务"><a href="#启动kubelet并加入自启动服务" class="headerlink" title="启动kubelet并加入自启动服务"></a>启动kubelet并加入自启动服务</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-01 yum.repos.d]<span class="comment"># systemctl enable --now kubelet</span></span><br></pre></td></tr></table></figure>

<h5 id="主机名解析配置"><a href="#主机名解析配置" class="headerlink" title="主机名解析配置"></a>主机名解析配置</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-01 ~]<span class="comment"># vi /etc/hosts</span></span><br><span class="line">192.168.1.121 k8s-01.centos7</span><br><span class="line">192.168.1.122 k8s-02.centos7</span><br><span class="line">192.168.1.123 k8s-03.centos7</span><br><span class="line">192.168.1.124 k8s-04.centos7</span><br><span class="line">192.168.1.125 k8s-05.centos7</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-01 ~]<span class="comment"># cat &gt;&gt;/etc/hosts &lt;&lt;EOF </span></span><br><span class="line">192.168.1.121 k8s-01.centos7</span><br><span class="line">192.168.1.122 k8s-02.centos7</span><br><span class="line">192.168.1.123 k8s-03.centos7</span><br><span class="line">192.168.1.124 k8s-04.centos7</span><br><span class="line">192.168.1.125 k8s-05.centos7</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h5 id="流量转发"><a href="#流量转发" class="headerlink" title="流量转发"></a>流量转发</h5><h6 id="开启DockerCE流量转发规则"><a href="#开启DockerCE流量转发规则" class="headerlink" title="开启DockerCE流量转发规则"></a>开启DockerCE流量转发规则</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s01 ~]<span class="comment"># vi /lib/systemd/system/docker.service</span></span><br><span class="line">...</span><br><span class="line">[Service]</span><br><span class="line">ExecStartPost=/sbin/iptables -P FORWARD ACCEPT</span><br><span class="line">...</span><br><span class="line"><span class="comment"># 最好重启（reboot)</span></span><br><span class="line">[root@k8s01 ~]<span class="comment"># systemctl daemon-reload &amp;&amp; systemctl restart docker</span></span><br></pre></td></tr></table></figure>

<h6 id="开启OS网桥流量转发规则"><a href="#开启OS网桥流量转发规则" class="headerlink" title="开启OS网桥流量转发规则"></a>开启OS网桥流量转发规则</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s01 ~]<span class="comment"># cat &gt;/etc/sysctl.d/k8s.conf &lt;&lt;EOF</span></span><br><span class="line">net.bridge.bridge-nf-call-ip6tables =1</span><br><span class="line">net.bridge.bridge-nf-call-iptables =1</span><br><span class="line">EOF</span><br><span class="line">[root@k8s01 ~]<span class="comment"># sysctl --system</span></span><br></pre></td></tr></table></figure>

<h5 id="节点网络配置"><a href="#节点网络配置" class="headerlink" title="节点网络配置"></a>节点网络配置</h5><ol>
<li>所有节点均属于192.168.1.0&#x2F;24 网段，相互之间能够联通。</li>
<li>需要开启防火墙的一下<a href="https://kubernetes.io/docs/reference/ports-and-protocols/">《端口》</a></li>
</ol>
<h6 id="管理节点"><a href="#管理节点" class="headerlink" title="管理节点"></a>管理节点</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启防火墙端口</span></span><br><span class="line"><span class="comment"># 6443：      k8s api-server 监听的端口</span></span><br><span class="line"><span class="comment"># 2379-2380： k8s etcd serve、client 监听的端口</span></span><br><span class="line"><span class="comment"># 10250：     k8s kubelet-api 监听的端口</span></span><br><span class="line"><span class="comment"># 10259：     k8s kube-scheduler 监听的端口</span></span><br><span class="line"><span class="comment"># 10257：     k8s kube-controller-manager 监听的端口</span></span><br><span class="line"><span class="comment"># 8472：      flannel网络插件，使用8472/udp协议相互通信</span></span><br><span class="line">[root@k8s01 ~]<span class="comment"># firewall-cmd --zone=public --add-port=6443/tcp --add-port=2379-2380/tcp --add-port=10250/tcp --add-port=10259/tcp --add-port=10257/tcp --add-port=8472/udp --permanent</span></span><br><span class="line">success</span><br><span class="line"><span class="comment"># 重新加载防火墙</span></span><br><span class="line">[root@k8s01 ~]<span class="comment"># firewall-cmd --reload</span></span><br><span class="line">success</span><br></pre></td></tr></table></figure>

<h6 id="工作节点"><a href="#工作节点" class="headerlink" title="工作节点"></a>工作节点</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启防火墙端口</span></span><br><span class="line"><span class="comment"># 10250：       k8s kubelet-api 监听的端口</span></span><br><span class="line"><span class="comment"># 30000-32767： k8s NodePort Services* 监听的端口</span></span><br><span class="line">[root@k8s01 ~]<span class="comment"># firewall-cmd --zone=public --add-port=10250/tcp --add-port=30000-32767/tcp --add-port=8472/udp --permanent</span></span><br><span class="line">success</span><br><span class="line"><span class="comment"># 重新加载防火墙</span></span><br><span class="line">[root@k8s01 ~]<span class="comment"># firewall-cmd --reload</span></span><br><span class="line">success</span><br></pre></td></tr></table></figure>

<h5 id="关闭swap交换区"><a href="#关闭swap交换区" class="headerlink" title="关闭swap交换区"></a>关闭swap交换区</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 即使生效</span></span><br><span class="line">[root@k8s-01 yum.repos.d]<span class="comment"># free -h</span></span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           990M        236M        101M         50M        653M        560M</span><br><span class="line">Swap:          2.0G          0B        2.0G</span><br><span class="line">[root@k8s-01 yum.repos.d]<span class="comment"># swapoff -a</span></span><br><span class="line">[root@k8s-01 yum.repos.d]<span class="comment"># free -h</span></span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           990M        235M        101M         50M        653M        560M</span><br><span class="line">Swap:            0B          0B          0B</span><br><span class="line"><span class="comment"># 永久生效</span></span><br><span class="line"><span class="comment"># 修改/etc/fstab文件，注释掉SWAP的自动挂载，使用free -m确认swap已经关闭。</span></span><br><span class="line">[root@k8s-01 ~]<span class="comment"># vi /etc/fstab</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">#/dev/mapper/centos-swap swap                    swap    defaults        0 0</span></span><br><span class="line">...</span><br><span class="line">[root@k8s-01 ~]<span class="comment"># echo &#x27;vm.swappiness=0&#x27; &gt;&gt; /etc/sysctl.d/99-sysctl.conf</span></span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-01 ~]<span class="comment"># swapoff -a &amp;&amp; sed -i &#x27;/ swap / s/^\(.*\)$/#\1/g&#x27; /etc/fstab</span></span><br><span class="line">[root@k8s-01 ~]<span class="comment"># echo &#x27;vm.swappiness=0&#x27; &gt;&gt; /etc/sysctl.d/99-sysctl.conf</span></span><br></pre></td></tr></table></figure>

<h5 id="驱动cgroup配置"><a href="#驱动cgroup配置" class="headerlink" title="驱动cgroup配置"></a>驱动cgroup配置</h5><p>如果出现：[kubelet-check] It seems like the kubelet isn’t running or healthy. 则需要如下配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-01 ~]<span class="comment"># vi /etc/docker/daemon.json</span></span><br><span class="line">...</span><br><span class="line"> <span class="string">&quot;exec-opts&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;native.cgroupdriver=systemd&quot;</span></span><br><span class="line">  ]</span><br><span class="line">...</span><br><span class="line">[root@k8s-01 ~]<span class="comment"># systemctl restart docker</span></span><br><span class="line">[root@k8s-01 ~]<span class="comment"># systemctl restart kubelet</span></span><br></pre></td></tr></table></figure>

<h4 id="集群构建"><a href="#集群构建" class="headerlink" title="集群构建"></a>集群构建</h4><h5 id="安装主节点"><a href="#安装主节点" class="headerlink" title="安装主节点"></a>安装主节点</h5><h6 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h6><blockquote>
<p>注：如果初始化过程中出现错误，需先用“<strong>kubeadm reset</strong>”后继续。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-01 ~]<span class="comment"># kubeadm init --apiserver-advertise-address 192.168.1.121 --image-repository registry.aliyuncs.com/google_containers --service-cidr=10.96.0.0/16 --pod-network-cidr=10.244.0.0/16</span></span><br><span class="line">I0723 11:38:26.372866   17760 version.go:255] remote version is much newer: v1.24.3; falling back to: stable-1.23</span><br><span class="line">[init] Using Kubernetes version: v1.23.9</span><br><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">	[WARNING Firewalld]: firewalld is active, please ensure ports [6443 10250] are open or your cluster may not <span class="keyword">function</span> correctly</span><br><span class="line">[preflight] Pulling images required <span class="keyword">for</span> setting up a Kubernetes cluster</span><br><span class="line">[preflight] This might take a minute or two, depending on the speed of your internet connection</span><br><span class="line">[preflight] You can also perform this action <span class="keyword">in</span> beforehand using <span class="string">&#x27;kubeadm config images pull&#x27;</span></span><br><span class="line">[certs] Using certificateDir folder <span class="string">&quot;/etc/kubernetes/pki&quot;</span></span><br><span class="line">[certs] Generating <span class="string">&quot;ca&quot;</span> certificate and key</span><br><span class="line">[certs] Generating <span class="string">&quot;apiserver&quot;</span> certificate and key</span><br><span class="line">[certs] apiserver serving cert is signed <span class="keyword">for</span> DNS names [k8s-01.centos7 kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 192.168.1.121]</span><br><span class="line">[certs] Generating <span class="string">&quot;apiserver-kubelet-client&quot;</span> certificate and key</span><br><span class="line">[certs] Generating <span class="string">&quot;front-proxy-ca&quot;</span> certificate and key</span><br><span class="line">[certs] Generating <span class="string">&quot;front-proxy-client&quot;</span> certificate and key</span><br><span class="line">[certs] Generating <span class="string">&quot;etcd/ca&quot;</span> certificate and key</span><br><span class="line">[certs] Generating <span class="string">&quot;etcd/server&quot;</span> certificate and key</span><br><span class="line">[certs] etcd/server serving cert is signed <span class="keyword">for</span> DNS names [k8s-01.centos7 localhost] and IPs [192.168.1.121 127.0.0.1 ::1]</span><br><span class="line">[certs] Generating <span class="string">&quot;etcd/peer&quot;</span> certificate and key</span><br><span class="line">[certs] etcd/peer serving cert is signed <span class="keyword">for</span> DNS names [k8s-01.centos7 localhost] and IPs [192.168.1.121 127.0.0.1 ::1]</span><br><span class="line">[certs] Generating <span class="string">&quot;etcd/healthcheck-client&quot;</span> certificate and key</span><br><span class="line">[certs] Generating <span class="string">&quot;apiserver-etcd-client&quot;</span> certificate and key</span><br><span class="line">[certs] Generating <span class="string">&quot;sa&quot;</span> key and public key</span><br><span class="line">[kubeconfig] Using kubeconfig folder <span class="string">&quot;/etc/kubernetes&quot;</span></span><br><span class="line">[kubeconfig] Writing <span class="string">&quot;admin.conf&quot;</span> kubeconfig file</span><br><span class="line">[kubeconfig] Writing <span class="string">&quot;kubelet.conf&quot;</span> kubeconfig file</span><br><span class="line">[kubeconfig] Writing <span class="string">&quot;controller-manager.conf&quot;</span> kubeconfig file</span><br><span class="line">[kubeconfig] Writing <span class="string">&quot;scheduler.conf&quot;</span> kubeconfig file</span><br><span class="line">[kubelet-start] Writing kubelet environment file with flags to file <span class="string">&quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span></span><br><span class="line">[kubelet-start] Writing kubelet configuration to file <span class="string">&quot;/var/lib/kubelet/config.yaml&quot;</span></span><br><span class="line">[kubelet-start] Starting the kubelet</span><br><span class="line">[control-plane] Using manifest folder <span class="string">&quot;/etc/kubernetes/manifests&quot;</span></span><br><span class="line">[control-plane] Creating static Pod manifest <span class="keyword">for</span> <span class="string">&quot;kube-apiserver&quot;</span></span><br><span class="line">[control-plane] Creating static Pod manifest <span class="keyword">for</span> <span class="string">&quot;kube-controller-manager&quot;</span></span><br><span class="line">[control-plane] Creating static Pod manifest <span class="keyword">for</span> <span class="string">&quot;kube-scheduler&quot;</span></span><br><span class="line">[etcd] Creating static Pod manifest <span class="keyword">for</span> <span class="built_in">local</span> etcd <span class="keyword">in</span> <span class="string">&quot;/etc/kubernetes/manifests&quot;</span></span><br><span class="line">[wait-control-plane] Waiting <span class="keyword">for</span> the kubelet to boot up the control plane as static Pods from directory <span class="string">&quot;/etc/kubernetes/manifests&quot;</span>. This can take up to 4m0s</span><br><span class="line">[apiclient] All control plane components are healthy after 7.506207 seconds</span><br><span class="line">[upload-config] Storing the configuration used <span class="keyword">in</span> ConfigMap <span class="string">&quot;kubeadm-config&quot;</span> <span class="keyword">in</span> the <span class="string">&quot;kube-system&quot;</span> Namespace</span><br><span class="line">[kubelet] Creating a ConfigMap <span class="string">&quot;kubelet-config-1.23&quot;</span> <span class="keyword">in</span> namespace kube-system with the configuration <span class="keyword">for</span> the kubelets <span class="keyword">in</span> the cluster</span><br><span class="line">NOTE: The <span class="string">&quot;kubelet-config-1.23&quot;</span> naming of the kubelet ConfigMap is deprecated. Once the UnversionedKubeletConfigMap feature gate graduates to Beta the default name will become just <span class="string">&quot;kubelet-config&quot;</span>. Kubeadm upgrade will handle this transition transparently.</span><br><span class="line">[upload-certs] Skipping phase. Please see --upload-certs</span><br><span class="line">[mark-control-plane] Marking the node k8s-01.centos7 as control-plane by adding the labels: [node-role.kubernetes.io/master(deprecated) node-role.kubernetes.io/control-plane node.kubernetes.io/exclude-from-external-load-balancers]</span><br><span class="line">[mark-control-plane] Marking the node k8s-01.centos7 as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule]</span><br><span class="line">[bootstrap-token] Using token: tkryt3.b5v109hd47moi2kg</span><br><span class="line">[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to get nodes</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs <span class="keyword">in</span> order <span class="keyword">for</span> nodes to get long term certificate credentials</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow certificate rotation <span class="keyword">for</span> all node client certificates <span class="keyword">in</span> the cluster</span><br><span class="line">[bootstrap-token] Creating the <span class="string">&quot;cluster-info&quot;</span> ConfigMap <span class="keyword">in</span> the <span class="string">&quot;kube-public&quot;</span> namespace</span><br><span class="line">[kubelet-finalize] Updating <span class="string">&quot;/etc/kubernetes/kubelet.conf&quot;</span> to point to a rotatable kubelet client certificate and key</span><br><span class="line">[addons] Applied essential addon: CoreDNS</span><br><span class="line">[addons] Applied essential addon: kube-proxy</span><br><span class="line"></span><br><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">  sudo <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">  sudo <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line">Alternatively, <span class="keyword">if</span> you are the root user, you can run:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">export</span> KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run <span class="string">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">Then you can <span class="built_in">join</span> any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm <span class="built_in">join</span> 192.168.1.121:6443 --token tkryt3.b5v109hd47moi2kg \</span><br><span class="line">	--discovery-token-ca-cert-hash sha256:ce9aa4f4a7f9ed25233bd93850e8ef450325f1f124528d10c9cb2288a3949e23</span><br></pre></td></tr></table></figure>

<h6 id="配置kubectl环境变量"><a href="#配置kubectl环境变量" class="headerlink" title="配置kubectl环境变量"></a>配置kubectl环境变量</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 环境变量root配置</span></span><br><span class="line">[root@k8s-01 ~]<span class="comment"># mkdir -p $HOME/.kube</span></span><br><span class="line">[root@k8s-01 ~]<span class="comment"># cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span></span><br><span class="line">[root@k8s-01 ~]<span class="comment"># chown $(id -u):$(id -g) $HOME/.kube/config</span></span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> KUBECONFIG=/etc/kubernetes/admin.conf</span><br></pre></td></tr></table></figure>

<h5 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h5><h6 id="启动flannel网络插件（CNI规范实现之一）"><a href="#启动flannel网络插件（CNI规范实现之一）" class="headerlink" title="启动flannel网络插件（CNI规范实现之一）"></a>启动flannel网络插件（CNI规范实现之一）</h6><ul>
<li>如果无法链接raw.githubusercontent.com，则需要添加自定义域名解析</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-01 ~]<span class="comment"># kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span></span><br><span class="line">The connection to the server raw.githubusercontent.com was refused - did you specify the right host or port?</span><br><span class="line"><span class="comment">### 解决方法</span></span><br><span class="line">[root@k8s-01 ~]<span class="comment"># vi /etc/hosts</span></span><br><span class="line">...</span><br><span class="line">185.199.109.133  raw.githubusercontent.com</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<ul>
<li>查看当前pod状态并安装flannel网络插件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前状态如下，coredns都是Pending状态</span></span><br><span class="line">[root@k8s-01 ~]<span class="comment"># kubectl get pods --all-namespaces</span></span><br><span class="line">NAMESPACE     NAME                                     READY   STATUS    RESTARTS   AGE</span><br><span class="line">kube-system   coredns-6d8c4cb4d-6zvvl                  0/1     Pending   0          19m</span><br><span class="line">kube-system   coredns-6d8c4cb4d-jmtnw                  0/1     Pending   0          19m</span><br><span class="line">kube-system   etcd-k8s-01.centos7                      1/1     Running   1          20m</span><br><span class="line">kube-system   kube-apiserver-k8s-01.centos7            1/1     Running   1          20m</span><br><span class="line">kube-system   kube-controller-manager-k8s-01.centos7   1/1     Running   1          20m</span><br><span class="line">kube-system   kube-proxy-hgjwm                         1/1     Running   0          19m</span><br><span class="line">kube-system   kube-scheduler-k8s-01.centos7            1/1     Running   1          20m</span><br><span class="line">[root@k8s-01 ~]<span class="comment"># kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span></span><br><span class="line">namespace/kube-flannel created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/flannel created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/flannel created</span><br><span class="line">serviceaccount/flannel created</span><br><span class="line">configmap/kube-flannel-cfg created</span><br><span class="line">daemonset.apps/kube-flannel-ds created</span><br><span class="line"><span class="comment"># 再次查看状态如下，网络状态ok了</span></span><br><span class="line">[root@k8s-01 ~]<span class="comment"># kubectl get pods --all-namespaces</span></span><br><span class="line">NAMESPACE      NAME                                     READY   STATUS    RESTARTS   AGE</span><br><span class="line">kube-flannel   kube-flannel-ds-sjbcm                    1/1     Running   0          40s</span><br><span class="line">kube-system    coredns-6d8c4cb4d-6zvvl                  1/1     Running   0          35m</span><br><span class="line">kube-system    coredns-6d8c4cb4d-jmtnw                  1/1     Running   0          35m</span><br><span class="line">kube-system    etcd-k8s-01.centos7                      1/1     Running   1          35m</span><br><span class="line">kube-system    kube-apiserver-k8s-01.centos7            1/1     Running   1          35m</span><br><span class="line">kube-system    kube-controller-manager-k8s-01.centos7   1/1     Running   1          35m</span><br><span class="line">kube-system    kube-proxy-hgjwm                         1/1     Running   0          35m</span><br><span class="line">kube-system    kube-scheduler-k8s-01.centos7            1/1     Running   1          35m</span><br></pre></td></tr></table></figure>

<h6 id="启动calico网络插件（CNI规范实现之一）"><a href="#启动calico网络插件（CNI规范实现之一）" class="headerlink" title="启动calico网络插件（CNI规范实现之一）"></a>启动calico网络插件（CNI规范实现之一）</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-01 manifests]<span class="comment"># wget https://docs.projectcalico.org/manifests/calico.yaml -O kube-calico.yaml --no-check-certificate</span></span><br><span class="line"><span class="comment"># 可能需要关闭防火墙才行</span></span><br><span class="line">[root@k8s-01 manifests]<span class="comment"># kubectl apply -f kube-calico.yaml</span></span><br><span class="line">[root@k8s-01 manifests]<span class="comment"># kubectl get pods --all-namespaces</span></span><br><span class="line">NAMESPACE     NAME                                       READY   STATUS    RESTARTS      AGE</span><br><span class="line">kube-system   calico-kube-controllers-5c64b68895-mg6rl   1/1     Running   7 (90m ago)   97m</span><br><span class="line">kube-system   calico-node-2tlf8                          1/1     Running   0             79m</span><br><span class="line">kube-system   calico-node-gjc59                          1/1     Running   1 (90m ago)   97m</span><br><span class="line">kube-system   calico-node-lrghq                          1/1     Running   1 (90m ago)   97m</span><br><span class="line">kube-system   calico-node-v59fz                          1/1     Running   0             72m</span><br><span class="line">kube-system   coredns-6d8c4cb4d-l7wkk                    1/1     Running   2 (90m ago)   117m</span><br><span class="line">kube-system   coredns-6d8c4cb4d-ncwh6                    1/1     Running   2 (90m ago)   117m</span><br><span class="line">kube-system   etcd-k8s-01.centos7                        1/1     Running   6 (90m ago)   117m</span><br><span class="line">kube-system   kube-apiserver-k8s-01.centos7              1/1     Running   2 (90m ago)   117m</span><br><span class="line">kube-system   kube-controller-manager-k8s-01.centos7     1/1     Running   2 (90m ago)   117m</span><br><span class="line">kube-system   kube-proxy-297sm                           1/1     Running   3 (90m ago)   117m</span><br><span class="line">kube-system   kube-proxy-qcxwp                           1/1     Running   0             72m</span><br><span class="line">kube-system   kube-proxy-vmr7w                           1/1     Running   0             79m</span><br><span class="line">kube-system   kube-proxy-w7xpb                           1/1     Running   1 (90m ago)   115m</span><br><span class="line">kube-system   kube-scheduler-k8s-01.centos7              1/1     Running   6 (90m ago)   117m</span><br></pre></td></tr></table></figure>

<h5 id="加入从节点"><a href="#加入从节点" class="headerlink" title="加入从节点"></a>加入从节点</h5><ul>
<li><strong>注意</strong>：*<font color=#DC143C>从节点也需要安装kubeadm、kubelet、kubectl等软件，参考【节点安装】小结进行安装。</font>*</li>
<li><strong>注意</strong>：*<font color=#DC143C>如果join过程中报错，需要通过“<strong>kubeadm reset</strong>”重置后继续操作。</font>*</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用join命令加入集群</span></span><br><span class="line">[root@k8s-02 ~]<span class="comment"># kubeadm join 192.168.1.121:6443 --token tkryt3.b5v109hd47moi2kg --discovery-token-ca-cert-hash sha256:ce9aa4f4a7f9ed25233bd93850e8ef450325f1f124528d10c9cb2288a3949e23</span></span><br><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">[preflight] Reading configuration from the cluster...</span><br><span class="line">[preflight] FYI: You can look at this config file with <span class="string">&#x27;kubectl -n kube-system get cm kubeadm-config -o yaml&#x27;</span></span><br><span class="line">[kubelet-start] Writing kubelet configuration to file <span class="string">&quot;/var/lib/kubelet/config.yaml&quot;</span></span><br><span class="line">[kubelet-start] Writing kubelet environment file with flags to file <span class="string">&quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span></span><br><span class="line">[kubelet-start] Starting the kubelet</span><br><span class="line">[kubelet-start] Waiting <span class="keyword">for</span> the kubelet to perform the TLS Bootstrap...</span><br><span class="line"></span><br><span class="line">This node has joined the cluster:</span><br><span class="line">* Certificate signing request was sent to apiserver and a response was received.</span><br><span class="line">* The Kubelet was informed of the new secure connection details.</span><br><span class="line"></span><br><span class="line">Run <span class="string">&#x27;kubectl get nodes&#x27;</span> on the control-plane to see this node <span class="built_in">join</span> the cluster.</span><br><span class="line">[root@k8s-01 ~]<span class="comment"># kubectl get nodes</span></span><br><span class="line">NAME             STATUS   ROLES                  AGE     VERSION</span><br><span class="line">k8s-01.centos7   Ready    control-plane,master   60m     v1.23.6</span><br><span class="line">k8s-02.centos7   Ready    &lt;none&gt;                 3m49s   v1.23.6</span><br></pre></td></tr></table></figure>

<h4 id="搭建k8s控制台"><a href="#搭建k8s控制台" class="headerlink" title="搭建k8s控制台"></a>搭建k8s控制台</h4><h5 id="创建控制台服务"><a href="#创建控制台服务" class="headerlink" title="创建控制台服务"></a>创建控制台服务</h5><blockquote>
<p>dashboard与kubeadm的 <a href="https://github.com/kubernetes/dashboard/releases">版本对应关系</a>，此处选择1.23.6对应的2.5.0版本</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载启动文件</span></span><br><span class="line">[root@k8s-01 ~]<span class="comment"># wget  https://raw.githubusercontent.com/kubernetes/dashboard/v2.5.0/aio/deploy/recommended.yaml</span></span><br><span class="line">[root@k8s-01 ~]<span class="comment"># mv recommended.yaml k8s-dashboard-v2.5.0.yaml</span></span><br><span class="line"><span class="comment"># 修改文件配置</span></span><br><span class="line">[root@k8s-01 ~]<span class="comment"># vi k8s-dashboard-v2.5.0.yaml</span></span><br><span class="line">...</span><br><span class="line"><span class="comment"># 添加nodeName，默认把控制台部署到master节点上</span></span><br><span class="line"><span class="comment"># 添加nodePort，设置访问端口。主节点ip:port</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h5 id="登录控制的秘钥"><a href="#登录控制的秘钥" class="headerlink" title="登录控制的秘钥"></a>登录控制的秘钥</h5><p><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/k8s/80523b3a6251454da5b9ee1804cd07dc.png" alt="在这里插入图片描述"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># </span></span><br><span class="line">[root@k8s-01 ~]<span class="comment"># kubectl get secret -n kubernetes-dashboard</span></span><br><span class="line">NAME                               TYPE                                  DATA   AGE</span><br><span class="line">default-token-gfb4t                kubernetes.io/service-account-token   3      19m</span><br><span class="line">kubernetes-dashboard-certs         Opaque                                0      19m</span><br><span class="line">kubernetes-dashboard-csrf          Opaque                                1      19m</span><br><span class="line">kubernetes-dashboard-key-holder    Opaque                                2      19m</span><br><span class="line">kubernetes-dashboard-token-jgjfs   kubernetes.io/service-account-token   3      19m</span><br><span class="line">[root@k8s-01 ~]<span class="comment"># kubectl describe secret kubernetes-dashboard-token-jgjfs -n kubernetes-dashboard</span></span><br><span class="line">Name:         kubernetes-dashboard-token-jgjfs</span><br><span class="line">Namespace:    kubernetes-dashboard</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  kubernetes.io/service-account.name: kubernetes-dashboard</span><br><span class="line">              kubernetes.io/service-account.uid: 138d0b64-596a-4fb2-b03e-17caedec9d17</span><br><span class="line"></span><br><span class="line">Type:  kubernetes.io/service-account-token</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">ca.crt:     1099 bytes</span><br><span class="line">namespace:  20 bytes</span><br><span class="line">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IlA3YzdkZmtVdHZTMURhSk5GYUhvSC1JYXpLMVRCcVBUTXJqNTI1TlppNUkifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJrdWJlcm5ldGVzLWRhc2hib2FyZC10b2tlbi1qZ2pmcyIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50Lm5hbWUiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6IjEzOGQwYjY0LTU5NmEtNGZiMi1iMDNlLTE3Y2FlZGVjOWQxNyIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDprdWJlcm5ldGVzLWRhc2hib2FyZDprdWJlcm5ldGVzLWRhc2hib2FyZCJ9.aP2ReGuNyS8UQAeP0iKRI0zn0C_0WrbIJRH2ZQX_RficL4rg115Ixu0i4Pzdztzj0IAhCaXzVYQpE8GdNL6CbUpn46J7Om08mK3v3Q5sta8Y233zB6frE1Me1beB-Gj9LKW7dn8T28f6wbvmgQaCVX9R7KOFm74QgGri4nNu_qG9hpdLScokQCWpzY3nk8RveYroJoZrEbiz6rhvh2T-M3mVItkb6dEoJrzeznQoDYcx8iukS_ruG4_ptAzh6YEBicglhS5Bi0HfqouUZyhMLEv_fJ02GcTYn7P7NO9bLiry6OtAMHLg2hCsHbvrD75yNrk52D4gg9by8-cPPWFS4w</span><br></pre></td></tr></table></figure>

<h4 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h4><h5 id="添加指定端口到防火墙"><a href="#添加指定端口到防火墙" class="headerlink" title="添加指定端口到防火墙"></a>添加指定端口到防火墙</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[WARNING Firewalld]: firewalld is active, please ensure ports [6443 10250] are open or your cluster may not <span class="keyword">function</span> correctly</span><br><span class="line">[root@k8s-01 yum.repos.d]<span class="comment"># firewall-cmd --zone=public --add-port=6443/tcp --add-port=10250/tcp --permanent</span></span><br><span class="line">[root@k8s-01 yum.repos.d]<span class="comment"># firewall-cmd --reload</span></span><br></pre></td></tr></table></figure>

<h5 id="关闭交换区-amp-扩大内存"><a href="#关闭交换区-amp-扩大内存" class="headerlink" title="关闭交换区&amp;扩大内存"></a>关闭交换区&amp;扩大内存</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 即使生效</span></span><br><span class="line">[root@k8s-01 yum.repos.d]<span class="comment"># free -h</span></span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           990M        236M        101M         50M        653M        560M</span><br><span class="line">Swap:          2.0G          0B        2.0G</span><br><span class="line">[root@k8s-01 yum.repos.d]<span class="comment"># swapoff -a</span></span><br><span class="line">[root@k8s-01 yum.repos.d]<span class="comment"># free -h</span></span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           990M        235M        101M         50M        653M        560M</span><br><span class="line">Swap:            0B          0B          0B</span><br><span class="line"><span class="comment"># 永久生效</span></span><br><span class="line"><span class="comment"># 修改/etc/fstab文件，注释掉SWAP的自动挂载，使用free -m确认swap已经关闭。</span></span><br><span class="line">[root@k8s-01 ~]<span class="comment"># vi /etc/fstab</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">#/dev/mapper/centos-swap swap                    swap    defaults        0 0</span></span><br><span class="line">...</span><br><span class="line">[root@k8s-01 ~]<span class="comment"># echo &#x27;vm.swappiness=0&#x27; &gt;&gt; /etc/sysctl.d/99-sysctl.conf</span></span><br></pre></td></tr></table></figure>

<h5 id="域名解析问题解决"><a href="#域名解析问题解决" class="headerlink" title="域名解析问题解决"></a>域名解析问题解决</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[WARNING Hostname]: hostname <span class="string">&quot;k8s-01.centos7&quot;</span> could not be reached</span><br><span class="line">[WARNING Hostname]: hostname <span class="string">&quot;k8s-01.centos7&quot;</span>: lookup k8s-01.centos7 on 192.168.1.1:53: no such host</span><br><span class="line">[root@k8s-01 ~]<span class="comment"># vi /etc/hosts</span></span><br><span class="line">192.168.1.121 k8s-01.centos7</span><br><span class="line">192.168.1.122 k8s-02.centos7</span><br><span class="line">192.168.1.123 k8s-03.centos7</span><br><span class="line">192.168.1.124 k8s-04.centos7</span><br><span class="line">192.168.1.125 k8s-05.centos7</span><br></pre></td></tr></table></figure>

<h5 id="CRI报错问题"><a href="#CRI报错问题" class="headerlink" title="CRI报错问题"></a>CRI报错问题</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[ERROR CRI]: container runtime is not running: output: E0715 22:41:13.863907   10902 remote_runtime.go:925] <span class="string">&quot;Status from runtime service failed&quot;</span> err=<span class="string">&quot;rpc error: code = Unimplemented desc = unknown service runtime.v1alpha2.RuntimeService&quot;</span></span><br><span class="line"><span class="comment"># 删除文件，重启containerd服务</span></span><br><span class="line">[root@k8s-01 ~]<span class="comment"># rm -rf /etc/containerd/config.toml</span></span><br><span class="line">[root@k8s-01 ~]<span class="comment"># systemctl status containerd</span></span><br></pre></td></tr></table></figure>

<h5 id="kubelet版本问题"><a href="#kubelet版本问题" class="headerlink" title="kubelet版本问题"></a>kubelet版本问题</h5><ul>
<li>我问了下我老师，也查了下资料k8s 已经弃用了docker了，如果安装的kubelet kubeadm kubectl<br>是V1.24就会出现以上错误，安装的时候指定一下1.23版本，就可以解决了：yum install -y kubelet-1.23.6 kubeadm-1.23.6 kubectl-1.23.6</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-01 ~]<span class="comment"># systemctl status kubelet</span></span><br><span class="line"><span class="string">&quot;Error getting node&quot;</span> err=<span class="string">&quot;node \&quot;k8s-01.centos7\&quot; not found&quot;</span></span><br><span class="line">[root@k8s-01 ~]<span class="comment"># yum install -y kubelet-1.23.6 kubeadm-1.23.6 kubectl-1.23.6 --disableexcludes=kubernetes</span></span><br></pre></td></tr></table></figure>

<h5 id="cgroup驱动问题"><a href="#cgroup驱动问题" class="headerlink" title="cgroup驱动问题"></a>cgroup驱动问题</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[kubelet-check] It seems like the kubelet isn<span class="string">&#x27;t running or healthy.</span></span><br><span class="line"><span class="string">[root@k8s-01 ~]# vi /etc/docker/daemon.json</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string"> &quot;exec-opts&quot;: [</span></span><br><span class="line"><span class="string">    &quot;native.cgroupdriver=systemd&quot;</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">[root@k8s-01 ~]# systemctl restart docker</span></span><br><span class="line"><span class="string">[root@k8s-01 ~]# systemctl restart kubelet</span></span><br></pre></td></tr></table></figure>

<h5 id="网络插件flannel无法安装的问题"><a href="#网络插件flannel无法安装的问题" class="headerlink" title="网络插件flannel无法安装的问题"></a>网络插件flannel无法安装的问题</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-01 ~]<span class="comment"># kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span></span><br><span class="line">The connection to the server raw.githubusercontent.com was refused - did you specify the right host or port?</span><br><span class="line"><span class="comment">### 解决方法</span></span><br><span class="line">[root@k8s-01 ~]<span class="comment"># vi /etc/hosts</span></span><br><span class="line">...</span><br><span class="line">185.199.109.133  raw.githubusercontent.com</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h5 id="k8s-dashboard发布出错的处理"><a href="#k8s-dashboard发布出错的处理" class="headerlink" title="k8s-dashboard发布出错的处理"></a>k8s-dashboard发布出错的处理</h5><ul>
<li>将 kubernetes-dashboard 部署在 master 节点上，修改的配置文件内容如下：<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/k8s/b4709e6813c64cd697f9d290028e1fb3.png" alt="在这里插入图片描述"><br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/k8s/ea54611bb2fa4d4c92e53307161b55f6.png" alt="在这里插入图片描述"><br>上述配置将指定 kubernetes-dashboard 和 kubernetes-metrics-scraper 分配部署的节点，此处选择部署在 master 节点解决文中出现的通信问题。</li>
<li>其他配置<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/k8s/66a3c3b151ec410fb65a5007b1c2b985.png" alt="在这里插入图片描述"><br>指定 Service 通过 Cluster 节点的静态端口对外提供服务。Cluster 外部可以通过 <NodeIP>:<NodePort> 访问 Service。</li>
</ul>
<h5 id="不通k8s节点之间的pod无法通信"><a href="#不通k8s节点之间的pod无法通信" class="headerlink" title="不通k8s节点之间的pod无法通信"></a>不通k8s节点之间的pod无法通信</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># flannel网络插件，需要使用8472/udp协议相互通信</span></span><br><span class="line">[root@k8s-01 flannel]<span class="comment"># firewall-cmd --zone=public --add-port=8472/udp --permanent</span></span><br><span class="line">success</span><br><span class="line">[root@k8s-01 flannel]<span class="comment"># firewall-cmd --reload</span></span><br><span class="line">success</span><br></pre></td></tr></table></figure>

<h3 id="部署服务（测试）"><a href="#部署服务（测试）" class="headerlink" title="部署服务（测试）"></a>部署服务（测试）</h3><h4 id="部署脚本"><a href="#部署脚本" class="headerlink" title="部署脚本"></a>部署脚本</h4><h5 id="部署脚本语法帮助查看"><a href="#部署脚本语法帮助查看" class="headerlink" title="部署脚本语法帮助查看"></a>部署脚本语法帮助查看</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看explain命令用法</span></span><br><span class="line">[root@k8s-01 k8s]<span class="comment"># kubectl explain --help</span></span><br><span class="line"><span class="comment">## 举例</span></span><br><span class="line"><span class="comment"># 查看deployment语法规则</span></span><br><span class="line">[root@k8s-01 k8s]<span class="comment"># kubectl explain deployment</span></span><br><span class="line">KIND:     Deployment</span><br><span class="line">VERSION:  apps/v1</span><br><span class="line"></span><br><span class="line">DESCRIPTION:</span><br><span class="line">     Deployment enables declarative updates <span class="keyword">for</span> Pods and ReplicaSets.</span><br><span class="line"></span><br><span class="line">以下略...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看deployment怎么定义镜像port用法</span></span><br><span class="line">[root@k8s-01 k8s]<span class="comment"># kubectl explain deployment.spec.template.spec.containers</span></span><br><span class="line">KIND:     Deployment</span><br><span class="line">VERSION:  apps/v1</span><br><span class="line"></span><br><span class="line">RESOURCE: containers &lt;[]Object&gt;</span><br><span class="line"></span><br><span class="line">DESCRIPTION:</span><br><span class="line">     List of containers belonging to the pod. Containers cannot currently be</span><br><span class="line">     added or removed. There must be at least one container <span class="keyword">in</span> a Pod. Cannot be</span><br><span class="line">     updated.</span><br><span class="line"></span><br><span class="line">     A single application container that you want to run within a pod.</span><br><span class="line"></span><br><span class="line">以下略...</span><br></pre></td></tr></table></figure>

<h5 id="自定义部署脚本"><a href="#自定义部署脚本" class="headerlink" title="自定义部署脚本"></a>自定义部署脚本</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-01 k8s]<span class="comment"># mkdir k8s &amp;&amp; cd k8s</span></span><br><span class="line">[root@k8s-01 k8s]<span class="comment"># vi myapp-test1.yaml</span></span><br><span class="line">...</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: myapp-test1 <span class="comment"># 应用部署名称</span></span><br><span class="line">spec:</span><br><span class="line">  replicas: 2 <span class="comment"># Pod数量</span></span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: myapp-test1 <span class="comment"># 匹配应用部署名称，与metadata.name保持一致即可</span></span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: myapp-test1 <span class="comment"># 匹配应用部署名称，与metadata.name保持一致即可</span></span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: myapp <span class="comment"># 镜像别名</span></span><br><span class="line">        image: 1450793561/myapp:v2 <span class="comment"># 用于测试的web镜像</span></span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: myapp-svc</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: myapp-test1 <span class="comment"># 匹配应用部署名称，用户筛选deployment</span></span><br><span class="line">  ports:</span><br><span class="line">  - protocol: TCP</span><br><span class="line">    port: 8080</span><br><span class="line">    targetPort: 80</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h4 id="发布部署"><a href="#发布部署" class="headerlink" title="发布部署"></a>发布部署</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-01 k8s]<span class="comment"># kubectl apply -f myapp-test1.yaml</span></span><br><span class="line"><span class="comment"># 查看服务</span></span><br><span class="line">[root@k8s-01 k8s]<span class="comment"># kubectl get pods -o wide</span></span><br><span class="line">NAME                           READY   STATUS    RESTARTS   AGE   IP           NODE             NOMINATED NODE   READINESS GATES</span><br><span class="line">myapp-test1-847c776659-qj58c   1/1     Running   0          10m   10.244.2.2   k8s-02.centos7   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">myapp-test1-847c776659-z49xk   1/1     Running   0          10m   10.244.2.3   k8s-02.centos7   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>

<h4 id="移除部署"><a href="#移除部署" class="headerlink" title="移除部署"></a>移除部署</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@k8s-01 k8s]<span class="comment"># kubectl delete -f myapp-test1.yaml</span></span><br></pre></td></tr></table></figure>

<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ol>
<li><a href="https://www.jianshu.com/p/e359d3fe238f">Kubernetes 安装 dashboard 报错</a></li>
<li><a href="https://kubernetes.io/docs">官方文档</a></li>
<li><a href="https://blog.csdn.net/clover661/article/details/114370513">CSDN-markdown（文字加色加字号、背景色等）</a></li>
</ol>
]]></content>
      <categories>
        <category>云原生</category>
        <category>容器编排</category>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>centos7</tag>
        <tag>Kubernetes</tag>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Mysql服务（容器）</title>
    <url>/2023/05/28/mysql-docker/</url>
    <content><![CDATA[<h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><blockquote>
<p>Docker环境安装参考：<a href="https://foreverzang.github.io/2023/05/28/docker-setup/">安装Docker服务</a></p>
</blockquote>
<span id="more"></span>

<h3 id="服务安装"><a href="#服务安装" class="headerlink" title="服务安装"></a>服务安装</h3><h4 id="安装目录"><a href="#安装目录" class="headerlink" title="安装目录"></a>安装目录</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM-4-3-centos <span class="built_in">local</span>]<span class="comment"># mkdir mysql-8.0.27</span></span><br><span class="line">[root@VM-4-3-centos <span class="built_in">local</span>]<span class="comment"># cd mysql-8.0.27/</span></span><br><span class="line">[root@VM-4-3-centos mysql-8.0.27]<span class="comment"># ll</span></span><br><span class="line">-rw-r--r-- 1 root    root  801 Aug 24 14:36 restart.sh</span><br></pre></td></tr></table></figure>

<h4 id="部署脚本"><a href="#部署脚本" class="headerlink" title="部署脚本"></a>部署脚本</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">dir</span>=/usr/local/mysql-8.0.27</span><br><span class="line">name=mysql-8.0.27</span><br><span class="line">containerId=$(docker ps --filter name=<span class="variable">$name</span> -aq)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$containerId</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="string">&quot;create container: <span class="variable">$name</span> (dir: <span class="variable">$dir</span>)&quot;</span></span><br><span class="line">     docker run --name <span class="variable">$name</span> \</span><br><span class="line">     --restart=always \</span><br><span class="line">     -e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">     -p 3306:3306 \</span><br><span class="line">     -v <span class="variable">$dir</span>/datadir/:/var/lib/mysql/ \</span><br><span class="line">     -v <span class="variable">$dir</span>/conf.d/:/etc/mysql/conf.d/ \</span><br><span class="line">     -v /etc/localtime:/etc/localtime:ro \</span><br><span class="line">     -d mysql:8.0.27 \</span><br><span class="line">     --character-set-server=utf8mb4 \</span><br><span class="line">     --collation-server=utf8mb4_unicode_ci</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">     sContainerId=$(docker ps --filter name=<span class="variable">$name</span> -q)</span><br><span class="line">     <span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$sContainerId</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">         <span class="built_in">echo</span> <span class="string">&quot;restart container: <span class="variable">$name</span>&quot;</span></span><br><span class="line">         docker restart <span class="variable">$sContainerId</span></span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">         <span class="built_in">echo</span> <span class="string">&quot;start container: <span class="variable">$name</span>&quot;</span></span><br><span class="line">         docker start <span class="variable">$containerId</span></span><br><span class="line">     <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM-4-3-centos <span class="built_in">local</span>]<span class="comment"># tree -d /usr/local/mysql-8.0.27</span></span><br><span class="line">/usr/local/mysql-8.0.27</span><br><span class="line">├── conf.d</span><br><span class="line">├── datadir</span><br><span class="line">│   ├── <span class="comment">#innodb_temp</span></span><br><span class="line">│   ├── mysql</span><br><span class="line">│   ├── performance_schema</span><br><span class="line">│   └── sys</span><br><span class="line">└── logs</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>中间件</category>
        <category>存储</category>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>容器</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>jdk证书工具keytool</title>
    <url>/2023/05/27/keytool-notes/</url>
    <content><![CDATA[<h3 id="keytool的概念"><a href="#keytool的概念" class="headerlink" title="keytool的概念"></a>keytool的概念</h3><p>keytool 是个密钥和证书管理工具。它使用户能够管理自己的公钥&#x2F;私钥对及相关证书，用于（通过数字签名）自我认证（用户向别的用户&#x2F;服务认证自己）或数据完整性以及认证服务。在JDK1.4以后的版本中都包含了这一工具，它的位置为：%JAVA_HOME%\bin\keytool.exe。</p>
<span id="more"></span>

<p>如下图所示：<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jdk-keytool/af62c3fa00ba456e90a2f91950c30c10.png" alt="java工具集截图"></p>
<h3 id="keytool的用法"><a href="#keytool的用法" class="headerlink" title="keytool的用法"></a>keytool的用法</h3><p>keytool的用法介绍，主要使用-genkeypair、-list、-export | -exportcert几个命令。<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jdk-keytool/11d7a5d325d04d91aaf68343b9ccd898.png" alt="keytool的用法介绍"></p>
<h3 id="创建证书"><a href="#创建证书" class="headerlink" title="创建证书"></a>创建证书</h3><p>创建证书主要是使用” -genkeypair”，该命令的可用参数如下：<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/jdk-keytool/3fa46c2b2ba34657bb55c6ec308cfedd.png" alt="创建证书截图"></p>
<h4 id="生成一个名称为test2的证书，存放在zangh-keystore秘钥库中"><a href="#生成一个名称为test2的证书，存放在zangh-keystore秘钥库中" class="headerlink" title="生成一个名称为test2的证书，存放在zangh.keystore秘钥库中"></a>生成一个名称为test2的证书，存放在zangh.keystore秘钥库中</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@jenkins01 bin]<span class="comment"># keytool -genkeypair -alias &quot;test2&quot; -keyalg &quot;RSA&quot; -keystore &quot;zangh.keystore&quot; -storepass &quot;123456&quot;</span></span><br><span class="line">您的名字与姓氏是什么?</span><br><span class="line">  [Unknown]:  localhost</span><br><span class="line">您的组织单位名称是什么?</span><br><span class="line">  [Unknown]:  zangh</span><br><span class="line">您的组织名称是什么?</span><br><span class="line">  [Unknown]:  zangh</span><br><span class="line">您所在的城市或区域名称是什么?</span><br><span class="line">  [Unknown]:  cz</span><br><span class="line">您所在的省/市/自治区名称是什么?</span><br><span class="line">  [Unknown]:  js</span><br><span class="line">该单位的双字母国家/地区代码是什么?</span><br><span class="line">  [Unknown]:  cn</span><br><span class="line">CN=localhost, OU=zangh, O=zangh, L=cz, ST=js, C=cn是否正确?</span><br><span class="line">  [否]:  是</span><br></pre></td></tr></table></figure>

<h5 id="功能说明"><a href="#功能说明" class="headerlink" title="功能说明"></a>功能说明</h5><p>创建一个别名为test1的证书，该证书存放在名为test.keystore的密钥库中，若test.keystore密钥库不存在则创建。</p>
<h5 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h5><ul>
<li>-genkeypair：生成一对非对称密钥;</li>
<li>-alias：指定密钥对的别名，该别名是公开的;</li>
<li>-keyalg：指定加密算法，本例中的采用通用的RAS加密算法;</li>
<li>-keystore:密钥库的路径及名称，不指定的话，默认在操作系统的用户目录下生成一个”.keystore”的文件</li>
</ul>
<h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><ul>
<li>密钥库的密码至少必须6个字符，可以是纯数字或者字母或者数字和字母的组合等等</li>
<li>“名字与姓氏”应该是输入域名，而不是我们的个人姓名，其他的可以不填</li>
</ul>
<h5 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@jenkins01 bin]<span class="comment"># ll</span></span><br><span class="line">-rw-r--r--. 1 root root   2679 6月  19 20:07 zangh.keystore</span><br></pre></td></tr></table></figure>

<h3 id="查看密钥库里面的证书"><a href="#查看密钥库里面的证书" class="headerlink" title="查看密钥库里面的证书"></a>查看密钥库里面的证书</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@jenkins01 bin]<span class="comment"># keytool -list -keystore zangh.keystore -storepass 123456</span></span><br><span class="line">密钥库类型: PKCS12</span><br><span class="line">密钥库提供方: SUN</span><br><span class="line"></span><br><span class="line">您的密钥库包含 1 个条目</span><br><span class="line"></span><br><span class="line">test2, 2022年6月19日, PrivateKeyEntry, </span><br><span class="line">证书指纹 (SHA-256): 4F:F4:E6:35:30:49:04:32:F5:AA:20:38:9B:52:50:49:4B:F7:40:DE:E4:CC:D6:A2:99:EC:04:AF:54:7E:88:E1</span><br></pre></td></tr></table></figure>

<h3 id="导出到证书文件"><a href="#导出到证书文件" class="headerlink" title="导出到证书文件"></a>导出到证书文件</h3><p>将名为zangh.keystore的证书库中别名为test2的证书条目导出到证书文件test2.crt中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@jenkins01 bin]<span class="comment"># keytool -exportcert -alias test2 -file test2.crt -keystore zangh.keystore -storepass 123456</span></span><br><span class="line">存储在文件 &lt;test2.crt&gt; 中的证书</span><br><span class="line">[root@jenkins01 bin]<span class="comment"># ll</span></span><br><span class="line">-rw-r--r--. 1 root root    857 6月  19 20:14 test2.crt</span><br><span class="line">-rw-r--r--. 1 root root   2679 6月  19 20:07 zangh.keystore</span><br></pre></td></tr></table></figure>

<h3 id="导入证书"><a href="#导入证书" class="headerlink" title="导入证书"></a>导入证书</h3><p>将证书文件test3.crt导入到名为zangh.keystore的证书库中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@jenkins01 bin]<span class="comment"># keytool -import -keystore zangh.keystore -alias test3 -file test3.crt -storepass 123456</span></span><br><span class="line">在别名 &lt;test2&gt; 之下, 证书已经存在于密钥库中</span><br><span class="line">是否仍要添加? [否]:  是</span><br><span class="line">证书已添加到密钥库中</span><br><span class="line">[root@jenkins01 bin]<span class="comment"># keytool -list -keystore zangh.keystore -storepass 123456</span></span><br><span class="line">密钥库类型: PKCS12</span><br><span class="line">密钥库提供方: SUN</span><br><span class="line"></span><br><span class="line">您的密钥库包含 3 个条目</span><br><span class="line"></span><br><span class="line">mykey, 2022年6月19日, trustedCertEntry, </span><br><span class="line">证书指纹 (SHA-256): 4F:F4:E6:35:30:49:04:32:F5:AA:20:38:9B:52:50:49:4B:F7:40:DE:E4:CC:D6:A2:99:EC:04:AF:54:7E:88:E1</span><br><span class="line">test2, 2022年6月19日, PrivateKeyEntry, </span><br><span class="line">证书指纹 (SHA-256): 4F:F4:E6:35:30:49:04:32:F5:AA:20:38:9B:52:50:49:4B:F7:40:DE:E4:CC:D6:A2:99:EC:04:AF:54:7E:88:E1</span><br><span class="line">test3, 2022年6月19日, trustedCertEntry, </span><br><span class="line">证书指纹 (SHA-256): 4F:F4:E6:35:30:49:04:32:F5:AA:20:38:9B:52:50:49:4B:F7:40:DE:E4:CC:D6:A2:99:EC:04:AF:54:7E:88:E1</span><br></pre></td></tr></table></figure>

<h3 id="查看证书信息"><a href="#查看证书信息" class="headerlink" title="查看证书信息"></a>查看证书信息</h3><p>查看证书文件test3.crt的信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@jenkins01 bin]<span class="comment"># keytool -printcert -file &quot;test3.crt&quot;</span></span><br><span class="line">所有者: CN=localhost, OU=zangh, O=zangh, L=cz, ST=js, C=cn</span><br><span class="line">发布者: CN=localhost, OU=zangh, O=zangh, L=cz, ST=js, C=cn</span><br><span class="line">序列号: 401e32e7</span><br><span class="line">生效时间: Sun Jun 19 20:07:32 CST 2022, 失效时间: Sat Sep 17 20:07:32 CST 2022</span><br><span class="line">证书指纹:</span><br><span class="line">	 SHA1: D2:9A:03:96:0F:4F:08:B1:F6:B4:F4:F2:C1:66:31:13:FB:05:74:A6</span><br><span class="line">	 SHA256: 4F:F4:E6:35:30:49:04:32:F5:AA:20:38:9B:52:50:49:4B:F7:40:DE:E4:CC:D6:A2:99:EC:04:AF:54:7E:88:E1</span><br><span class="line">签名算法名称: SHA256withRSA</span><br><span class="line">主体公共密钥算法: 2048 位 RSA 密钥</span><br><span class="line">版本: 3</span><br><span class="line"></span><br><span class="line">扩展: </span><br><span class="line"></span><br><span class="line"><span class="comment">#1: ObjectId: 2.5.29.14 Criticality=false</span></span><br><span class="line">SubjectKeyIdentifier [</span><br><span class="line">    KeyIdentifier [</span><br><span class="line">        0000: 75 B3 94 9E DF A2 4C 58   06 39 48 E3 AF A4 BC CB  u.....LX.9H.....</span><br><span class="line">        0010: 95 1B FE 46                                        ...F</span><br><span class="line">    ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="删除密钥库中的条目"><a href="#删除密钥库中的条目" class="headerlink" title="删除密钥库中的条目"></a>删除密钥库中的条目</h3><p>删除密钥库zangh.keystore中别名为mykey的证书条目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@jenkins01 bin]<span class="comment"># keytool -delete -keystore zangh.keystore -alias mykey -storepass 123456</span></span><br><span class="line">[root@jenkins01 bin]<span class="comment"># keytool -list -keystore zangh.keystore -storepass 123456</span></span><br><span class="line">密钥库类型: PKCS12</span><br><span class="line">密钥库提供方: SUN</span><br><span class="line"></span><br><span class="line">您的密钥库包含 2 个条目</span><br><span class="line"></span><br><span class="line">test2, 2022年6月19日, PrivateKeyEntry, </span><br><span class="line">证书指纹 (SHA-256): 4F:F4:E6:35:30:49:04:32:F5:AA:20:38:9B:52:50:49:4B:F7:40:DE:E4:CC:D6:A2:99:EC:04:AF:54:7E:88:E1</span><br><span class="line">test3, 2022年6月19日, trustedCertEntry, </span><br><span class="line">证书指纹 (SHA-256): 4F:F4:E6:35:30:49:04:32:F5:AA:20:38:9B:52:50:49:4B:F7:40:DE:E4:CC:D6:A2:99:EC:04:AF:54:7E:88:E1</span><br></pre></td></tr></table></figure>

<h3 id="修改证书条目的口令"><a href="#修改证书条目的口令" class="headerlink" title="修改证书条目的口令"></a>修改证书条目的口令</h3><p>将密钥库zangh.keystore中别名为test2的证书条目的密码修改为xdp123456</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@jenkins01 bin]<span class="comment"># keytool -keypasswd -alias test2 -keystore zangh.keystore -storepass 123456</span></span><br><span class="line">keytool 错误: java.lang.UnsupportedOperationException: 如果 -storetype 为 PKCS12, 则不支持 -keypasswd 命令</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工具</category>
        <category>Jdk</category>
        <category>CA证书</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>keytool</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Mysql服务</title>
    <url>/2023/05/28/mysql-setup/</url>
    <content><![CDATA[<h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><h4 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h4><p><a href="https://dev.mysql.com/">官网地址</a> &#x3D;&gt; 下载地址 <a href="https://downloads.mysql.com/archives/community/">5.7.38</a><br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/mysql/16b877e97a514e139f71552969bcf76c.png" alt="软件下载截图01"><br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/mysql/8690ae065b504f3fb93fc234dfda6b86.png" alt="软件下载截图02"></p>
<h4 id="软件安装-1"><a href="#软件安装-1" class="headerlink" title="软件安装"></a>软件安装</h4><ul>
<li>上传安装包到 <font color=#0000ff>&#x2F;usr&#x2F;local&#x2F;src&#x2F;</font></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@zabbix-01 ~]<span class="comment"># cd /usr/local/src/</span></span><br><span class="line">[root@zabbix-01 src]<span class="comment"># ll</span></span><br><span class="line">总用量 724124</span><br><span class="line">-rw-r--r--. 1 root root 741502789 9月  22 21:17 mysql-5.7.38-el7-x86_64.tar.gz</span><br></pre></td></tr></table></figure>

<ul>
<li>创建用户 <font color=#0000ff>mysql:mysql</font></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@zabbix-01 src]<span class="comment"># useradd -r -M -s /sbin/nologin mysql</span></span><br><span class="line">[root@zabbix-01 src]<span class="comment"># id mysql</span></span><br><span class="line">uid=997(mysql) gid=995(mysql) 组=995(mysql)</span><br></pre></td></tr></table></figure>

<ul>
<li>解压到指定的安装目录</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@zabbix-01 src]<span class="comment"># tar -zxf mysql-5.7.38-el7-x86_64.tar.gz -C /usr/local/</span></span><br><span class="line">[root@zabbix-01 <span class="built_in">local</span>]<span class="comment"># cd ../ &amp;&amp; mv mysql-5.7.38-el7-x86_64/ mysql-5.7.38</span></span><br><span class="line">[root@zabbix-01 <span class="built_in">local</span>]<span class="comment"># ll</span></span><br><span class="line">总用量 0</span><br><span class="line">drwxr-xr-x. 2 root root   6 4月  11 2018 bin</span><br><span class="line">drwxr-xr-x. 2 root root   6 4月  11 2018 etc</span><br><span class="line">drwxr-xr-x. 2 root root   6 4月  11 2018 games</span><br><span class="line">drwxr-xr-x. 2 root root   6 4月  11 2018 include</span><br><span class="line">drwxr-xr-x. 2 root root   6 4月  11 2018 lib</span><br><span class="line">drwxr-xr-x. 2 root root   6 4月  11 2018 lib64</span><br><span class="line">drwxr-xr-x. 2 root root   6 4月  11 2018 libexec</span><br><span class="line">drwxr-xr-x. 9 root root 129 9月  22 21:26 mysql-5.7.38</span><br><span class="line">drwxr-xr-x. 2 root root   6 4月  11 2018 sbin</span><br><span class="line">drwxr-xr-x. 5 root root  49 7月   9 23:18 share</span><br><span class="line">drwxr-xr-x. 2 root root  44 9月  22 21:16 src</span><br></pre></td></tr></table></figure>

<ul>
<li>修改MySQL所属目录的权限</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@zabbix-01 <span class="built_in">local</span>]<span class="comment"># chown -R mysql.mysql mysql-5.7.38/</span></span><br><span class="line">[root@zabbix-01 <span class="built_in">local</span>]<span class="comment"># ll | grep mysql-5.7.38</span></span><br><span class="line">drwxr-xr-x. 9 mysql mysql 129 9月  22 21:26 mysql-5.7.38</span><br></pre></td></tr></table></figure>

<ul>
<li>添加MySQL数据所在的目录</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@zabbix-01 mysql-5.7.38]<span class="comment"># mkdir data &amp;&amp; chown -R mysql.mysql /usr/local/mysql-5.7.38/data &amp;&amp; ll</span></span><br><span class="line">总用量 272</span><br><span class="line">drwxr-xr-x.  2 mysql mysql   4096 9月  22 21:26 bin</span><br><span class="line">drwxr-xr-x.  2 mysql mysql      6 9月  22 21:32 data</span><br><span class="line">drwxr-xr-x.  2 mysql mysql     55 9月  22 21:26 docs</span><br><span class="line">drwxr-xr-x.  3 mysql mysql   4096 9月  22 21:26 include</span><br><span class="line">drwxr-xr-x.  5 mysql mysql    230 9月  22 21:26 lib</span><br><span class="line">-rw-r--r--.  1 mysql mysql 259251 3月  22 2022 LICENSE</span><br><span class="line">drwxr-xr-x.  4 mysql mysql     30 9月  22 21:26 man</span><br><span class="line">-rw-r--r--.  1 mysql mysql    566 3月  22 2022 README</span><br><span class="line">drwxr-xr-x. 28 mysql mysql   4096 9月  22 21:26 share</span><br><span class="line">drwxr-xr-x.  2 mysql mysql     90 9月  22 21:26 support-files</span><br></pre></td></tr></table></figure>

<ul>
<li>初始化数据库</li>
</ul>
<h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><h4 id="临时修改"><a href="#临时修改" class="headerlink" title="临时修改"></a>临时修改</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p123456</span><br><span class="line"><span class="comment"># 查看当前连接数</span></span><br><span class="line">mysql&gt; show variables like <span class="string">&#x27;max_connections&#x27;</span>;</span><br><span class="line"><span class="comment"># 设置最大连接数</span></span><br><span class="line">mysql&gt; <span class="built_in">set</span> GLOBAL max_connections=1000</span><br><span class="line"><span class="comment"># 显示当前状态</span></span><br><span class="line">mysql&gt; show status</span><br><span class="line"><span class="comment"># 退出客户端</span></span><br><span class="line">mysql&gt; <span class="built_in">exit</span></span><br><span class="line"><span class="comment"># 查看当前连接数</span></span><br><span class="line">mysqladmin -uroot -p variables | grep <span class="string">&#x27;max_connections&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="永久修改"><a href="#永久修改" class="headerlink" title="永久修改"></a>永久修改</h4><ol>
<li>先检查系统版本</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># centos7-以SysV方式部署；centos7+一般以systemctl方式启动</span></span><br><span class="line">[root@VM-4-3-centos conf.d]<span class="comment"># cat /etc/centos-release</span></span><br><span class="line">CentOS Linux release 7.6.1810 (Core)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>再检查启动方式</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cenos7-：service mysqld status</span></span><br><span class="line">root@fce021ad7523:/<span class="comment"># systemctl status mysqld</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>检查mysql的配置读取位置</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@fce021ad7523:/<span class="comment"># /usr/bin/mysql --verbose --help | grep -A 1 &#x27;Default options&#x27;</span></span><br><span class="line">Default options are <span class="built_in">read</span> from the following files <span class="keyword">in</span> the given order:</span><br><span class="line">/etc/my.cnf /etc/mysql/my.cnf ~/.my.cnf</span><br><span class="line"><span class="comment"># 依次检查上述配置文件是否存在（排序越前，优先级越高）</span></span><br><span class="line">root@fce021ad7523:/<span class="comment"># ls /etc/my.cnf</span></span><br><span class="line"><span class="built_in">ls</span>: cannot access <span class="string">&#x27;/etc/my.cnf&#x27;</span>: No such file or directory</span><br><span class="line">root@fce021ad7523:/<span class="comment"># ls /etc/mysql/my.cnf</span></span><br><span class="line">/etc/mysql/my.cnf</span><br><span class="line">root@fce021ad7523:/<span class="comment"># ls ~/.my.cnf        </span></span><br><span class="line"><span class="built_in">ls</span>: cannot access <span class="string">&#x27;/root/.my.cnf&#x27;</span>: No such file or directory</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>修改mysql最大链接数</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">[mysqld]</span><br><span class="line">max_connections=100</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>重启服务</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cenos7-：service mysqld restart</span></span><br><span class="line">root@fce021ad7523:/<span class="comment"># systemctl restart mysqld</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>检查配置是否生效</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u qycg -p 123!@<span class="comment">#</span></span><br><span class="line">show variables like <span class="string">&#x27;max_connections&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://blog.csdn.net/qq_52943068/article/details/125619418?spm=1001.2014.3001.5501">编译安装lamp</a></p>
]]></content>
      <categories>
        <category>中间件</category>
        <category>存储</category>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Nexus3成品库（容器）</title>
    <url>/2023/05/17/nexus3-docker/</url>
    <content><![CDATA[<h1 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h1><blockquote>
<p>docker安装：<a href="https://blog.csdn.net/u012285269/article/details/124479943">安装【Docker in CentOS7.x】</a></p>
</blockquote>
<ul>
<li>推荐配置4c4g+</li>
</ul>
<h1 id="服务安装"><a href="#服务安装" class="headerlink" title="服务安装"></a>服务安装</h1><h2 id="镜像地址"><a href="#镜像地址" class="headerlink" title="镜像地址"></a>镜像地址</h2><blockquote>
<p>dockerhub地址：<a href="https://hub.docker.com/r/sonatype/nexus3">sonatype&#x2F;nexus3</a> &gt; <a href="https://hub.docker.com/r/sonatype/nexus3/tags?page=1&name=3.42.0">3.42.0</a></p>
</blockquote>
<h2 id="安装服务"><a href="#安装服务" class="headerlink" title="安装服务"></a>安装服务</h2><h3 id="软件目录"><a href="#软件目录" class="headerlink" title="软件目录"></a>软件目录</h3><p>新建目录：nexus为软件主目录，data为数据目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@nexus03 <span class="built_in">local</span>]<span class="comment"># mkdir -p nexus/data</span></span><br></pre></td></tr></table></figure>

<p>目录权限：修改为200</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@nexus03 <span class="built_in">local</span>]<span class="comment"># chown -R 200 nexus</span></span><br><span class="line">[root@nexus03 <span class="built_in">local</span>]<span class="comment"># ll | grep nexus</span></span><br><span class="line">drwxr-xr-x. 3  200 root 18 Nov  2 01:47 nexus</span><br></pre></td></tr></table></figure>

<h3 id="服务脚本"><a href="#服务脚本" class="headerlink" title="服务脚本"></a>服务脚本</h3><p>restart.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">name=nexus</span><br><span class="line">cId=$(docker ps -a | grep <span class="string">&quot;<span class="variable">$name</span>&quot;</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$name</span> container id : <span class="variable">$cId</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$cId</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">     docker run --name <span class="variable">$name</span> \</span><br><span class="line">     -p 8081:8081 \</span><br><span class="line">     --restart=always \</span><br><span class="line">     -v /usr/local/nexus/data:/nexus-data \</span><br><span class="line">     -v /etc/localtime:/etc/localtime:ro \</span><br><span class="line">     -d sonatype/nexus3:3.42.0</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">     sId=$(docker ps | grep <span class="string">&quot;<span class="variable">$name</span>&quot;</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line">     <span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$sId</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">         docker stop <span class="variable">$sId</span></span><br><span class="line">     <span class="keyword">fi</span></span><br><span class="line">     docker start <span class="variable">$cId</span>     </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>cleanup.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">name=nexus</span><br><span class="line">cId=$(docker ps | grep <span class="variable">$name</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$cId</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;stop <span class="variable">$name</span> id:<span class="variable">$cId</span> ...&quot;</span></span><br><span class="line">   docker stop <span class="variable">$cId</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">sId=$(docker ps -a | grep <span class="variable">$name</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$sId</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;remove <span class="variable">$name</span> id:<span class="variable">$sId</span> !&quot;</span></span><br><span class="line">   docker <span class="built_in">rm</span> <span class="variable">$sId</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h3 id="开启端口"><a href="#开启端口" class="headerlink" title="开启端口"></a>开启端口</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@nexus03 <span class="built_in">local</span>]<span class="comment"># firewall-cmd --zone=public --add-port=8081/tcp --permanent</span></span><br><span class="line">[root@nexus03 <span class="built_in">local</span>]<span class="comment"># firewall-cmd --reload</span></span><br></pre></td></tr></table></figure>

<h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><h3 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@nexus03 <span class="built_in">local</span>]<span class="comment"># cd nexus &amp;&amp; sh restart.sh</span></span><br></pre></td></tr></table></figure>

<h3 id="查看效果"><a href="#查看效果" class="headerlink" title="查看效果"></a>查看效果</h3><p>打开浏览器地址栏：<a href="http://172.16.5.102:8081/%EF%BC%88%E6%AD%A4%E4%B8%BA%E6%9C%AA%E7%99%BB%E5%BD%95%E7%8A%B6%E6%80%81%EF%BC%89">http://172.16.5.102:8081/（此为未登录状态）</a><br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/nexus3/5ef337f774fa48fdb71c61a2ddcd93a6.png" alt="在这里插入图片描述"></p>
<p>登录账号（从3.17版本开始默认密码不再是admin123，密码是随机生成。首次登录页面会显示admin用户的密码在&#x2F;nexus-data&#x2F;admin.password，因为我们在创建容器时做了目录映射，所以进入宿主机查看密码；管理员账号仍为 <em>admin</em>）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@nexus03 nexus]<span class="comment"># cat data/admin.password </span></span><br><span class="line">9e940511-2dd4-46cc-b272-7233c69fb60b</span><br></pre></td></tr></table></figure>

<p>输入上述密码后，如有需要重置密码为 <em>123456</em><br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/nexus3/74f4c44224964c6ea30c7914e7025ef3.png" alt="在这里插入图片描述"></p>
<p>此处选择可以在无需认证的情况下使用仓库服务（不包含管理功能）<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/nexus3/41c44f134a6d4ab49527a6196029eaaa.png" alt="在这里插入图片描述"></p>
<h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><h3 id="创建Blob-Stores仓库"><a href="#创建Blob-Stores仓库" class="headerlink" title="创建Blob Stores仓库"></a>创建Blob Stores仓库</h3><p>存储库列表及存储库的说明<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/nexus3/e387e4f607f540f490bd7353669d443f.png" alt="在这里插入图片描述"></p>
<p>创建新的存储库mytest<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/nexus3/eb3571a9d67348a4992f7fb80e86e177.png" alt="在这里插入图片描述"></p>
<ul>
<li>Type：Type的select选项框中有”File”和”S3”两个选项，这里选File就行。”S3”是亚马逊S3云存储，一般用不到</li>
<li>Name：自定义</li>
<li>Enable Soft Quota：限制目录的大小，如果要限制的话，就勾选上，并填上限制的条件和限制的值就OK了。</li>
<li>Path：在填入Name之后，path会自动生成</li>
</ul>
<p>新建存储库完成<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/nexus3/382a1592aed54f908800513e7f390053.png" alt="在这里插入图片描述"></p>
<h3 id="添加新的仓库"><a href="#添加新的仓库" class="headerlink" title="添加新的仓库"></a>添加新的仓库</h3><h4 id="创建仓库-1"><a href="#创建仓库-1" class="headerlink" title="创建仓库"></a>创建仓库</h4><p>工具栏配置按钮 &#x3D;&gt; Repository &#x3D;&gt; Repositories &#x3D;&gt; Create repository<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/nexus3/43be83b0c6704ae08b8da526938c1f93.png" alt="在这里插入图片描述"></p>
<p>选择format为maven2的仓库模板（proxy为代理仓；hosted为本地私仓；group为组合仓）<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/nexus3/3a1eb68801c84774a3c77c8c5434f247.png" alt="在这里插入图片描述"></p>
<h4 id="创建release发布库"><a href="#创建release发布库" class="headerlink" title="创建release发布库"></a>创建release发布库</h4><p>选择maven2（hosted）类型仓库模板进行创建<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/nexus3/909e2884ece44f6580daadd1fc02b08d.png" alt="在这里插入图片描述"></p>
<ul>
<li>Name：仓库名称</li>
<li>Online：勾选，可以设置这个仓库是在线还是离线。</li>
<li>Mavne 2<ul>
<li>Version Policy：版本策略，有三个选项<ul>
<li>Release：正式版本（选择）</li>
<li>Snapshot：快照版本</li>
<li>Mixed：混合模式</li>
</ul>
</li>
<li>Layout Policy：布局策略<ul>
<li>Strict：严格（选择默认）</li>
<li>Permissive：宽松</li>
</ul>
</li>
</ul>
</li>
<li>Storage：存储库（用于存储数据，例如：*.pom、*.jar、etc.）<ul>
<li>Blob store：选择此仓库使用的Blob存储，这里选择之前创建的 lk-maven。</li>
<li>Strict Content Type Validation：验证上传内容格式，这里不勾选。</li>
</ul>
</li>
<li>Hosted：<ul>
<li>Deployment Policy：部署策略，有三个选项：</li>
<li>Allow Redeploy：允许重新部署</li>
<li>Disable Redeploy：禁止重新部署（选择默认）</li>
<li>Read-Only：只读</li>
</ul>
</li>
</ul>
<h4 id="创建snapshot快照库"><a href="#创建snapshot快照库" class="headerlink" title="创建snapshot快照库"></a>创建snapshot快照库</h4><p>选择maven2（hosted）类型仓库模板进行创建<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/nexus3/52005769cfc74763a0a707ed3b3fb076.png" alt="在这里插入图片描述"></p>
<ul>
<li>Name：test-snapshots</li>
<li>Mavne 2<ul>
<li>Version Policy：版本策略，有三个选项<ul>
<li>Release：正式版本</li>
<li>Snapshot：快照版本（选择）</li>
<li>Mixed：混合模式</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="创建proxy类型代理仓库"><a href="#创建proxy类型代理仓库" class="headerlink" title="创建proxy类型代理仓库"></a>创建proxy类型代理仓库</h4><p>选择maven2（proxy）类型仓库模板进行创建<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/nexus3/41dd8206a94c4e63908e3b68282836c0.png" alt="在这里插入图片描述"><br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/nexus3/ca8662ef26734d3e95b3d0815a9c7b65.png" alt="在这里插入图片描述"></p>
<ul>
<li>Name：个人要代理阿里云的maven，自定义”test-proxy”</li>
<li>Online：勾选，设置成在线</li>
<li>Proxy：<ul>
<li>Remote storage：设置远程中央仓库的地址，这里设置成阿里云的maven仓库地址—<a href="http://maven.aliyun.com/nexus/content/groups/public%EF%BC%8C%E5%85%B6%E4%BB%96%E7%9A%84%E7%94%A8%E9%BB%98%E8%AE%A4%E5%80%BC%E5%8D%B3%E5%8F%AF%E3%80%82">http://maven.aliyun.com/nexus/content/groups/public，其他的用默认值即可。</a></li>
</ul>
</li>
<li>Storage：<ul>
<li>Blob store：选择 mytest</li>
<li>Strict Content Type Validation：不勾选</li>
</ul>
</li>
</ul>
<h4 id="创建group类型聚合仓库"><a href="#创建group类型聚合仓库" class="headerlink" title="创建group类型聚合仓库"></a>创建group类型聚合仓库</h4><p>选择maven2（gruop）类型仓库模板进行创建<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/nexus3/fb02861cf4f3429bb9f5dc7a1edce221.png" alt="在这里插入图片描述"></p>
<ul>
<li>Group：将左侧的Available中的仓库列表添加到右侧的Members中，顺序建议阿里云的代理仓库放第一，因为maven代理仓库下载顺序是从上往下的，建议将速度快的仓库放在最前面。</li>
</ul>
<h2 id="使用仓库"><a href="#使用仓库" class="headerlink" title="使用仓库"></a>使用仓库</h2><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><ul>
<li>Maven的settings.xml配置（本地仓库地址；账号密码；镜像仓库地址）<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="operator">&lt;</span><span class="operator">!</span><span class="operator">-</span><span class="operator">-</span> 自定义仓库路径 <span class="operator">-</span><span class="operator">-&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>localRepository<span class="operator">&gt;</span>D<span class="operator">:</span><span class="operator">/</span>repos<span class="operator">/</span>.m2<span class="operator">/</span>repository<span class="operator">&lt;</span><span class="operator">/</span>localRepository<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">!</span><span class="operator">-</span><span class="operator">-</span> 私仓的登录凭证 <span class="operator">-</span><span class="operator">-&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>server<span class="operator">&gt;</span></span><br><span class="line">      <span class="operator">&lt;</span>id<span class="operator">&gt;</span>zangh<span class="operator">&lt;</span><span class="operator">/</span>id<span class="operator">&gt;</span></span><br><span class="line">      <span class="operator">&lt;</span>username<span class="operator">&gt;</span>admin<span class="operator">&lt;</span><span class="operator">/</span>username<span class="operator">&gt;</span></span><br><span class="line">      <span class="operator">&lt;</span>password<span class="operator">&gt;</span><span class="number">123456</span><span class="operator">&lt;</span><span class="operator">/</span>password<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>server<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">!</span><span class="operator">-</span><span class="operator">-</span> Mirrors镜像地址<span class="punctuation">(</span>也可在项目的pom.xml中单独指定<span class="punctuation">)</span> <span class="operator">-</span><span class="operator">-&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>mirror<span class="operator">&gt;</span></span><br><span class="line">      <span class="operator">&lt;</span>id<span class="operator">&gt;</span>zangh<span class="operator">&lt;</span><span class="operator">/</span>id<span class="operator">&gt;</span></span><br><span class="line">      <span class="operator">&lt;</span>mirrorOf<span class="operator">&gt;</span><span class="operator">*</span><span class="operator">&lt;</span><span class="operator">/</span>mirrorOf<span class="operator">&gt;</span></span><br><span class="line">      <span class="operator">&lt;</span>url<span class="operator">&gt;</span>http<span class="operator">:</span><span class="operator">/</span><span class="operator">/</span><span class="number">172.16</span>.5.102<span class="operator">:</span><span class="number">8081</span><span class="operator">/</span>repository<span class="operator">/</span>maven<span class="operator">-</span>public<span class="operator">/</span><span class="operator">&lt;</span><span class="operator">/</span>url<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>mirror<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="上传jar包"><a href="#上传jar包" class="headerlink" title="上传jar包"></a>上传jar包</h3><h4 id="脚本上传"><a href="#脚本上传" class="headerlink" title="脚本上传"></a>脚本上传</h4><p>通过修改脚本中变量实现在Unix-Like系统中上传jar包（内部通过api方式）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line">jarFile=<span class="string">&quot;test.jar&quot;</span></span><br><span class="line">groupId=<span class="string">&quot;com.wywtime&quot;</span></span><br><span class="line">artifactId=<span class="string">&quot;test&quot;</span></span><br><span class="line">version=<span class="string">&quot;1.0.0&quot;</span></span><br><span class="line"><span class="comment"># 私有仓库地址</span></span><br><span class="line">mvn_repository=<span class="string">&quot;http://localhost:12345/repository/lib&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 将点转化为斜杠</span></span><br><span class="line">path=`<span class="built_in">echo</span> <span class="variable">$&#123;groupId&#125;</span> | sed  <span class="string">&quot;s/\./\//g&quot;</span>`</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 动态生成pom文件</span></span><br><span class="line"><span class="built_in">cat</span> &gt; <span class="variable">$&#123;artifactId&#125;</span>-<span class="variable">$&#123;version&#125;</span>.pom &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="string">&lt;project xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot; xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="line"><span class="string">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;</span></span><br><span class="line"><span class="string">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span></span><br><span class="line"><span class="string">  &lt;groupId&gt;$&#123;groupId&#125;&lt;/groupId&gt;</span></span><br><span class="line"><span class="string">  &lt;artifactId&gt;$&#123;artifactId&#125;&lt;/artifactId&gt;</span></span><br><span class="line"><span class="string">  &lt;version&gt;$&#123;version&#125;&lt;/version&gt;</span></span><br><span class="line"><span class="string">&lt;/project&gt;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 上传jar文件</span></span><br><span class="line">curl -u <span class="string">&quot;admin:admin&quot;</span> -X PUT -v -T <span class="variable">$&#123;jarFile&#125;</span> <span class="variable">$&#123;mvn_repository&#125;</span>/<span class="variable">$&#123;path&#125;</span>/<span class="variable">$&#123;artifactId&#125;</span>/<span class="variable">$&#123;version&#125;</span>/<span class="variable">$&#123;artifactId&#125;</span>-<span class="variable">$&#123;version&#125;</span>.jar</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 上传pom文件</span></span><br><span class="line">curl -u <span class="string">&quot;admin:admin&quot;</span> -X PUT -v -T <span class="variable">$&#123;artifactId&#125;</span>-<span class="variable">$&#123;version&#125;</span>.pom <span class="variable">$&#123;mvn_repository&#125;</span>/<span class="variable">$&#123;path&#125;</span>/<span class="variable">$&#123;artifactId&#125;</span>/<span class="variable">$&#123;version&#125;</span>/<span class="variable">$&#123;artifactId&#125;</span>-<span class="variable">$&#123;version&#125;</span>.pom</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 删除动态生成的pom</span></span><br><span class="line"><span class="built_in">rm</span> -rf <span class="variable">$&#123;artifactId&#125;</span>-<span class="variable">$&#123;version&#125;</span>.pom</span><br></pre></td></tr></table></figure>

<h4 id="命令上传"><a href="#命令上传" class="headerlink" title="命令上传"></a>命令上传</h4><p>nexus控制台上传jar包<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/nexus3/88c62606edf040609bf4c013a1d33362.png" alt="在这里插入图片描述"></p>
<p><strong>发布到本地仓库</strong>：deploy:deploy-file上传打包好的jar包或第三方jar包</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="operator">@</span>TITLE 上传第三方JAR包 by zangh</span><br><span class="line"></span><br><span class="line"><span class="built_in">call</span> mvn <span class="operator">-</span>s D<span class="operator">:</span><span class="punctuation">\</span>apache<span class="operator">-</span>maven<span class="operator">-</span><span class="number">3.8</span>.3<span class="punctuation">\</span>conf<span class="punctuation">\</span>settings.xml install<span class="operator">:</span>install<span class="operator">-</span>file<span class="operator">^</span></span><br><span class="line"> <span class="operator">-</span>DmavenTestSkip<span class="operator">=</span>true<span class="operator">^</span></span><br><span class="line"> <span class="operator">-</span>DgroupId<span class="operator">=</span>spire.doc.free<span class="operator">^</span></span><br><span class="line"> <span class="operator">-</span>DartifactId<span class="operator">=</span>e<span class="operator">-</span>iceblue<span class="operator">^</span></span><br><span class="line"> <span class="operator">-</span>Dversion<span class="operator">=</span><span class="number">5.2</span>.1<span class="operator">^</span></span><br><span class="line"> <span class="operator">-</span>Dpackaging<span class="operator">=</span>jar<span class="operator">^</span></span><br><span class="line"> <span class="operator">-</span>DgeneratePom<span class="operator">=</span>true<span class="operator">^</span></span><br><span class="line"> <span class="operator">-</span>DrepositoryId<span class="operator">=</span>zangh<span class="operator">^</span></span><br><span class="line"> <span class="operator">-</span>Dfile<span class="operator">=</span>D<span class="operator">:</span><span class="punctuation">\</span>repos<span class="punctuation">\</span>.m2<span class="punctuation">\</span>repository<span class="punctuation">\</span>e<span class="operator">-</span>iceblue<span class="punctuation">\</span>spire.doc.free<span class="punctuation">\</span><span class="number">5.2</span>.0<span class="punctuation">\</span>spire.doc.free<span class="operator">-</span><span class="number">5.2</span>.0.jar<span class="operator">^</span></span><br><span class="line"></span><br><span class="line"><span class="operator">@</span>pause</span><br></pre></td></tr></table></figure>

<p><strong>发布到私服仓库</strong>：deploy:deploy-file上传打包好的jar包或第三方jar包</p>
<ul>
<li>install:install-file &#x3D;&#x3D;&gt; 只会打包上传到本地仓库，不会上传到私仓</li>
<li>在wins中变量后面的字符串如有特殊字符，需用双引号括起来</li>
<li>-DrepositoryId 对应到 settings.xml 中的 server 标签的账号密码 id</li>
<li>-Durl 指定发布到正式&#x2F;快照私仓（快照 -Dversion 需以-SNAPSHOT结尾）</li>
<li>-DmavenTestSkip&#x3D;true 不执行测试用例，也不编译测试用例类</li>
<li>-DskipTests，不执行测试用例，但编译测试用例类生成相应的class文件至target&#x2F;test-classes下<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="operator">@</span>TITLE 上传第三方JAR包 by zangh</span><br><span class="line"></span><br><span class="line"><span class="built_in">call</span> mvn <span class="operator">-</span>s D<span class="operator">:</span><span class="punctuation">\</span>apache<span class="operator">-</span>maven<span class="operator">-</span><span class="number">3.8</span>.3<span class="punctuation">\</span>conf<span class="punctuation">\</span>settings.xml deploy<span class="operator">:</span>deploy<span class="operator">-</span>file<span class="operator">^</span></span><br><span class="line"> <span class="operator">-</span>DmavenTestSkip<span class="operator">=</span>true<span class="operator">^</span></span><br><span class="line"> <span class="operator">-</span>DgroupId<span class="operator">=</span>spire.doc.free<span class="operator">^</span></span><br><span class="line"> <span class="operator">-</span>DartifactId<span class="operator">=</span>e<span class="operator">-</span>iceblue<span class="operator">^</span></span><br><span class="line"> <span class="operator">-</span>Dversion<span class="operator">=</span><span class="number">5.2</span>.1<span class="operator">^</span></span><br><span class="line"> <span class="operator">-</span>Dpackaging<span class="operator">=</span>jar<span class="operator">^</span></span><br><span class="line"> <span class="operator">-</span>DgeneratePom<span class="operator">=</span>true<span class="operator">^</span></span><br><span class="line"> <span class="operator">-</span>DrepositoryId<span class="operator">=</span>zangh<span class="operator">^</span></span><br><span class="line"> <span class="operator">-</span>Dfile<span class="operator">=</span>D<span class="operator">:</span><span class="punctuation">\</span>repos<span class="punctuation">\</span>.m2<span class="punctuation">\</span>repository<span class="punctuation">\</span>e<span class="operator">-</span>iceblue<span class="punctuation">\</span>spire.doc.free<span class="punctuation">\</span><span class="number">5.2</span>.0<span class="punctuation">\</span>spire.doc.free<span class="operator">-</span><span class="number">5.2</span>.0.jar<span class="operator">^</span></span><br><span class="line"> <span class="operator">-</span>Durl<span class="operator">=</span>http<span class="operator">:</span><span class="operator">/</span><span class="operator">/</span><span class="number">172.16</span>.5.102<span class="operator">:</span><span class="number">8081</span><span class="operator">/</span>repository<span class="operator">/</span>test<span class="operator">-</span>releases</span><br><span class="line"></span><br><span class="line"><span class="operator">@</span>pause</span><br></pre></td></tr></table></figure></li>
</ul>
<p>上传后的结果（releases相同版本jar不能重复上传，snapshots可以重复上传）<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/nexus3/9bbaa43b03cf465da792c513d27a96a2.png" alt="在这里插入图片描述"></p>
<p>项目的pom.xml中添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>zangh<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>zangh&#x27;s primary repos<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.e-iceblue.cn/repository/test-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- nexus私仓：http://172.16.5.102:8081/repository/test-public/ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>spire.doc.free<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>e-iceblue<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="http://t.zoukankan.com/hanby-p-14150348.html">Centos7下Nexus3的安装和配置</a><br><a href="http://www.manongjc.com/detail/51-zxbtpqwrrczwqjj.html">本地私服仓库nexus3.3.1使用手册</a><br><a href="http://t.zoukankan.com/geass-jango-p-11881902.html">MVN package、install、deploy区别</a><br><a href="https://www.codenong.com/cs109460658/">Maven私仓 — Nexus搭建与使用</a></p>]]></content>
      <categories>
        <category>CI/CD</category>
        <category>仓库</category>
        <category>Nexus3</category>
      </categories>
      <tags>
        <tag>容器</tag>
        <tag>Nexus3</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql原理介绍、备忘录等</title>
    <url>/2023/05/28/mysql-notes/</url>
    <content><![CDATA[<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="账号密码登录"><a href="#账号密码登录" class="headerlink" title="账号密码登录"></a>账号密码登录</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msyql -u root(账号) -p <span class="built_in">test</span>(数据库名)</span><br><span class="line"><span class="comment"># Enter password: 输入密码</span></span><br></pre></td></tr></table></figure>

<h4 id="通过sql导入数据"><a href="#通过sql导入数据" class="headerlink" title="通过sql导入数据"></a>通过sql导入数据</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 登录账号后</span></span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br><span class="line"><span class="comment"># 切换到指定的数据库，例：test库</span></span><br><span class="line">mysql&gt; use <span class="built_in">test</span>;</span><br><span class="line">Database changed</span><br><span class="line"><span class="comment"># 然后使用source命令，后面参数为脚本文件(如这里用到的.sql)，注：不需要分号</span></span><br><span class="line">mysql&gt; <span class="built_in">source</span> /opt/sql/gx_statics.sql</span><br></pre></td></tr></table></figure>

<h4 id="导入数据库"><a href="#导入数据库" class="headerlink" title="导入数据库"></a>导入数据库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 登录账号后</span></span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">mysql&gt; create database <span class="built_in">test</span>;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"><span class="comment"># 切换到指定的数据库</span></span><br><span class="line">mysql&gt; use <span class="built_in">test</span>;</span><br><span class="line">Database changed</span><br><span class="line"><span class="comment"># 查看当前所在数据库</span></span><br><span class="line">mysql&gt; select database();</span><br><span class="line">+------------+</span><br><span class="line">| database() |</span><br><span class="line">+------------+</span><br><span class="line">| <span class="built_in">test</span>       |</span><br><span class="line">+------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"><span class="comment"># 导入预先整理好的sql（例：/opt/gxsz_tables.sql）</span></span><br><span class="line">mysql&gt; <span class="built_in">source</span> /opt/gxsz_tables.sql</span><br></pre></td></tr></table></figure>

<h4 id="导出数据库"><a href="#导出数据库" class="headerlink" title="导出数据库"></a>导出数据库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mysqldump与mysql同级的命令，需要退出mysql命令行后执行</span></span><br><span class="line"><span class="comment"># mysqldump -u 用户名 -p [--databases] 数据库名 &gt; 导出的文件名</span></span><br><span class="line">mysqldump -u root -p <span class="built_in">test</span> &gt; test.sql</span><br><span class="line"><span class="comment"># Enter password: 输入密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mysqldump -u 用户名 -p [--databases] 数据库名 表名&gt; 导出的文件名</span></span><br><span class="line">mysqldump -u root -p <span class="built_in">test</span> sz_city &gt; sz_city.sql</span><br><span class="line"><span class="comment"># Enter password: 输入密码</span></span><br></pre></td></tr></table></figure>

<h4 id="创建用户并授权"><a href="#创建用户并授权" class="headerlink" title="创建用户并授权"></a>创建用户并授权</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建用户</span></span><br><span class="line">mysql&gt; create user <span class="string">&#x27;&#123;username&#125;&#x27;</span>@<span class="string">&#x27;&#123;host&#125;&#x27;</span> identified by <span class="string">&#x27;&#123;password&#125;&#x27;</span>;</span><br><span class="line">Query OK, 0 rows affected (0.05 sec)</span><br><span class="line"><span class="comment">## 参数</span></span><br><span class="line">username：你将创建的用户名</span><br><span class="line">host：    指定该用户在哪个主机上可以登陆，如果是本地用户可用localhost，如果想让该用户可以从任意远程主机登陆，可以使用通配符%</span><br><span class="line">password：该用户的登陆密码，密码可以为空，如果为空则该用户可以不需要密码登陆服务器</span><br><span class="line"><span class="comment"># create user &#x27;dog&#x27;@&#x27;localhost&#x27; identified by  &#x27;123456&#x27;;</span></span><br><span class="line"><span class="comment"># create user &#x27;pig&#x27;@&#x27;192.168.1.101_&#x27; identified by  &#x27;123456&#x27;;</span></span><br><span class="line"><span class="comment"># create user &#x27;pig&#x27;@&#x27;%&#x27; identified by  &#x27;123456&#x27;;</span></span><br><span class="line"><span class="comment"># create user &#x27;pig&#x27;@&#x27;%&#x27; identified by  &#x27;&#x27;;</span></span><br><span class="line"><span class="comment"># create user &#x27;pig&#x27;@&#x27;%&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户授权</span></span><br><span class="line">mysql&gt; grant &#123;privileges&#125; on &#123;databasename&#125;.&#123;tablename&#125; to <span class="string">&#x27;&#123;username&#125;&#x27;</span>@<span class="string">&#x27;&#123;host&#125;&#x27;</span>;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"><span class="comment">## 参数</span></span><br><span class="line">privileges：  用户的操作权限，如SELECT，INSERT，UPDATE等，如果要授予所的权限则使用ALL</span><br><span class="line">databasename：数据库名</span><br><span class="line">tablename：   表名，如果要授予该用户对所有数据库和表的相应操作权限则可用*表示，如*.*</span><br><span class="line"><span class="comment"># grant select,insert on test.sz_log to &#x27;test&#x27;@&#x27;%&#x27;;</span></span><br><span class="line"><span class="comment"># grant all on *.* to &#x27;test&#x27;@&#x27;%&#x27;;</span></span><br><span class="line"><span class="comment"># grant all on test.* to &#x27;test&#x27;@&#x27;%&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 刷新权限</span></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置与更改用户密码</span></span><br><span class="line">mysql&gt; <span class="built_in">set</span> password <span class="keyword">for</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;%&#x27;</span> = <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>

<h4 id="查看用户及权限"><a href="#查看用户及权限" class="headerlink" title="查看用户及权限"></a>查看用户及权限</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># \g 相当于’;’</span></span><br><span class="line"><span class="comment"># \G使每个字段打印到单独的行，也有’;&#x27;的作用</span></span><br><span class="line">mysql&gt; SELECT user,host FROM mysql.user;</span><br><span class="line">+---------------+-----------+</span><br><span class="line">| user          | host      |</span><br><span class="line">+---------------+-----------+</span><br><span class="line">| gxejy         | %         |</span><br><span class="line">| mysql.session | localhost |</span><br><span class="line">| mysql.sys     | localhost |</span><br><span class="line">| root          | localhost |</span><br><span class="line">+---------------+-----------+</span><br><span class="line"><span class="comment"># 查看单个用户</span></span><br><span class="line">mysql&gt; SELECT user,host FROM mysql.user <span class="built_in">where</span> user = <span class="string">&#x27;gxejy&#x27;</span>;</span><br><span class="line">+-------+------+</span><br><span class="line">| user  | host |</span><br><span class="line">+-------+------+</span><br><span class="line">| gxejy | %    |</span><br><span class="line">+-------+------+</span><br><span class="line">mysql&gt; select * from mysql.user <span class="built_in">where</span> user = <span class="string">&#x27;root&#x27;</span>\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">                    Host: %</span><br><span class="line">                    User: root</span><br><span class="line">             Select_priv: Y</span><br><span class="line">             Insert_priv: Y</span><br><span class="line">             Update_priv: Y</span><br><span class="line">             Delete_priv: Y</span><br><span class="line">             Create_priv: Y</span><br><span class="line">               Drop_priv: Y</span><br><span class="line">             Reload_priv: Y</span><br><span class="line">           Shutdown_priv: Y</span><br><span class="line">            Process_priv: Y</span><br><span class="line">               File_priv: Y</span><br><span class="line">              Grant_priv: Y</span><br><span class="line">         References_priv: Y</span><br><span class="line">              Index_priv: Y</span><br><span class="line">              Alter_priv: Y</span><br><span class="line">            Show_db_priv: Y</span><br><span class="line">              Super_priv: Y</span><br><span class="line">   Create_tmp_table_priv: Y</span><br><span class="line">        Lock_tables_priv: Y</span><br><span class="line">            Execute_priv: Y</span><br><span class="line">         Repl_slave_priv: Y</span><br><span class="line">        Repl_client_priv: Y</span><br><span class="line">        Create_view_priv: Y</span><br><span class="line">          Show_view_priv: Y</span><br><span class="line">     Create_routine_priv: Y</span><br><span class="line">      Alter_routine_priv: Y</span><br><span class="line">        Create_user_priv: Y</span><br><span class="line">              Event_priv: Y</span><br><span class="line">            Trigger_priv: Y</span><br><span class="line">  Create_tablespace_priv: Y</span><br><span class="line">                ssl_type: </span><br><span class="line">              ssl_cipher: 0x</span><br><span class="line">             x509_issuer: 0x</span><br><span class="line">            x509_subject: 0x</span><br><span class="line">           max_questions: 0</span><br><span class="line">             max_updates: 0</span><br><span class="line">         max_connections: 0</span><br><span class="line">    max_user_connections: 0</span><br><span class="line">                  plugin: caching_sha2_password</span><br><span class="line">   authentication_string: $A$005<span class="variable">$6ga</span>&#123;OR	mup26 </span><br><span class="line">                                             EKeIYo7Rf3zPsGxrJbUYd2RlK4T9xxidYA1P2civHVp7A</span><br><span class="line">        password_expired: N</span><br><span class="line">   password_last_changed: 2021-12-02 03:16:38</span><br><span class="line">       password_lifetime: NULL</span><br><span class="line">          account_locked: N</span><br><span class="line">        Create_role_priv: Y</span><br><span class="line">          Drop_role_priv: Y</span><br><span class="line">  Password_reuse_history: NULL</span><br><span class="line">     Password_reuse_time: NULL</span><br><span class="line">Password_require_current: NULL</span><br><span class="line">         User_attributes: NULL</span><br></pre></td></tr></table></figure>

<h3 id="跨库事务"><a href="#跨库事务" class="headerlink" title="跨库事务"></a>跨库事务</h3><h4 id="同一个mysql实例，A库和B库在同一个事务中"><a href="#同一个mysql实例，A库和B库在同一个事务中" class="headerlink" title="同一个mysql实例，A库和B库在同一个事务中"></a>同一个mysql实例，A库和B库在同一个事务中</h4><ol>
<li><p>首先要确保mysql开启XA事务支持</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SHOW VARIABLES LIKE ‘%XA%’;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果innodb_support_xa的值是ON就说明mysql已经开启对XA事务的支持了，<br>如果不是就执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SET innodb_support_xa = ON;</span><br></pre></td></tr></table></figure>
</li>
<li><p>XA（在shardingjdbc叫柔性事务）的性能很低。一个数据库的事务和多个数据库间的XA事务性能对比可发现，性能差10倍左右。</p>
</li>
<li><p>分布式事务原理：分段式提交<br>分布式事务通常采用2PC协议，全称Two Phase Commitment Protocol。该协议主要为了解决在分布式数据库场景下，所有节点间数据一致性的问题。</p>
</li>
</ol>
<p>分布式事务通过2PC协议将提交分成两个阶段：<br>prepare；commit&#x2F;rollback<br>阶段一为准备（prepare）阶段。即所有的参与者准备执行事务并锁住需要的资源。参与者ready时，向transaction manager报告已准备就绪。</p>
<p>阶段二为提交阶段（commit）。当transaction manager确认所有参与者都ready后，向所有参与者发送commit命令。<br>如下图所示：<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/mysql/1566dae82f734cb78975210193c8c1f5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Ien6aaG6ZW_,size_20,color_FFFFFF,t_70,g_se,x_16" alt="2pc原理图"></p>
<h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><h4 id="Explain执行计划分析器"><a href="#Explain执行计划分析器" class="headerlink" title="Explain执行计划分析器"></a>Explain执行计划分析器</h4><h5 id="Explain语法"><a href="#Explain语法" class="headerlink" title="Explain语法"></a>Explain语法</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">sql</span> statement;</span><br></pre></td></tr></table></figure>

<h5 id="Explain解释"><a href="#Explain解释" class="headerlink" title="Explain解释"></a>Explain解释</h5><ul>
<li><p>id：优化器选定的执行计划中查询的序列号。</p>
</li>
<li><p>select_type：所用的查询类型，主要由以下这集中查询类型。</p>
<ul>
<li>DEPENDENT UNION：子查询中的UNION，且为UNION中从第二个SELECT开始的后面所有SELECT，同样依赖于外部查询的结果集。</li>
<li>SIMPLE：除子查询或UNION之外的其他查询。<blockquote>
<p>EXPLAIN<br>SELECT * FROM admin_user WHERE user_id &#x3D; 1\G;</p>
</blockquote>
</li>
<li>PRIMARY：子查询中最外层查询，注意并不是主键查询。</li>
<li>SUBQUERY：子查询内层查询的第一个SELECT，结果不依赖与外部查询结果集。<blockquote>
<p>EXPLAIN<br>SELECT * FROM role WHERE id &#x3D; (SELECT role_id FROM admin_user WHERE user_id &#x3D; 1)\G;</p>
</blockquote>
</li>
<li>UNCACHEABLE SUBQUERY：结果集无法缓存的子查询</li>
<li>UNION：UNION 语句中第二个SELECT开始后面的所有SELECT,第一个SELECT为PRIMARY。</li>
<li>UNION RESULT：UNION 中的合并结果。</li>
</ul>
</li>
<li><p>table：显示这一步所访问的数据库中的表的名称。</p>
</li>
<li><p>type：告诉我们对标使用的访问方式，主要包含如下几种类型。</p>
<ul>
<li>all：全表扫描。</li>
<li>const: 读常量，最多只会有一条记录匹配，由于是常量，实际上只需要读一次。</li>
<li>eq_ref：最多只会有一条匹配结果，一般是通过主键或唯一键索引来访问</li>
<li>fulltext：进行全文索引检索</li>
<li>index：全索引扫描</li>
<li>index_merge：查询中同时使用两个（或更多）索引，然后对索引结果进行和并，在读取表数据。</li>
<li>index_subquery：子查询中的返回结果字段组合是一个索引（或索引组合），但不是一个主键或唯一索引。</li>
<li>rang：索引范围扫描。</li>
<li>ref：join语句中被驱动表索引引用的查询。</li>
<li>ref_or_null：与ref的唯一区别就是使用索引引用的查询之外再增加一个空值的查询。</li>
<li>system：系统表，表中只有一行数据：</li>
<li>unique_subquery：子查询中的返回结果字段组合式主键或唯一约束。</li>
</ul>
</li>
<li><p>possible_keys：该查询可以利用的索引。如果没有任何索引可以使用，就会显示程null，这项内容对优化索引时的调整非常重要。</p>
</li>
<li><p>key：优化器从possible_keys中选择使用的索引。</p>
</li>
<li><p>key_len：被选中使用索引的索引建长度。</p>
</li>
<li><p>ref：列出是通过常量，还是某个字段的某个字段来过滤的</p>
</li>
<li><p>rows：优化其通过系统手机的统计信息估算出来的结果集记录条数</p>
</li>
<li><p>extra：查询中每一步实现的额外细节信息。</p>
<ul>
<li>using index: 出现这个说明mysql使用了覆盖索引，避免访问了表的数据行，效率不错。</li>
<li>using where：这说明服务器在存储引擎收到行后讲进行过滤。</li>
<li>using temporary：这意味着mysql对查询结果进行排序的时候使用了一张临时表</li>
<li>using filesort：这个说明mysql会对数据使用一个外部的索引排序<blockquote>
<p>注意当出现using temporary 和 using filesort时候说明需要优化操作</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h5 id="Explain指标"><a href="#Explain指标" class="headerlink" title="Explain指标"></a>Explain指标</h5><p>优化优先级顺序：从左到右</p>
<ul>
<li>system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; all</li>
</ul>
<h3 id="定时备份"><a href="#定时备份" class="headerlink" title="定时备份"></a>定时备份</h3><p>作为生产环境下的库，为了尽量避免误操作产生的损失，需要定期对库表进行备份。此处主要介绍：</p>
<ul>
<li>通过mysqldump工具进行备份的方法（mysql以 <a href="https://foreverzang.github.io/2023/05/28/mysql-docker/">docker方式部署</a>，其它方式雷同）</li>
</ul>
<h4 id="备份方式"><a href="#备份方式" class="headerlink" title="备份方式"></a>备份方式</h4><h5 id="mysqldump简介"><a href="#mysqldump简介" class="headerlink" title="mysqldump简介"></a>mysqldump简介</h5><p>mysqldump是MySQL自带的逻辑备份工具。它的备份原理是通过协议连接到 MySQL数据库，将需要备份的数据查询出来，将查询出的数据转换成对应的insert语句，当我们需要还原这些数据时，只要执行这些insert语句，即可将对应的数据还原。</p>
<h5 id="mysqldump命令"><a href="#mysqldump命令" class="headerlink" title="mysqldump命令"></a>mysqldump命令</h5><ol>
<li>mysqldump [选项] 数据库名 [表名] &gt; 脚本名</li>
<li>mysqldump [选项] –数据库名 [选项 表名] &gt; 脚本名</li>
<li>mysqldump [选项] –all-databases [选项] &gt; 脚本名</li>
</ol>
<h5 id="备份脚本"><a href="#备份脚本" class="headerlink" title="备份脚本"></a>备份脚本</h5><p>脚本位置：*&#x2F;opt&#x2F;mysql&#x2F;databak.sh*</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">name=mysql-8.0.27</span><br><span class="line">db=douke_test</span><br><span class="line">dir=/opt/mysql/datadir</span><br><span class="line"></span><br><span class="line">echo &quot;$(date &#x27;+%Y-%m-%d %H:%M:%S&#x27;) backup $db data to file $dir/$&#123;db&#125;.sql.$(date +%Y%m%d) starting ... &quot;</span><br><span class="line">docker exec $name bash -c &quot;mysqldump --databases $db &gt; /var/lib/mysql/$&#123;db&#125;.sql.$(date +%Y%m%d)&quot;</span><br><span class="line">echo &quot;$(date &#x27;+%Y-%m-%d %H:%M:%S&#x27;) backup $db data to file $dir/$&#123;db&#125;.sql.$(date +%Y%m%d) finished !~~ &quot;</span><br></pre></td></tr></table></figure>

<h4 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h4><p>安装目录：*&#x2F;opt&#x2F;mysql&#x2F;*</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@mysql mysql]# crontab -l</span><br><span class="line">30 05 * * * /usr/bin/sh /opt/mysql/databak.sh &gt;&gt; /opt/mysql/logs/databak.log 2&gt;&amp;1</span><br><span class="line">[root@mysql mysql]# tail -10f /var/log/cron</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定时任务执行日志记录</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>中间件</category>
        <category>存储</category>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>NFS 网络文件系统</title>
    <url>/2023/05/27/nfs-setup/</url>
    <content><![CDATA[<h3 id="安装服务"><a href="#安装服务" class="headerlink" title="安装服务"></a>安装服务</h3><h4 id="服务简介"><a href="#服务简介" class="headerlink" title="服务简介"></a>服务简介</h4><blockquote>
<ol>
<li>nfs依赖rpc服务，nfs（Network FileSystem）可以认为作为rpc服务之一。</li>
<li>rpc服务端口为111</li>
</ol>
</blockquote>
<span id="more"></span>

<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><h4 id="服务端安装"><a href="#服务端安装" class="headerlink" title="服务端安装"></a>服务端安装</h4><h5 id="安装rpcbind服务"><a href="#安装rpcbind服务" class="headerlink" title="安装rpcbind服务"></a>安装rpcbind服务</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@nfs01 ~]<span class="comment"># yum install -y rpcbind</span></span><br><span class="line">[root@nfs01 ~]<span class="comment"># systemctl enable rpcbind &amp;&amp; systemctl start rpcbind</span></span><br><span class="line">[root@nfs01 ~]<span class="comment"># systemctl status rpcbind</span></span><br><span class="line">● rpcbind.service - RPC <span class="built_in">bind</span> service</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/rpcbind.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since 四 2022-10-20 17:45:11 CST; 10s ago</span><br><span class="line">  Process: 1369 ExecStart=/sbin/rpcbind -w <span class="variable">$RPCBIND_ARGS</span> (code=exited, status=0/SUCCESS)</span><br><span class="line"> Main PID: 1370 (rpcbind)</span><br><span class="line">   CGroup: /system.slice/rpcbind.service</span><br><span class="line">           └─1370 /sbin/rpcbind -w</span><br></pre></td></tr></table></figure>

<h5 id="安装nfs服务"><a href="#安装nfs服务" class="headerlink" title="安装nfs服务"></a>安装nfs服务</h5><p>1）安装nfs服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@nfs01 ~]<span class="comment"># yum install -y nfs-utils</span></span><br><span class="line">[root@nfs01 ~]<span class="comment"># systemctl enable nfs &amp;&amp; systemctl start nfs</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/nfs-server.service to /usr/lib/systemd/system/nfs-server.service.</span><br><span class="line">[root@nfs01 ~]<span class="comment"># systemctl status nfs</span></span><br><span class="line">● nfs-server.service - NFS server and services</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/nfs-server.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (exited) since 四 2022-10-20 17:47:23 CST; 9s ago</span><br><span class="line">  Process: 1593 ExecStartPost=/bin/sh -c <span class="keyword">if</span> systemctl -q is-active gssproxy; <span class="keyword">then</span> systemctl reload gssproxy ; <span class="keyword">fi</span> (code=exited, status=0/SUCCESS)</span><br><span class="line">  Process: 1576 ExecStart=/usr/sbin/rpc.nfsd <span class="variable">$RPCNFSDARGS</span> (code=exited, status=0/SUCCESS)</span><br><span class="line">  Process: 1575 ExecStartPre=/usr/sbin/exportfs -r (code=exited, status=0/SUCCESS)</span><br><span class="line"> Main PID: 1576 (code=exited, status=0/SUCCESS)</span><br><span class="line">   CGroup: /system.slice/nfs-server.service</span><br></pre></td></tr></table></figure>

<p>2）检查nfs服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@nfs01 ~]<span class="comment"># showmount -e localhost</span></span><br><span class="line">Export list <span class="keyword">for</span> localhost:</span><br><span class="line">/usr/local/src *</span><br><span class="line">……</span><br><span class="line">选项与参数：</span><br><span class="line">-a ：全部挂载(或卸除) /etc/exports 档案内的设定</span><br><span class="line">-r ：重新挂载 /etc/exports 里面的设定，此外，亦同步更新 /etc/exports</span><br><span class="line">及 /var/lib/nfs/xtab 的内容！</span><br><span class="line">-u ：卸除某一目录</span><br><span class="line">-v ：在 <span class="built_in">export</span> 的时候，将分享的目录显示到屏幕上！</span><br><span class="line">……</span><br><span class="line">[root@nfs01 ~]<span class="comment"># netstat -tunpl | grep -E &#x27;(nfs|rpc)&#x27;</span></span><br><span class="line">tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN      1370/rpcbind        </span><br><span class="line">tcp        0      0 0.0.0.0:20048           0.0.0.0:*               LISTEN      1642/rpc.mountd     </span><br><span class="line">tcp        0      0 0.0.0.0:58907           0.0.0.0:*               LISTEN      1560/rpc.statd      </span><br><span class="line">tcp6       0      0 :::41635                :::*                    LISTEN      1560/rpc.statd      </span><br><span class="line">tcp6       0      0 :::111                  :::*                    LISTEN      1370/rpcbind        </span><br><span class="line">tcp6       0      0 :::20048                :::*                    LISTEN      1642/rpc.mountd     </span><br><span class="line">udp        0      0 127.0.0.1:888           0.0.0.0:*                           1560/rpc.statd      </span><br><span class="line">udp        0      0 0.0.0.0:20048           0.0.0.0:*                           1642/rpc.mountd     </span><br><span class="line">udp        0      0 0.0.0.0:111             0.0.0.0:*                           1370/rpcbind        </span><br><span class="line">udp        0      0 0.0.0.0:50304           0.0.0.0:*                           1560/rpc.statd      </span><br><span class="line">udp        0      0 0.0.0.0:697             0.0.0.0:*                           1370/rpcbind        </span><br><span class="line">udp6       0      0 :::53100                :::*                                1560/rpc.statd      </span><br><span class="line">udp6       0      0 :::20048                :::*                                1642/rpc.mountd     </span><br><span class="line">udp6       0      0 :::111                  :::*                                1370/rpcbind        </span><br><span class="line">udp6       0      0 :::697                  :::*                                1370/rpcbind</span><br></pre></td></tr></table></figure>

<p>3）重新加载 <font color=#00f>&#x2F;etc&#x2F;exports</font> 文件，使用 <font color=#00f>exportfs -arv</font> 命令更新</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@nfs01 ~]<span class="comment"># vi /etc/exports</span></span><br><span class="line">……</span><br><span class="line"><span class="comment">#[分享目录] [第一部主机(权限)] [可用主机名] [可用通配符]</span></span><br><span class="line">/usr/local/src/share *(rw,no_root_squash)</span><br><span class="line">……</span><br><span class="line">[root@nfs01 ~]<span class="comment"># exportfs -arv</span></span><br><span class="line">exporting *:/usr/local/src</span><br></pre></td></tr></table></figure>

<p>4）关闭防火墙</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@nfs01 ~]<span class="comment"># systemctl stop firewalld</span></span><br></pre></td></tr></table></figure>

<h4 id="客户端安装"><a href="#客户端安装" class="headerlink" title="客户端安装"></a>客户端安装</h4><p>1）安装rpcbind服务并启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible nfs]<span class="comment"># yum install -y rpcbind</span></span><br><span class="line">[root@ansible nfs]<span class="comment"># systemctl enable rpcbind &amp;&amp; systemctl start rpcbind</span></span><br></pre></td></tr></table></figure>

<p>2）只安装不需要启动nfs服务（相当于只使用对应的工具类）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible nfs]<span class="comment"># yum install -y nfs-utils</span></span><br></pre></td></tr></table></figure>

<p>3）挂载nfs服务（172.16.4.142:&#x2F;usr&#x2F;local&#x2F;src&#x2F;share）到本地目录 <font color=#00f>&#x2F;usr&#x2F;local&#x2F;nfs</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@ansible nfs]<span class="comment"># mount -t nfs 172.16.4.142:/usr/local/src/share /usr/local/nfs</span></span><br><span class="line">[root@ansible nfs]<span class="comment"># df -TH</span></span><br><span class="line">文件系统                          类型      容量  已用  可用 已用% 挂载点</span><br><span class="line">devtmpfs                          devtmpfs  508M     0  508M    0% /dev</span><br><span class="line">tmpfs                             tmpfs     520M     0  520M    0% /dev/shm</span><br><span class="line">tmpfs                             tmpfs     520M  7.1M  513M    2% /run</span><br><span class="line">tmpfs                             tmpfs     520M     0  520M    0% /sys/fs/cgroup</span><br><span class="line">/dev/mapper/centos-root           xfs       6.7G  2.4G  4.3G   36% /</span><br><span class="line">/dev/sda1                         xfs       1.1G  176M  888M   17% /boot</span><br><span class="line">tmpfs                             tmpfs     104M     0  104M    0% /run/user/0</span><br><span class="line">172.16.4.142:/usr/local/src/share nfs4      6.7G  1.5G  5.2G   23% /usr/local/nfs</span><br></pre></td></tr></table></figure>

<h4 id="自动挂载端"><a href="#自动挂载端" class="headerlink" title="自动挂载端"></a>自动挂载端</h4><ul>
<li>autofs服务</li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
        <category>存储</category>
        <category>nfs</category>
      </categories>
      <tags>
        <tag>centos7</tag>
        <tag>nfs</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Nginx服务（容器）</title>
    <url>/2023/05/28/nginx-docker/</url>
    <content><![CDATA[<h3 id="服务简介"><a href="#服务简介" class="headerlink" title="服务简介"></a>服务简介</h3><p>Nginx (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP&#x2F;POP3&#x2F;SMTP服务。</p>
<ul>
<li><a href="http://nginx.org/en/download.html">官网下载地址</a></li>
</ul>
<span id="more"></span>

<h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><ul>
<li>Docker环境&#x3D;&gt; <a href="https://blog.csdn.net/u012285269/article/details/124479943">安装【Docker in CentOS7.x】</a></li>
</ul>
<h3 id="安装服务"><a href="#安装服务" class="headerlink" title="安装服务"></a>安装服务</h3><h4 id="部署脚本（restart-sh）"><a href="#部署脚本（restart-sh）" class="headerlink" title="部署脚本（restart.sh）"></a>部署脚本（restart.sh）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">dir</span>=/usr/local/nginx</span><br><span class="line">name=nginx8082</span><br><span class="line">containerId=$(docker ps --filter name=<span class="variable">$name</span> -aq)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$containerId</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="string">&quot;create container: <span class="variable">$name</span> (dir: <span class="variable">$dir</span>)&quot;</span></span><br><span class="line">     docker run --name <span class="variable">$name</span> \</span><br><span class="line">     --restart=always \</span><br><span class="line">     -v <span class="variable">$dir</span>/nginx.conf:/etc/nginx/nginx.conf:ro \</span><br><span class="line">     -v <span class="variable">$dir</span>/conf.d:/etc/nginx/conf.d:ro \</span><br><span class="line">     -v <span class="variable">$dir</span>/logs:/var/log/nginx \</span><br><span class="line">     -v /etc/localtime:/etc/localtime:ro \</span><br><span class="line">     -p 8082:80 \</span><br><span class="line">     -d nginx:1.20.2</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">     sContainerId=$(docker ps --filter name=<span class="variable">$name</span> -q)</span><br><span class="line">     <span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$sContainerId</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">         <span class="built_in">echo</span> <span class="string">&quot;restart container: <span class="variable">$name</span>&quot;</span></span><br><span class="line">         docker restart <span class="variable">$sContainerId</span></span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">         <span class="built_in">echo</span> <span class="string">&quot;start container: <span class="variable">$name</span>&quot;</span></span><br><span class="line">         docker start <span class="variable">$containerId</span></span><br><span class="line">     <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h4 id="配置刷新（nginx-reload-sh）"><a href="#配置刷新（nginx-reload-sh）" class="headerlink" title="配置刷新（nginx-reload.sh）"></a>配置刷新（nginx-reload.sh）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">name=nginx8082</span><br><span class="line">containerId=$(docker ps --filter name=<span class="variable">$name</span> -aq)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$containerId</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;reload nginx.conf running ~&quot;</span></span><br><span class="line">    docker <span class="built_in">exec</span> -it <span class="variable">$containerId</span> bash -c <span class="string">&#x27;nginx -s reload&#x27;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;reload nginx.conf successfully ~&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;container not exists ~&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h4 id="主配置文件（nginx-conf）"><a href="#主配置文件（nginx-conf）" class="headerlink" title="主配置文件（nginx.conf）"></a>主配置文件（nginx.conf）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  auto;</span><br><span class="line"></span><br><span class="line">error_log  /var/log/nginx/error.log notice;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  10240;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    map <span class="variable">$http_x_forwarded_for</span> <span class="variable">$RealIp</span> &#123;</span><br><span class="line">        <span class="string">&#x27;&#x27;</span>     <span class="variable">$remote_addr</span>;</span><br><span class="line">        ~^(?P&lt;firstAddr&gt;[0-9\.]+),?.*$ <span class="variable">$firstAddr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log_format  main  <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    access_log    /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line">    gzip  on;                     <span class="comment">#开启gzip</span></span><br><span class="line">    gzip_min_length 1k;           <span class="comment">#低于1kb的资源不压缩</span></span><br><span class="line">    gzip_comp_level 4;            <span class="comment">#压缩级别【1-9】，越大压缩率越高，同时消耗cpu资源也越多，建议设</span></span><br><span class="line">    gzip_types text/plain application/javascript application/x-javascript text/javascript text/xml text/css;</span><br><span class="line">    gzip_disable <span class="string">&quot;MSIE [1-6]\.&quot;</span>;  <span class="comment">#配置禁用gzip条件，支持正则。此处表示ie6及以下不启用</span></span><br><span class="line">    gzip_vary on;                 <span class="comment">#是否添加“Vary: Accept-Encoding”响应头</span></span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="子配置文件"><a href="#子配置文件" class="headerlink" title="子配置文件"></a>子配置文件</h4><p>放置到 <font color=#0000FF>&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;</font> 目录下</p>
<h5 id="负载均衡（zzjygx-conf）"><a href="#负载均衡（zzjygx-conf）" class="headerlink" title="负载均衡（zzjygx.conf）"></a>负载均衡（zzjygx.conf）</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream zzjygx &#123;</span><br><span class="line">    server 192.168.126.52:8050;</span><br><span class="line">    server 192.168.126.53:8050;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    listen  [::]:80;</span><br><span class="line">    server_name  cqjy.gxnccq.com;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/zzjygx-host.access.log  main;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://zzjygx;</span><br><span class="line">        proxy_read_timeout 300;</span><br><span class="line">        proxy_send_timeout 300;</span><br><span class="line">        proxy_set_header Host       <span class="variable">$http_host</span>;</span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        client_max_body_size  200M;</span><br><span class="line">        proxy_buffering off;</span><br><span class="line">        proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        proxy_set_header Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#location = /user/nccqloginpage &#123;</span></span><br><span class="line">    <span class="comment">#    rewrite ^(.*) http://cqjy.gxnccq.com break;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">    location = /user/zzjyloginpage &#123;</span><br><span class="line">        rewrite ^(.*) http://cqjy.gxnccq.com/user/nccqloginpage <span class="built_in">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location = /user/zcczloginpage &#123;</span><br><span class="line">        rewrite ^(.*) http://cqjy.gxnccq.com/user/nccqloginpage <span class="built_in">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /upload/doc &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">        index  index.html;</span><br><span class="line">    &#125;</span><br><span class="line">			</span><br><span class="line">    location /upload/image &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">        index  index.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /upload/html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">        index  index.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /upload/file &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">        index  index.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="静态页面（zzjyfrontgx-conf）"><a href="#静态页面（zzjyfrontgx-conf）" class="headerlink" title="静态页面（zzjyfrontgx.conf）"></a>静态页面（zzjyfrontgx.conf）</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream zzjyfrontgx &#123;</span><br><span class="line">    server 192.168.126.52:8051;</span><br><span class="line">    server 192.168.126.53:8051;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    listen  [::]:80;</span><br><span class="line">    server_name  frontgx-cqjy.gxnccq.com;</span><br><span class="line">    default_type <span class="string">&#x27;text/html&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/zzjyfrontgx-host.access.log  main;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://zzjyfrontgx;</span><br><span class="line">        proxy_read_timeout 300;</span><br><span class="line">        proxy_send_timeout 300;</span><br><span class="line">        proxy_set_header Host       <span class="variable">$http_host</span>;</span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$RealIp</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        client_max_body_size  200M;</span><br><span class="line">        proxy_buffering off;</span><br><span class="line">	proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">	proxy_set_header Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>中间件</category>
        <category>网关</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>容器</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx配置介绍、备忘录等</title>
    <url>/2023/06/02/nginx-notes/</url>
    <content><![CDATA[<h3 id="笔记简介"><a href="#笔记简介" class="headerlink" title="笔记简介"></a>笔记简介</h3><p>服务安装参考：</p>
<ul>
<li><a href="https://foreverzang.github.io/2023/05/28/nginx-docker">安装Nginx服务（容器）</a></li>
<li><a href="https://foreverzang.github.io/2023/05/31/nginx-setup">安装Nginx服务</a></li>
</ul>
<p>主要内容：</p>
<ul>
<li>指令解释说明</li>
<li>指令差异对比</li>
</ul>
<span id="more"></span>

<h3 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h3><h4 id="指令解释说明"><a href="#指令解释说明" class="headerlink" title="指令解释说明"></a>指令解释说明</h4><h5 id="daemon指令"><a href="#daemon指令" class="headerlink" title="daemon指令"></a>daemon指令</h5><p>在生产环境中，请不要使用 daemon 和 master_process 指令。这些选项仅用于开发调试。当然，你也可以在生产环境中设置 daemon off，然后使用进程管理工具启动<br>Nginx，但是，平滑重启、升级等功能将无法使用。master_process off 绝对不应该用于生产环境。</p>
<h6 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h6><p>daemon on|off</p>
<h6 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h6><p>no</p>
<h6 id="使用环境"><a href="#使用环境" class="headerlink" title="使用环境"></a>使用环境</h6><p>main</p>
<h6 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h6><p>daemon off</p>
<h5 id="master-process指令"><a href="#master-process指令" class="headerlink" title="master_process指令"></a>master_process指令</h5><p>生产环境中，请不要使用 daemon 和 master_process 指令，这些选项主要用于开发调试。</p>
<h6 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h6><p>master_process on|off</p>
<h6 id="默认值-1"><a href="#默认值-1" class="headerlink" title="默认值"></a>默认值</h6><p>on</p>
<h6 id="使用环境-1"><a href="#使用环境-1" class="headerlink" title="使用环境"></a>使用环境</h6><p>main</p>
<h6 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h6><p>master_process off</p>
<h5 id="user指令"><a href="#user指令" class="headerlink" title="user指令"></a>user指令</h5><p>该指令用于指定运行 Nginx Worker 进程的用户和组，默认的用户名和组名都是 nobody。如过组名没有指定，Nginx则默认组名与用户名相同。</p>
<h6 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h6><p>user [user] [group]</p>
<h6 id="默认值-2"><a href="#默认值-2" class="headerlink" title="默认值"></a>默认值</h6><p>nobody nobody</p>
<h6 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h6><p>user www users;</p>
<h5 id="env指令"><a href="#env指令" class="headerlink" title="env指令"></a>env指令</h5><p>此项指令用来定义变量集合，以下场合需更改环境变量，或者添加新的环境变量：</p>
<ul>
<li>在零停机环境下平滑升级Nginx时；</li>
<li>启用Nginx内置Perl模块时使用；</li>
<li>被Nginx进程所使用。</li>
</ul>
<h6 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h6><p>env VAR|VAR&#x3D;VALUE</p>
<h6 id="使用环境-2"><a href="#使用环境-2" class="headerlink" title="使用环境"></a>使用环境</h6><p>main</p>
<h6 id="默认值-3"><a href="#默认值-3" class="headerlink" title="默认值"></a>默认值</h6><p>TZ</p>
<h6 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h6><p>如果没有明确定义TZ的值，默认情况下它集成老版本的值，且默认情况下内置的Perl模块总是可以使用TZ值的。</p>
<ul>
<li>env MALLOC_OPTIONS;</li>
<li>env PERL5LIB&#x3D;&#x2F;data&#x2F;site&#x2F;modules;</li>
<li>env OPENSSL_ALLOW_PROXY_CERTS&#x3D;1</li>
</ul>
<h5 id="error-log指令"><a href="#error-log指令" class="headerlink" title="error_log指令"></a>error_log指令</h5><p>file<br>参数用来指定记录Nginx及FastCGI错误日志的文件路径。错误日志记录了服务器运行期间遇到的各种错误，以及一些普通的诊断信息，我们可以设置日志文件记录错误级别的高低，控制日志文件记录信息的数量和类型。通常情况下，Nginx分为6个错误级别，其中debug级别最低，记录的错误日志数量最多，范围最广；而crit级别最高，只记录非常严重的错误，一般在生产环境中使用。</p>
<p>日志中默认的错误级别：</p>
<ul>
<li>main部分：error</li>
<li>http部分：crit</li>
<li>server部分：crit</li>
</ul>
<p>Nginx支持将不同虚拟主机的日志存储在不同的位置，这是个很有特色的功能。在lighttpd中，它们一直拒绝提供类似的功能。</p>
<h6 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h6><p>error_log file [ debug|info|notice|warn|error|crit ]</p>
<h6 id="默认值-4"><a href="#默认值-4" class="headerlink" title="默认值"></a>默认值</h6><p>${prefix}&#x2F;logs&#x2F;error.log</p>
<h6 id="使用环境-3"><a href="#使用环境-3" class="headerlink" title="使用环境"></a>使用环境</h6><p>main</p>
<h6 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h6><p>error_log &#x2F;var&#x2F;logs&#x2F;nginx&#x2F;error.log crit</p>
<blockquote>
<p>禁用： error_log &#x2F;dev&#x2F;null crit;（注：error_log off 无法禁用日志）</p>
</blockquote>
<h5 id="include指令"><a href="#include指令" class="headerlink" title="include指令"></a>include指令</h5><p>使用此指令，可以包含任何你想要包含的配置文件。从0.4.4开始，include指令开始支持文件名匹配。</p>
<blockquote>
<p>注意：直到0.67版本为止，include文件的路径是相对于configure时由–prefix&#x3D;&lt;PATH&gt;指令指定的路径而言的，默认情况下是&#x2F;usr&#x2F;local&#x2F;nginx。<br>如果在编译compiledNginx时你没有指定这个值，请使用绝对路径。</p>
</blockquote>
<h6 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h6><p>include file | *</p>
<h6 id="默认值-5"><a href="#默认值-5" class="headerlink" title="默认值"></a>默认值</h6><p>无</p>
<h6 id="使用环境-4"><a href="#使用环境-4" class="headerlink" title="使用环境"></a>使用环境</h6><p>http</p>
<h6 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h6><p>include vhosts&#x2F;*.conf;</p>
<h5 id="autoindex指令"><a href="#autoindex指令" class="headerlink" title="autoindex指令"></a>autoindex指令</h5><h6 id="示例-6"><a href="#示例-6" class="headerlink" title="示例"></a>示例</h6><p>当要显示目录时，需要注释index配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    autoindex            on;         ## 列出整个目录列表</span><br><span class="line">    autoindex_exact_size on;         ## 以kB或者MB或者GB单位显示出文件的大小，而不是字节</span><br><span class="line">    autoindex_localtime  on;         ## 显示的文件时间为文件的服务器时间</span><br><span class="line">    #index index.html;               ## 注：当要显示目录时，需要注释index配置</span><br><span class="line">    root                 html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="rewrite指令"><a href="#rewrite指令" class="headerlink" title="rewrite指令"></a>rewrite指令</h5><h5 id="error-page指令"><a href="#error-page指令" class="headerlink" title="error_page指令"></a>error_page指令</h5><p>该指令用于设置如果出现指定的HTTP错误状态码，则返回给客户端显示的对应URI地址。</p>
<h6 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h6><p>error_page code [code …][&#x3D;|&#x3D;answer-code] uri</p>
<h6 id="默认值-6"><a href="#默认值-6" class="headerlink" title="默认值"></a>默认值</h6><p>no</p>
<h6 id="使用环境-5"><a href="#使用环境-5" class="headerlink" title="使用环境"></a>使用环境</h6><p>http,server,location,if in condition</p>
<h6 id="示例-7"><a href="#示例-7" class="headerlink" title="示例"></a>示例</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    error_page 404 /404.html</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="功能模块配置"><a href="#功能模块配置" class="headerlink" title="功能模块配置"></a>功能模块配置</h4><h5 id="gzip压缩模块"><a href="#gzip压缩模块" class="headerlink" title="gzip压缩模块"></a>gzip压缩模块</h5><h6 id="示例-8"><a href="#示例-8" class="headerlink" title="示例"></a>示例</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    gzip                 on;         ## 开启压缩功能</span><br><span class="line">    gzip_min_length      1k;         ## 大于此长度，才开始压缩操作</span><br><span class="line">    gzip_buffers      4 16k;         ## 缓存配置</span><br><span class="line">    gzip_http_version   1.1;         ## 支持的http版本1.1+</span><br><span class="line">    gzip_comp_level       2;         ## 压缩级别1~9，压缩级别越高，越消耗CPU</span><br><span class="line">    gzip_types        text/plain application/x-javascript text/css application/xml;</span><br><span class="line">    gzip_vary            on;         ## 设置压缩头部</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="ssl加解密模块"><a href="#ssl加解密模块" class="headerlink" title="ssl加解密模块"></a>ssl加解密模块</h5><h6 id="证书工具"><a href="#证书工具" class="headerlink" title="证书工具"></a>证书工具</h6><blockquote>
<p>常用的证书工具：openssl、keytool</p>
</blockquote>
<ul>
<li>keytool没办法签发证书，而openssl能够进行签发和证书链的管理（因此，keytool 签发的所谓证书只是一种 自签名证书）</li>
<li>keytool自己就没办法做证书链，需要用到openssl</li>
<li>keytool 其实是 JDK 提供给我们弄些 JDK 能认识的证书的（因此，我们用 keytool 的目的，更多的是在这里：让Java编写的程序能用上证书）。</li>
</ul>
<h6 id="OpenSSL"><a href="#OpenSSL" class="headerlink" title="OpenSSL"></a>OpenSSL</h6><h5 id="HTTP-Auth-Basic-模块"><a href="#HTTP-Auth-Basic-模块" class="headerlink" title="HTTP Auth Basic 模块"></a>HTTP Auth Basic 模块</h5><p>该模块采用基于HTTP基本身份验证的用户名和密码登录方式，来保护你的虚拟主机或目录。<br>示例如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /myauth &#123;</span><br><span class="line">    autoindex                         on;       ## 列出整个目录列表</span><br><span class="line">    autoindex_exact_size              on;       ## 以kB或者MB或者GB单位显示出文件的大小，而不是字节</span><br><span class="line">    autoindex_localtime               on;       ## 显示的文件时间为文件的服务器时间</span><br><span class="line">    auth_basic             &quot;ForeverZang&quot;;       ## 认证名称，命名随意</span><br><span class="line">    auth_basic_user_file        htpasswd;       ## 密码文件，相对路径（nginx.conf的根目录）；或绝对路径</span><br><span class="line">    alias                      html/docs;       ## 文件目录      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="生成密码文件"><a href="#生成密码文件" class="headerlink" title="生成密码文件"></a>生成密码文件</h6><p>需要用到 htpasswd 工具生成密码文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 nginx]# htpasswd /usr/local/nginx/conf/htpasswd zangh</span><br><span class="line">New password: </span><br><span class="line">Re-type new password: </span><br><span class="line">Updating password for user zangh</span><br><span class="line">[root@centos7 nginx]# cat /usr/local/nginx/conf/htpasswd</span><br><span class="line">zangh:$apr1$5zIZuKY4$Y6GTJPst6mFzZcymFAnLE/</span><br></pre></td></tr></table></figure>

<h6 id="重启服务验证"><a href="#重启服务验证" class="headerlink" title="重启服务验证"></a>重启服务验证</h6><p>访问地址：http:&#x2F;&#x2F;{server}:{port}&#x2F;myauth&#x2F;<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/nginx/20230607163311.png" alt="账号密码验证"><br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/nginx/20230607163353.png" alt="服务文件列表"></p>
<h4 id="指令差异对比"><a href="#指令差异对比" class="headerlink" title="指令差异对比"></a>指令差异对比</h4><h5 id="location块中root与alias的区别"><a href="#location块中root与alias的区别" class="headerlink" title="location块中root与alias的区别"></a>location块中root与alias的区别</h5><blockquote>
<p>主要区别：<strong>nginx</strong> 如何解释 location 后面的 <strong>uri</strong>，这会使两者分别以不同的方式将请求映射到服务器文件上。</p>
</blockquote>
<ul>
<li><p>root：将location块的 ”url路径” 带入到 ”root指令路径” 中，例如：</p>
<ul>
<li>示例1：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">location /download &#123;</span><br><span class="line">   autoindex            on;</span><br><span class="line">   autoindex_exact_size on;</span><br><span class="line">   autoindex_localtime  on;</span><br><span class="line">   root                 html;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">请求1：&#123;server&#125;:&#123;ip&#125;/download                         ===&gt; ./html/download</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">请求2：&#123;server&#125;:&#123;ip&#125;/download/test.html               ===&gt; ./html/download/test.html</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">请求3：&#123;server&#125;:&#123;ip&#125;/download/test.html?a=1&amp;b=2       ===&gt; ./html/download/test.html?a=1&amp;b=2</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">请求4：&#123;server&#125;:&#123;ip&#125;/download/test.html?a=1<span class="comment">#anc       ===&gt; ./html/download/test.html?a=1#anc</span></span></span><br></pre></td></tr></table></figure></li>
<li>示例2：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">location /download/doc &#123;</span><br><span class="line">   autoindex            on;</span><br><span class="line">   autoindex_exact_size on;</span><br><span class="line">   autoindex_localtime  on;</span><br><span class="line">   root                 html;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">请求1：&#123;server&#125;:&#123;ip&#125;/download/doc                     ===&gt; ./html/download/doc</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">请求2：&#123;server&#125;:&#123;ip&#125;/download/doc/test.html           ===&gt; ./html/download/doc/test.html</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">请求3：&#123;server&#125;:&#123;ip&#125;/download/doc/test.html?a=1&amp;b=2   ===&gt; ./html/download/doc/test.html?a=1&amp;b=2</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">请求4：&#123;server&#125;:&#123;ip&#125;/download/doc/test.html?a=1<span class="comment">#anc   ===&gt; ./html/download/doc/test.html?a=1#anc</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>alias：直接将location块的 ”url路径” 与 ”alias指令路径” 建立对应关系。</p>
<ul>
<li>示例1（完成download &lt;&#x3D;&#x3D;&gt; html映射）：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">location /download &#123;</span><br><span class="line">   autoindex            on;</span><br><span class="line">   autoindex_exact_size on;</span><br><span class="line">   autoindex_localtime  on;</span><br><span class="line">   root                 html;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">请求1：&#123;server&#125;:&#123;ip&#125;/download                         ===&gt; ./html</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">请求2：&#123;server&#125;:&#123;ip&#125;/download/test.html               ===&gt; ./html/test.html</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">请求3：&#123;server&#125;:&#123;ip&#125;/download/test.html?a=1&amp;b=2       ===&gt; ./html/test.html?a=1&amp;b=2</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">请求4：&#123;server&#125;:&#123;ip&#125;/download/test.html?a=1<span class="comment">#anc       ===&gt; ./html/test.html?a=1#anc</span></span></span><br></pre></td></tr></table></figure></li>
<li>示例2（完成download&#x2F;doc &lt;&#x3D;&#x3D;&gt; html映射）：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">location /download/doc &#123;</span><br><span class="line">   autoindex            on;</span><br><span class="line">   autoindex_exact_size on;</span><br><span class="line">   autoindex_localtime  on;</span><br><span class="line">   root                 html;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">请求1：&#123;server&#125;:&#123;ip&#125;/download/doc                     ===&gt; ./html</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">请求2：&#123;server&#125;:&#123;ip&#125;/download/doc/test.html           ===&gt; ./html/test.html</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">请求3：&#123;server&#125;:&#123;ip&#125;/download/doc/test.html?a=1&amp;b=2   ===&gt; ./html/test.html?a=1&amp;b=2</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">请求4：&#123;server&#125;:&#123;ip&#125;/download/doc/test.html?a=1<span class="comment">#anc   ===&gt; ./html/test.html?a=1#anc</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="模块概述"><a href="#模块概述" class="headerlink" title="模块概述"></a>模块概述</h3>]]></content>
      <categories>
        <category>中间件</category>
        <category>网关</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Samba 网络文件共享服务</title>
    <url>/2023/05/27/samba-setup/</url>
    <content><![CDATA[<h3 id="Samba简介"><a href="#Samba简介" class="headerlink" title="Samba简介"></a>Samba简介</h3><p>Samba是在 Linux 和 UNIX 系统上实现 SMB 协议的一个免费软件，由服务器及客户端程序构成。</p>
<h3 id="服务安装并配置"><a href="#服务安装并配置" class="headerlink" title="服务安装并配置"></a>服务安装并配置</h3><h4 id="服务安装"><a href="#服务安装" class="headerlink" title="服务安装"></a>服务安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@samba01 home]<span class="comment"># yum list samba</span></span><br><span class="line">……</span><br><span class="line">已加载插件：fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirrors.bupt.edu.cn</span><br><span class="line"> * extras: mirrors.bupt.edu.cn</span><br><span class="line"> * updates: mirrors.bupt.edu.cn</span><br><span class="line">已安装的软件包</span><br><span class="line">samba.x86_64               4.10.16-20.el7_9               @updates</span><br><span class="line">……</span><br><span class="line">[root@samba01 home]<span class="comment"># yum install -y samba</span></span><br></pre></td></tr></table></figure>

<h4 id="服务配置"><a href="#服务配置" class="headerlink" title="服务配置"></a>服务配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@samba01 home]<span class="comment"># vi /etc/samba/smb.conf</span></span><br><span class="line">……</span><br><span class="line">[www]</span><br><span class="line">        comment = shared</span><br><span class="line">        path = /home/www</span><br><span class="line">        writeable = <span class="built_in">yes</span></span><br><span class="line">        public = <span class="built_in">yes</span></span><br><span class="line">……</span><br></pre></td></tr></table></figure>

<h4 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@samba01 home]<span class="comment"># useradd -r -d /home/www -m www</span></span><br><span class="line">[root@samba01 home]<span class="comment"># smbpasswd -a www</span></span><br><span class="line">New SMB password: <span class="comment">#123456</span></span><br></pre></td></tr></table></figure>

<h4 id="关闭SELinux"><a href="#关闭SELinux" class="headerlink" title="关闭SELinux"></a>关闭SELinux</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@samba01 home]<span class="comment"># setenforce 0</span></span><br><span class="line">[root@samba01 home]<span class="comment"># vi /etc/selinux/config</span></span><br><span class="line">……</span><br><span class="line">SELINUX=permissive</span><br><span class="line">……</span><br></pre></td></tr></table></figure>

<h4 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@samba01 home]<span class="comment"># systemctl stop firewalld &amp;&amp; systemctl disable firewalld</span></span><br><span class="line">Removed symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.</span><br><span class="line">Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.</span><br></pre></td></tr></table></figure>

<h4 id="服务启动"><a href="#服务启动" class="headerlink" title="服务启动"></a>服务启动</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@samba01 home]<span class="comment"># systemctl start smb</span></span><br><span class="line">● smb.service - Samba SMB Daemon</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/smb.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since 三 2022-10-12 12:15:14 CST; 11min ago</span><br><span class="line">     Docs: man:smbd(8)</span><br><span class="line">           man:samba(7)</span><br><span class="line">           man:smb.conf(5)</span><br><span class="line"> Main PID: 1548 (smbd)</span><br><span class="line">   Status: <span class="string">&quot;smbd: ready to serve connections...&quot;</span></span><br><span class="line">   CGroup: /system.slice/smb.service</span><br><span class="line">           ├─1548 /usr/sbin/smbd --foreground --no-process-group</span><br><span class="line">           ├─1551 /usr/sbin/smbd --foreground --no-process-group</span><br><span class="line">           ├─1552 /usr/sbin/smbd --foreground --no-process-group</span><br><span class="line">           ├─1553 /usr/sbin/smbd --foreground --no-process-group</span><br><span class="line">           └─1556 /usr/sbin/smbd --foreground --no-process-group</span><br><span class="line"></span><br><span class="line">10月 12 12:15:14 samba01.zangh systemd[1]: Stopped Samba SMB Daemon.</span><br><span class="line">10月 12 12:15:14 samba01.zangh systemd[1]: Starting Samba SMB Daemon...</span><br><span class="line">10月 12 12:15:14 samba01.zangh smbd[1548]: [2022/10/12 12:15:14.596966,  0] ../../lib/util/become_daemon.c:136(daemon_ready)</span><br><span class="line">10月 12 12:15:14 samba01.zangh systemd[1]: Started Samba SMB Daemon.</span><br><span class="line">10月 12 12:15:14 samba01.zangh smbd[1548]:   daemon_ready: daemon <span class="string">&#x27;smbd&#x27;</span> finished starting up and ready to serve connections</span><br></pre></td></tr></table></figure>

<h4 id="服务访问"><a href="#服务访问" class="headerlink" title="服务访问"></a>服务访问</h4><p>Win+R 输入：\172.16.4.141</p>
<p><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/samba/008621b8f8b14543a6195ca699e1d142.png" alt="打开访问"></p>
<p>登录：www&#x2F;123456</p>
<p><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/samba/b1bd6f4f2e1347ce941a633094c0ff67.png" alt="打开samba共享目录"></p>
]]></content>
      <categories>
        <category>工具</category>
        <category>存储</category>
        <category>samba</category>
      </categories>
      <tags>
        <tag>centos7</tag>
        <tag>samba</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Nginx服务</title>
    <url>/2023/05/31/nginx-setup/</url>
    <content><![CDATA[<h3 id="Nginx简介"><a href="#Nginx简介" class="headerlink" title="Nginx简介"></a>Nginx简介</h3><p>Nginx（“engine x”）是俄罗斯人Igor Sysoev（伊戈尔·塞索耶夫）编写的一款高新能的 HTTP 和<br>反向代理服务器。Nginx能够选择高效的epoll（Linux2.6内核）、kqueue（FreeBSD）、eventport（Solaris10）作为网络I&#x2F;O模型，在高连接并发的情况下，Nginx是Apache服务器不错的替代品，它能够支持高达50000个并发连接数的响应，而内存、CPU等系统资源消耗却非常低，运行非常稳定。</p>
<span id="more"></span>

<h3 id="编译环境"><a href="#编译环境" class="headerlink" title="编译环境"></a>编译环境</h3><ul>
<li><strong>wget工具：</strong> 用于下载tarball</li>
<li><strong>gcc编译器及相关工具：</strong> gcc全称为GUN Compiler<br>Collection，是GUN社区推出的功能强大、性能优越的用于编程开发的自由编译器，是GUN的代表作品之一，目前可以编译的语言包括：C、C++、Objective-C，Fortran、Java等。</li>
<li><strong>pcre、pcre-devel库：</strong> 包括perl兼容的正则表达式库，nginx的http、rewrite模块需要使用pcre来解析正则表达式。</li>
<li><strong>zlib、zlib-devel库：</strong> nginx的gzip模块需要zlib库支持。</li>
<li><strong>openssl、openssl-devel库：</strong> nginx的ssl功能依赖openssl库。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 local]# yum install -y wget gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure>

<h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><h4 id="下载nginx源码包"><a href="#下载nginx源码包" class="headerlink" title="下载nginx源码包"></a>下载nginx源码包</h4><p>1）从 <a href="http://nginx.org/download">官网</a> 下载tarball到 <em>&#x2F;usr&#x2F;local&#x2F;src</em> 目录下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 local]# wget http://nginx.org/download/nginx-1.15.8.tar.gz -O /usr/local/src/nginx-1.15.8.tar.gz</span><br></pre></td></tr></table></figure>

<p>2）解压 nginx tarball 到 <em>&#x2F;usr&#x2F;local&#x2F;nginx-1.25.0</em> 目录下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 local]# tar -zxf src/nginx-1.25.0.tar.gz -C /usr/local/</span><br></pre></td></tr></table></figure>

<h4 id="编译nginx"><a href="#编译nginx" class="headerlink" title="编译nginx"></a>编译nginx</h4><p>1）通过 <em>.&#x2F;configure</em> 生成 Makefile</p>
<ul>
<li><em>–prefix：</em> 设置安装路径</li>
<li><em>–with-[package]：</em> 启用依赖模块</li>
<li><em>–without-[package]：</em> 禁用依赖模块</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 local]# cd nginx-1.25.0</span><br><span class="line">[root@centos7 nginx-1.25.0]# ./configure --prefix=/usr/local/nginx \</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">--pid-path=/usr/local/nginx \</span></span><br><span class="line"><span class="language-bash">&gt; --lock-path=/var/lock/nginx.lock \</span></span><br><span class="line"><span class="language-bash">&gt; --user=nginx \</span></span><br><span class="line"><span class="language-bash">&gt; --group=nginx \</span></span><br><span class="line"><span class="language-bash">&gt; --with-http_ssl_module \</span></span><br><span class="line"><span class="language-bash">&gt; --with-http_gzip_static_module</span></span><br><span class="line"></span><br><span class="line">[root@centos7 nginx-1.25.0]# ll</span><br><span class="line">total 844</span><br><span class="line">drwxr-xr-x 6 elasticsearch elasticsearch   4096 May 31 21:51 auto</span><br><span class="line">-rw-r--r-- 1 elasticsearch elasticsearch 323328 May 23 23:08 CHANGES</span><br><span class="line">-rw-r--r-- 1 elasticsearch elasticsearch 494278 May 23 23:08 CHANGES.ru</span><br><span class="line">drwxr-xr-x 2 elasticsearch elasticsearch   4096 May 31 21:51 conf</span><br><span class="line">-rwxr-xr-x 1 elasticsearch elasticsearch   2611 May 23 23:08 configure</span><br><span class="line">drwxr-xr-x 4 elasticsearch elasticsearch   4096 May 31 21:51 contrib</span><br><span class="line">drwxr-xr-x 2 elasticsearch elasticsearch   4096 May 31 21:51 html</span><br><span class="line">-rw-r--r-- 1 elasticsearch elasticsearch   1397 May 23 23:08 LICENSE</span><br><span class="line">-rw-r--r-- 1 root          root             393 May 31 22:05 Makefile      ## ./configure 指令生成的编译配置文件</span><br><span class="line">drwxr-xr-x 2 elasticsearch elasticsearch   4096 May 31 21:51 man</span><br><span class="line">drwxr-xr-x 3 root          root            4096 May 31 22:05 objs          ## ./configure 指令生成编译的源码文件</span><br><span class="line">-rw-r--r-- 1 elasticsearch elasticsearch     49 May 23 23:08 README</span><br><span class="line">drwxr-xr-x 9 elasticsearch elasticsearch   4096 May 31 21:51 src</span><br><span class="line"></span><br><span class="line">[root@centos7 nginx-1.25.0]# make &amp;&amp; make install &amp;&amp; tree ../nginx         ## 编译、安装并展示目录结构</span><br><span class="line">../nginx</span><br><span class="line">|-- conf</span><br><span class="line">|   |-- fastcgi.conf</span><br><span class="line">|   |-- fastcgi.conf.default</span><br><span class="line">|   |-- fastcgi_params</span><br><span class="line">|   |-- fastcgi_params.default</span><br><span class="line">|   |-- koi-utf</span><br><span class="line">|   |-- koi-win</span><br><span class="line">|   |-- mime.types</span><br><span class="line">|   |-- mime.types.default</span><br><span class="line">|   |-- nginx.conf</span><br><span class="line">|   |-- nginx.conf.default</span><br><span class="line">|   |-- scgi_params</span><br><span class="line">|   |-- scgi_params.default</span><br><span class="line">|   |-- uwsgi_params</span><br><span class="line">|   |-- uwsgi_params.default</span><br><span class="line">|   `-- win-utf</span><br><span class="line">|-- html</span><br><span class="line">|   |-- 50x.html</span><br><span class="line">|   `-- index.html</span><br><span class="line">|-- logs</span><br><span class="line">`-- sbin</span><br><span class="line">    `-- nginx</span><br><span class="line">    </span><br><span class="line">[root@centos7 nginx-1.25.0]# whereis nginx </span><br><span class="line">nginx: /usr/local/nginx</span><br></pre></td></tr></table></figure>

<h4 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h4><p>1）默认 nginx.conf 与 nginx.conf.default（备份）配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 nginx]# diff conf/nginx.conf conf/nginx.conf.default            ## 说明初始时，两个配置文件时一样的</span><br><span class="line">[root@centos7 nginx]# vi conf/nginx.conf                                      ## 修改配置文件，主要是端口</span><br><span class="line">pid        /usr/local/nginx/nginx.pid;    ## 此处配置很重要：如不配置，会存在权限问题</span><br><span class="line">http &#123;</span><br><span class="line">  server &#123;</span><br><span class="line">    listen       18800;                   ## 端口80 -&gt; 18800（不冲突即可）</span><br><span class="line">  &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p>2）校验 nginx.conf 配置合法性</p>
<ul>
<li>[emerg] getpwnam(“nginx”) failed &#x3D;&#x3D;&#x3D;&gt; <em>是因为编译的时候制定了启动用户为 nginx:nginx</em></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 nginx]# su nginx -c &#x27;./sbin/nginx -t&#x27;</span><br><span class="line">nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok   ## 提示：配置语法没有问题，正常</span><br><span class="line">nginx: [emerg] getpwnam(&quot;nginx&quot;) failed                                       ## 出现该问题，是因为编译的时候制定了启动用户为 nginx:nginx，而我们目前系统中并没有 nginx 用户</span><br><span class="line">nginx: configuration file /usr/local/nginx/conf/nginx.conf test failed        ## 由于上述错误，导致配置校验失败</span><br></pre></td></tr></table></figure>

<p>3）添加nginx系统用户（如果系统中没有的话）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 nginx]# groupadd -r nginx                                       ## 添加nginx用户组（系统用户组）</span><br><span class="line">[root@centos7 nginx]# useradd -r -M -g nginx -s /bin/bash nginx               ## 添加nginx用户</span><br><span class="line">[root@centos7 nginx]# id nginx</span><br><span class="line">uid=995(nginx) gid=990(nginx) groups=990(nginx)                               ## 1000以下的用户为系统用户</span><br></pre></td></tr></table></figure>

<p>4）修改nginx目录权限为 nginx:nginx</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 nginx]# chown -R nginx:nginx ./nginx</span><br><span class="line">[root@centos7 nginx]# ll nginx</span><br><span class="line">total 16</span><br><span class="line">drwxr-xr-x 2 nginx nginx 4096 May 31 22:35 conf</span><br><span class="line">drwxr-xr-x 2 nginx nginx 4096 May 31 22:27 html</span><br><span class="line">drwxr-xr-x 2 nginx nginx 4096 May 31 22:40 logs</span><br><span class="line">drwxr-xr-x 2 nginx nginx 4096 May 31 22:27 sbin</span><br></pre></td></tr></table></figure>

<h4 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h4><p>1）以nginx用户检查nginx配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-4-3-centos nginx]# su nginx -c &#x27;./sbin/nginx -t&#x27;</span><br><span class="line">nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可能出现如下错误：nginx: [emerg] open() “&#x2F;usr&#x2F;local&#x2F;nginx” failed (21: Is a directory)</p>
</blockquote>
<ul>
<li><strong>出现此错误提示：</strong> 一般都是nginx用户没有目录权限导致的（此处需要检查 conf&#x2F;nginx.conf 配置的pid配置）</li>
</ul>
<p>2）以nginx用户启动nginx服务</p>
<ul>
<li><strong>su nginx -c .&#x2F;sbin&#x2F;nginx命令：</strong> 以nginx用户执行启动命令</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 nginx]# su nginx -c ./sbin/nginx</span><br><span class="line">[root@centos7 nginx]# netstat -tunpl | grep $(cat nginx.pid)</span><br><span class="line">tcp        0      0 0.0.0.0:18800           0.0.0.0:*               LISTEN      6263/nginx: master</span><br></pre></td></tr></table></figure>

<p>3）校验nginx服务是否可用</p>
<ul>
<li>查看进程：ps -ef | grep $(cat nginx.pid) | grep -v grep</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 nginx]# ps -ef | grep $(cat nginx.pid) | grep -v grep</span><br><span class="line">nginx     6263     1  0 09:38 ?        00:00:00 nginx: master process ./sbin/nginx</span><br><span class="line">nginx     6264  6263  0 09:38 ?        00:00:00 nginx: worker process</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>访问地址：</strong> http:&#x2F;&#x2F;{server}:18800&#x2F;<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/nginx/20230601095243.png" alt="打开nginx首页"></li>
</ul>
<h4 id="管理nginx"><a href="#管理nginx" class="headerlink" title="管理nginx"></a>管理nginx</h4><p>1）检查配置</p>
<ul>
<li>su nginx -c ‘.&#x2F;sbin&#x2F;nginx -t’</li>
</ul>
<p>2）启动服务</p>
<ul>
<li>su nginx -c ‘.&#x2F;sbin&#x2F;nginx’</li>
</ul>
<p>3）重新加载（热加载，服务不间断）</p>
<ul>
<li>su nginx -c ‘.&#x2F;sbin&#x2F;nginx -s reload’</li>
</ul>
<p>4）关闭服务</p>
<ul>
<li>su nginx -c ‘.&#x2F;sbin&#x2F;nginx -s stop’</li>
</ul>
<p>5）查看服务</p>
<ul>
<li>ps -ef | grep $(cat nginx.pid) | grep -v grep</li>
</ul>
<h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><h4 id="查看已安装插件"><a href="#查看已安装插件" class="headerlink" title="查看已安装插件"></a>查看已安装插件</h4><p>通过 <strong>.&#x2F;sbin&#x2F;nginx -V</strong> 可以看到当前nginx版本信息、编译器版本、已支持插件、编译时使用的命令信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 nginx]# ./sbin/nginx -V</span><br><span class="line">nginx version: nginx/1.25.0</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC) </span><br><span class="line">built with OpenSSL 1.0.2k-fips  26 Jan 2017</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/local/nginx --pid-path=/usr/local/nginx --lock-path=/var/lock/nginx.lock --user=nginx --group=nginx --with-http_ssl_module --with-http_gzip_static_module</span><br></pre></td></tr></table></figure>

<h4 id="安装echo插件"><a href="#安装echo插件" class="headerlink" title="安装echo插件"></a>安装echo插件</h4><blockquote>
<p>echo插件可以在 Nginx 中用来输出一些信息，是在测试排错过程中一个比较好的工具。它也可以做到把来自不同链接地址的信息进行一个汇总输出。总之能用起来可以给开发人员带来挺大帮助的。下面看看我们如何去安装使用它。</p>
</blockquote>
<ol>
<li>下载echo-nginx-module.zip</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 nginx]# wget https://gitee.com/mjsong/echo-nginx-module/repository/archive/master.zip -O /usr/local/src/echo-nginx-module.zip</span><br><span class="line">[root@centos7 nginx]# ll /usr/local/src | grep echo-nginx-module.zip </span><br><span class="line">-rw-r--r-- 1 root          root              76934 Jun  1 10:27 echo-nginx-module.zip</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>安装unzip工具（如果没有安装）</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 nginx]# yum install -y unzip</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>解压到 <em>&#x2F;usr&#x2F;local&#x2F;src</em> 目录下</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 nginx]# unzip /usr/local/src/echo-nginx-module.zip -d /usr/local/src</span><br><span class="line">[root@centos7 nginx]# ll /usr/local/src/echo-nginx-module-master</span><br><span class="line">total 80</span><br><span class="line">-rw-r--r-- 1 root root  3038 Oct 28  2017 config</span><br><span class="line">-rw-r--r-- 1 root root  1345 Oct 28  2017 LICENSE</span><br><span class="line">-rw-r--r-- 1 root root 54352 Oct 28  2017 README.markdown</span><br><span class="line">drwxr-xr-x 2 root root  4096 Oct 28  2017 src</span><br><span class="line">drwxr-xr-x 2 root root  4096 Oct 28  2017 t</span><br><span class="line">drwxr-xr-x 2 root root  4096 Oct 28  2017 util</span><br><span class="line">-rw-r--r-- 1 root root   986 Oct 28  2017 valgrind.suppress</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>配置（在原来下载的 nginx 目录下执行）</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 nginx]# cd /usr/local/src/nginx-1.25.0</span><br><span class="line">[root@centos7 nginx-1.25.0]# ./configure --prefix=/usr/local/nginx --add-module=/usr/local/src/echo-nginx-module-master</span><br><span class="line">[root@centos7 nginx-1.25.0]# ll                      ## 只列举有变换的目录</span><br><span class="line">-rw-r--r-- 1 root          root             438 Jun  1 10:39 Makefile</span><br><span class="line">drwxr-xr-x 4 root          root            4096 Jun  1 10:39 objs</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>make生成<ul>
<li>注：这里不要进行make install，否则就是覆盖安装</li>
</ul>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 nginx-1.25.0]# make</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>备份原有已安装好的nginx</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 nginx-1.25.0]# cd /usr/local/nginx</span><br><span class="line">[root@centos7 nginx]# su nginx -c &#x27;cp /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak&#x27;</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>将刚刚编译好的nginx覆盖掉原有的nginx（这个时候nginx要停止状态）</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 nginx]# su nginx -c &#x27;./sbin/nginx -s stop&#x27;</span><br><span class="line">[root@centos7 nginx]# su nginx -c &#x27;cp /usr/local/nginx-1.25.0/objs/nginx /usr/local/nginx/sbin/&#x27;</span><br><span class="line">[root@centos7 nginx]# ll sbin</span><br><span class="line">-rwxr-xr-x 1 nginx nginx 4318768 Jun  1 10:49 nginx             ## 进行nginx覆盖</span><br><span class="line">-rwxr-xr-x 1 nginx nginx 6079912 Jun  1 10:45 nginx.bak</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>修改nginx配置</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 nginx]# vi conf/nginx.conf   </span><br><span class="line">pid        /usr/local/nginx/nginx.pid;                  ## 此处配置很重要：如不配置，会存在权限问题</span><br><span class="line">http &#123;</span><br><span class="line">  server &#123;</span><br><span class="line">    listen       18800;                                 ## 端口：80-&gt;18800（不冲突即可）</span><br><span class="line">    location / &#123;</span><br><span class="line">        echo   &#x27;默认主页匹配成功：$host, $args&#x27;;           ## echo模块可用于调试</span><br><span class="line">        root   html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="9">
<li>启动nginx，仍可以通过命令查看是否已经加入成功</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 nginx]# su nginx -c &#x27;./sbin/nginx -V&#x27;</span><br><span class="line">nginx version: nginx/1.25.0</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC) </span><br><span class="line">configure arguments: --prefix=/usr/local/nginx --add-module=/usr/local/src/echo-nginx-module-master</span><br><span class="line">[root@centos7 nginx]# su nginx -c &#x27;./sbin/nginx&#x27;</span><br><span class="line">[root@centos7 nginx]# su nginx -c &#x27;./sbin/nginx -s reload&#x27;</span><br></pre></td></tr></table></figure>

<ol start="10">
<li>访问默认主页</li>
</ol>
<ul>
<li>访问地址：<a href="http://42.192.155.41:18800/?a=1&b=2&c=3">http://42.192.155.41:18800/?a=1&amp;b=2&amp;c=3</a></li>
</ul>
<p><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/nginx/20230601111106.png" alt="打开nginx首页"><br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/nginx/20230601111134.png" alt="打开nginx首页"></p>
<h3 id="平滑管理"><a href="#平滑管理" class="headerlink" title="平滑管理"></a>平滑管理</h3><table>
<thead>
<tr>
<th>Nginx信号量</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>TERM、INT</td>
<td>快速关闭；</td>
</tr>
<tr>
<td>QUIT</td>
<td>从容关闭；</td>
</tr>
<tr>
<td>HUP</td>
<td>平滑重启，重新加载配置文件；</td>
</tr>
<tr>
<td>USR1</td>
<td>重新打开日志文件，在切割日志时用途较大；</td>
</tr>
<tr>
<td>USR2</td>
<td>平滑升级可执行程序；</td>
</tr>
<tr>
<td>WINCH</td>
<td>从容关闭工作进程；</td>
</tr>
</tbody></table>
<h4 id="平滑重启"><a href="#平滑重启" class="headerlink" title="平滑重启"></a>平滑重启</h4><p>可以在修改了 <em>conf&#x2F;nginx.conf</em> 后，在不停止服务的情况下重启nginx服务</p>
<h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><blockquote>
<p>nginx指令原生支持 -s 参数</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 nginx]# su nginx -c &#x27;./sbin/nginx -s reload&#x27;</span><br></pre></td></tr></table></figure>

<h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><blockquote>
<p>kill -HUP Nginx主进程号</p>
<ul>
<li>当Nginx接收到 HUP 信号时，它会尝试先解析配置文件（如果制定配置文件，就使用指定的，否则使用默认的），如果成功，就应用新的配置文件（例如：重新打开日志文件或监听的套接字）。之后，Nginx运行新的工作进程并从容关闭旧的工作进程。通知工作进程关闭监听套接字，但是继续为当前连接的客户提供服务。所有客户端的服务完成后，旧的工作进程被关闭。如过新的配置文件应用文件，Nginx将继续使用旧的配置进行工作。</li>
</ul>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 nginx]# su nginx -c &#x27;kill -HUP `cat /usr/local/nginx/nginx.pid`&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="平滑停止"><a href="#平滑停止" class="headerlink" title="平滑停止"></a>平滑停止</h4><h5 id="方法一-1"><a href="#方法一-1" class="headerlink" title="方法一"></a>方法一</h5><blockquote>
<p>nginx指令原生支持 -s 参数</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 nginx]# su nginx -c &#x27;./sbin/nginx -s stop&#x27;</span><br></pre></td></tr></table></figure>

<h5 id="方法二-1"><a href="#方法二-1" class="headerlink" title="方法二"></a>方法二</h5><p>1）从容停止Nginx</p>
<ul>
<li>kill -QUIT Nginx主进程号<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 nginx]# su nginx -c &#x27;kill -QUIT `cat /usr/local/nginx/nginx.pid`&#x27;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>2）快速停止Nginx</p>
<ul>
<li><p>kill -TERM Nginx主进程号</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 nginx]# su nginx -c &#x27;kill -TERM `cat /usr/local/nginx/nginx.pid`&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p>kill -INT Nginx主进程号</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 nginx]# su nginx -c &#x27;kill -INT `cat /usr/local/nginx/nginx.pid`&#x27;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>3）强制停止所有Nginx进程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 nginx]# su nginx -c &#x27;kill -9 nginx&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="平滑升级"><a href="#平滑升级" class="headerlink" title="平滑升级"></a>平滑升级</h4><p>当需要将正在运行中的Nginx升级，添加&#x2F;删除服务器模块时，可以在不间断服务的情况下，使用新版本、重编译的Nginx可执行程序替换旧版本的可执行程序。</p>
<ol>
<li><p>使用新的可执行程序替换旧的可执行程序，对于编译安装的Nginx，可以将新版本编译安装到旧版本的Nginx安装路径中。替换之前，最好备份下旧的可执行文件</p>
</li>
<li><p>发送以下指令： </p>
<ul>
<li>kill -USR2 旧版本的Nginx主进程号<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 nginx]# su nginx -c &#x27;kill -USR2 `cat /usr/local/nginx/nginx.pid`&#x27;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>旧版本 Nginx 的主进程将重命名它的 .pid 文件为 .pid.oldbin（例如：&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;nginx.pid.oldbin）,然后执行新版本的 Nginx 可执行程序，依次启动新的主进程和新的工作进程。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 nginx]# ll</span><br><span class="line">total 44</span><br><span class="line">drwx------ 2 nginx nginx 4096 Jun  1 09:37 client_body_temp</span><br><span class="line">drwxr-xr-x 2 nginx nginx 4096 Jun  1 12:24 conf</span><br><span class="line">drwx------ 2 nginx nginx 4096 Jun  1 09:37 fastcgi_temp</span><br><span class="line">drwxr-xr-x 2 nginx nginx 4096 May 31 22:27 html</span><br><span class="line">drwxr-xr-x 2 nginx nginx 4096 Jun  1 09:33 logs</span><br><span class="line">-rw-r--r-- 1 nginx nginx    6 Jun  1 12:50 nginx.pid</span><br><span class="line">-rw-r--r-- 1 nginx nginx    5 Jun  1 10:52 nginx.pid.oldbin      ## kill -USR2 旧版本的Nginx主进程号 -&gt; 保存旧的 *.pid 为 *.pid.oldbin</span><br><span class="line">drwx------ 2 nginx nginx 4096 Jun  1 09:37 proxy_temp</span><br><span class="line">drwxr-xr-x 2 nginx nginx 4096 Jun  1 10:45 sbin</span><br><span class="line">drwx------ 2 nginx nginx 4096 Jun  1 09:37 scgi_temp</span><br><span class="line">drwx------ 2 nginx nginx 4096 Jun  1 09:37 uwsgi_temp</span><br></pre></td></tr></table></figure>
</li>
<li><p>此时，新、旧版本的 Nginx 实例会同时运行，共同处理输入的请求。要逐步停止旧版本的 Nginx 实例，你必须发送 WINCH 信号给旧的主进程，然后，它的工作进程将开始从容关闭：</p>
<ul>
<li>kill -WINCH 旧版本的Nginx主进程号<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 nginx]# ps -ef | grep nginx | grep -v grep</span><br><span class="line">nginx     6123     1  0 10:52 ?        00:00:00 nginx: master process ./sbin/nginx            ## 老的master进程</span><br><span class="line">nginx    10904  6123  0 12:24 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx    21392  6123  0 12:50 ?        00:00:00 nginx: master process ./sbin/nginx            ## 新的master进程</span><br><span class="line">nginx    21393 21392  0 12:50 ?        00:00:00 nginx: worker process</span><br><span class="line">[root@centos7 nginx]# cat nginx.pid</span><br><span class="line">21392</span><br><span class="line">[root@centos7 nginx]# cat nginx.pid.oldbin </span><br><span class="line">6123</span><br><span class="line">[root@centos7 nginx]# su nginx -c &#x27;kill -WINCH `cat /usr/local/nginx/nginx.pid.oldbin`&#x27;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>一段时间后，旧的工作进程（worker process）处理了所有已连接的请求后退出，仅由新的工作进程来处理输入的请求了：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 nginx]# ps -ef | grep nginx | grep -v grep</span><br><span class="line">nginx     6123     1  0 10:52 ?        00:00:00 nginx: master process ./sbin/nginx</span><br><span class="line">nginx    21392  6123  0 12:50 ?        00:00:00 nginx: master process ./sbin/nginx</span><br><span class="line">nginx    21393 21392  0 12:50 ?        00:00:00 nginx: worker process</span><br></pre></td></tr></table></figure>
</li>
<li><p>这时候，我们可以决定是使用新版本，还是恢复到旧版本：</p>
<blockquote>
<p>kill -HUP 旧的主进程号：Nginx将在不重载配置文件的情况下启动它的工作进程；</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 nginx]# su nginx -c &#x27;kill -HUP `cat /usr/local/nginx/nginx.pid.oldbin`&#x27;</span><br><span class="line">[root@centos7 nginx]# ps -ef | grep nginx | grep -v grep</span><br><span class="line">nginx     6123     1  0 10:52 ?        00:00:00 nginx: master process ./sbin/nginx</span><br><span class="line">nginx    21392  6123  0 12:50 ?        00:00:00 nginx: master process ./sbin/nginx</span><br><span class="line">nginx    21393 21392  0 12:50 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx    27333  6123  0 13:05 ?        00:00:00 nginx: worker process</span><br></pre></td></tr></table></figure>
<blockquote>
<p>kill -QUIT 新的主进程号：从容关闭其工作进程（worker process）；</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 nginx]# su nginx -c &#x27;kill -QUIT `cat /usr/local/nginx/nginx.pid.oldbin`&#x27;</span><br><span class="line">[root@centos7 nginx]# ps -ef | grep nginx | grep -v grep</span><br><span class="line">nginx    21392     1  0 12:50 ?        00:00:00 nginx: master process ./sbin/nginx</span><br><span class="line">nginx    21393 21392  0 12:50 ?        00:00:00 nginx: worker process</span><br><span class="line">nginx    27333     1  0 13:05 ?        00:00:00 nginx: worker process</span><br></pre></td></tr></table></figure>
<blockquote>
<p>kill -TERM 新的主进程号：强制退出；</p>
</blockquote>
</li>
</ol>
<p>kill 新的主进程号或旧的主进程号：如果因为某些原因新的工作进程不能退出，则向其发送kill信号。</p>
<ul>
<li>新的主进程退出后，旧的主进程会移除 .oldbin 后缀，恢复为它的 .pid 文件，这样，一切就恢复到升级之前。<ol>
<li>kill -HUP 旧的主进程号 </li>
<li>kill -QUIT 新的主进程号</li>
</ol>
</li>
<li>如果尝试升级成功，而你也希望保留新的服务器时，可发送QUIT信号给旧的主进程，使其退出而只留下新的服务器运行：<ol>
<li>kill -WINCH 旧的主进程号</li>
<li>kill -QUIT 老的主进程号</li>
</ol>
</li>
</ul>
<h4 id="日志切割"><a href="#日志切割" class="headerlink" title="日志切割"></a>日志切割</h4><h5 id="方法一-2"><a href="#方法一-2" class="headerlink" title="方法一"></a>方法一</h5><p>切割脚本：&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;ngx_cut_access_log.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">logdir=/var/log/nginx #定义日志路径</span><br><span class="line">prefix=`date -d &quot;-1 day&quot; +%y%m%d` #定义切割后的日志前缀</span><br><span class="line">cd $logdir </span><br><span class="line">for f in `ls access.log`</span><br><span class="line">do</span><br><span class="line">mv $f $f-$prefix #把日志改名</span><br><span class="line">done</span><br><span class="line">/bin/kill -USR1 $(cat /usr/local/nginx/logs/nginx.pid 2&gt;/dev/null) 2&gt;/dev/null #生成新的日志</span><br><span class="line">bzip2 *$prefix #压缩日志</span><br><span class="line">find . -type f -mtime +180 |xargs /bin/rm -f #删除超过180天的老日志</span><br></pre></td></tr></table></figure>
<p>使用 <em>crontab -e</em> 设置为批处理</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 nginx]# crontab -e</span><br><span class="line">00 00 * * * /bin/bash /usr/local/nginx/sbin/ngx_cut_access_log.sh</span><br></pre></td></tr></table></figure>

<h5 id="方法二-2"><a href="#方法二-2" class="headerlink" title="方法二"></a>方法二</h5><p>在&#x2F;etc&#x2F;logrotate.d&#x2F;下创建nginx文件，内容为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/local/nginx/logs/access.log &#123;</span><br><span class="line">    daily</span><br><span class="line">    rotate 30</span><br><span class="line">    missingok</span><br><span class="line">    notifempty</span><br><span class="line">    compress</span><br><span class="line">    sharedscripts</span><br><span class="line">    postrotate</span><br><span class="line">        /bin/kill -USR1 $(cat /usr/local/nginx/nginx.pid 2&gt;/dev/null) 2&gt;/dev/null || :</span><br><span class="line">    endscript</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<ul>
<li>nginx：日志在&#x2F;data&#x2F;logs&#x2F;目录下面，日志名字以log结尾</li>
<li>daily：表示每天切割</li>
<li>rotate 30：表示日志保留30天</li>
<li>missingok：表示忽略错误</li>
<li>notifempty：表示如果日志为空，不切割</li>
<li>compress：表示压缩</li>
<li>sharedscripts和endscript中间：可以引用系统的命令</li>
<li>postrotate：表示当切割之后要执行的命令</li>
</ul>
<h3 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h3><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><h5 id="查看已经编译的模块"><a href="#查看已经编译的模块" class="headerlink" title="查看已经编译的模块"></a>查看已经编译的模块</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx -V</span><br></pre></td></tr></table></figure>

<h5 id="指定配置文件启动"><a href="#指定配置文件启动" class="headerlink" title="指定配置文件启动"></a>指定配置文件启动</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx -c &lt;/path/to/config&gt;</span><br></pre></td></tr></table></figure>

<h5 id="重新加载配置文件"><a href="#重新加载配置文件" class="headerlink" title="重新加载配置文件"></a>重新加载配置文件</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>

<h5 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure>

<h4 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a>内置变量</h4><blockquote>
<p>nginx的配置文件中可以使用的内置变量以美元符$开始，也有人叫全局变量。其中，部分预定义的变量的值是可以改变的。</p>
</blockquote>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>$arg_PARAMETERHTTP</td>
<td>请求中某个参数的值，如&#x2F;index.php?site&#x3D;<a href="http://www.sixstaredu.com,可以用$arg_site取得www.sixstaredu.com这/">www.sixstaredu.com，可以用$arg_site取得www.sixstaredu.com这</a></td>
</tr>
<tr>
<td>$args HTTP</td>
<td>请求中的完整参数。例如，在请求&#x2F;index.php?width&#x3D;400&amp;height&#x3D;200 中，$args表示字符串width&#x3D;400&amp;height&#x3D;200</td>
</tr>
<tr>
<td>$binary_remote_addr</td>
<td>二进制格式的客户端地址。例如：\x0A\xE0B\x0E</td>
</tr>
<tr>
<td>$body_bytes_sent</td>
<td>表示在向客户端发送的http响应中，包体部分的字</td>
</tr>
<tr>
<td>$content_length</td>
<td>表示客户端请求头部中的Content-Length 字段</td>
</tr>
<tr>
<td>$content_type</td>
<td>表示客户端请求头部中的Content-Type 字段</td>
</tr>
<tr>
<td>$cookie_COOKIE</td>
<td>表示在客户端请求头部中的cookie 字段</td>
</tr>
<tr>
<td>$document_root</td>
<td>表示当前请求所使用的root 配置项的值</td>
</tr>
<tr>
<td>$uri</td>
<td>表示当前请求的URI,不带任何参数</td>
</tr>
<tr>
<td>$request_uri</td>
<td>表示客户端发来的原始请求URI，带完整的参数。$uri和$document_uri未必是用户的原始请求，在内部重定向后可能是重定向后的URI，而$request_uri 永远不会改变，始终是客户端的原始URI</td>
</tr>
<tr>
<td>$host</td>
<td>表示客户端请求头部中的Host字段。如果Host字段不存在，则以实际处理的server（虚拟主机）名称代替。如果Host字段中带有端口，如IP:PORT，那么$host是去掉端口的，它的值为IP。$host 是全小写的。这些特性与http_HEADER中的http_host不同，http_host只取出Host头部对应的值</td>
</tr>
<tr>
<td>$hostname</td>
<td>表示 Nginx所在机器的名称，与 gethostbyname调用返回的值相同</td>
</tr>
<tr>
<td>$is_args</td>
<td>表示请求中的 URI是否带参数，如果带参数，$is_args值为 ?，如果不带参数，则是空字符串</td>
</tr>
<tr>
<td>$limit_rate</td>
<td>表示当前连接的限速是多少，0表示无</td>
</tr>
<tr>
<td>$http_HEADER</td>
<td>表示返回客户端的 HTTP响应中相应头部的值。</td>
</tr>
<tr>
<td>$sent_http_HEADER</td>
<td>表示返回客户端的 HTTP响应中相应头部的值。HEADER名称全小写。例如，用 $sent_ http_content_type表示响应中 ContentType头部对应的值</td>
</tr>
<tr>
<td>$nginx_version</td>
<td>表示当前 Nginx的版本号</td>
</tr>
<tr>
<td>$query_string</td>
<td>请求 URI中的参数，与 $args相同，然而$query_string是只读的不会改变</td>
</tr>
<tr>
<td>$remote_addr</td>
<td>表示客户端的地址</td>
</tr>
<tr>
<td>$remote_port</td>
<td>表示客户端连接使用的端口</td>
</tr>
<tr>
<td>$remote_user</td>
<td>表示使用 Auth Basic Module时定义的用户名</td>
</tr>
<tr>
<td>$request_filename</td>
<td>表示用户请求中的 URI经过 root或 alias转换后的文件路径</td>
</tr>
<tr>
<td>$request_body</td>
<td>表示 HTTP请求中的包体，该参数只在 proxy_pass或 fastcgi_pass中有意义</td>
</tr>
<tr>
<td>$request_body_file</td>
<td>表示 HTTP请求中的包体存储的临时文件名</td>
</tr>
<tr>
<td>$request_completion</td>
<td>当请求已经全部完成时，其值为 “ok”。若没有完成，就要返回客户端，则其值为空字符串；或者在断点续传等情况下使用HTTP range访问的并不是文件的最后一块，那么其值也是空字符串</td>
</tr>
<tr>
<td>$request_method</td>
<td>表示 HTTP请求的方法名，如 GET、PUT、POST等</td>
</tr>
<tr>
<td>$scheme</td>
<td>如在请求 <a href="https://nginx.com/%E4%B8%AD%E8%A1%A8%E7%A4%BA">https://nginx.com/中表示</a> https</td>
</tr>
<tr>
<td>$server_addr</td>
<td>表示服务器地址</td>
</tr>
<tr>
<td>$server_name</td>
<td>表示服务器名称</td>
</tr>
<tr>
<td>$server_port</td>
<td>表示服务器端口</td>
</tr>
<tr>
<td>$server_protocol</td>
<td>表示服务器向客户端发送响应的协议，如 HTTP&#x2F;1.1或 HTTP&#x2F;1.0</td>
</tr>
</tbody></table>
<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><h5 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h5><p><em>nginx.conf</em> 配置文件结构主要组成部分</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">events &#123;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">  ......</span><br><span class="line">  server &#123;</span><br><span class="line">    ......</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  server &#123;</span><br><span class="line">    ......</span><br><span class="line">  &#125;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="设置用户以及用户组"><a href="#设置用户以及用户组" class="headerlink" title="设置用户以及用户组"></a>设置用户以及用户组</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">user nginx nginx;            ## 限定启动的用户（如果是root则报警）</span><br></pre></td></tr></table></figure>

<h6 id="设置工作进程数量"><a href="#设置工作进程数量" class="headerlink" title="设置工作进程数量"></a>设置工作进程数量</h6><p>指定工作衍生进程数（一般等于CPU的总核数或总核数的两倍，例如两个四核CPU，则总核数为8）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">worker_processes 8;          ## auto：自行判断，默认为CPU的总核数</span><br></pre></td></tr></table></figure>

<h6 id="worker进程最大打开文件数"><a href="#worker进程最大打开文件数" class="headerlink" title="worker进程最大打开文件数"></a>worker进程最大打开文件数</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">worker_rlimit_nofile 51200;</span><br></pre></td></tr></table></figure>

<h6 id="error-log配置"><a href="#error-log配置" class="headerlink" title="error_log配置"></a>error_log配置</h6><p>指定错误日志存放的路径，错误日志记录级别可选项为：[debug|info|notice|warn|error|crit]</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">error_log /usr/local/nginx/logs/error.log;          ## 默认为info</span><br><span class="line">error_log /usr/local/nginx/logs/error.log notice;</span><br><span class="line">error_log /usr/local/nginx/logs/error.log crit;</span><br></pre></td></tr></table></figure>

<h5 id="events模块"><a href="#events模块" class="headerlink" title="events模块"></a>events模块</h5><h6 id="使用的网络I-x2F-O模型"><a href="#使用的网络I-x2F-O模型" class="headerlink" title="使用的网络I&#x2F;O模型"></a>使用的网络I&#x2F;O模型</h6><p>Linux 推荐采用epoll模型，FreeBSD 系统推荐采用 kqueue 模型</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">use epoll;</span><br></pre></td></tr></table></figure>

<h6 id="单个-worker-进程最大允许连接数量"><a href="#单个-worker-进程最大允许连接数量" class="headerlink" title="单个 worker 进程最大允许连接数量"></a>单个 worker 进程最大允许连接数量</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">worker_connections 1024;</span><br></pre></td></tr></table></figure>
<ul>
<li>说明：内存越大，可设置的值越大</li>
</ul>
<h6 id="一个-worker-进程可以接受多个网络请求"><a href="#一个-worker-进程可以接受多个网络请求" class="headerlink" title="一个 worker 进程可以接受多个网络请求"></a>一个 worker 进程可以接受多个网络请求</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">multi_accept on;</span><br></pre></td></tr></table></figure>

<h5 id="http模块"><a href="#http模块" class="headerlink" title="http模块"></a>http模块</h5><h6 id="设置字符集"><a href="#设置字符集" class="headerlink" title="设置字符集"></a>设置字符集</h6><p>设置使用的字符集，如果一个网站有多种字符集，请不要随便设置，应让程序员在HTML代码中通过Meta标签设置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">charset utf-8;</span><br></pre></td></tr></table></figure>

<h6 id="开启gzip压缩模式"><a href="#开启gzip压缩模式" class="headerlink" title="开启gzip压缩模式"></a>开启gzip压缩模式</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gzip on;       ## 开启gzip压缩，on|off</span><br></pre></td></tr></table></figure>

<h6 id="限制上传文件大小"><a href="#限制上传文件大小" class="headerlink" title="限制上传文件大小"></a>限制上传文件大小</h6><p>设置客户端能够上传的文件大小</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">client_max_body_size 8m;</span><br></pre></td></tr></table></figure>

<h6 id="server模块"><a href="#server模块" class="headerlink" title="server模块"></a>server模块</h6><p>1）监听80端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">listen 80;</span><br></pre></td></tr></table></figure>

<p>2）监听域名为 sixstar.test 的请求</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server_name sixstar.test;</span><br></pre></td></tr></table></figure>

<p>3）默认访问根目录下 index.php 文件（允许有多个，优先级为从左到右）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">index index.php;</span><br></pre></td></tr></table></figure>

<p>4）访问的根路径是 &#x2F;sixstar（此处填写的路径应对应系统磁盘）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root /sixstar;</span><br></pre></td></tr></table></figure>

<p>5）定义 test 路由访问的程序</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">location /test &#123;</span><br><span class="line">    default_type text/html;</span><br><span class="line">    return 200 &#x27;Hello World!&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>说明：访问 ‘你定义的域名&#x2F;test‘ 返回 ‘Hello World！‘</li>
</ul>
<p>6）访问 &#x2F;sixstar&#x2F;data&#x2F;test&#x2F; 路径下的 index.html</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">location /test &#123;</span><br><span class="line">    alias /sixstar/data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>7）Nginx 限制IP访问频率</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">limit_req_zone $binary_remote_addr zone=allips:10m rate=5r/s;</span><br><span class="line">limit_req zone=allips;</span><br></pre></td></tr></table></figure>
<ul>
<li>说明：limit_req_zone 需要在http 模块添加，limit_req 需要在 location 模块中添加</li>
</ul>
<p>8）access_log记录访问日志</p>
<blockquote>
<p>格式：access_log path [format [buffer&#x3D;size | off]]</p>
<ul>
<li>path：表示日志文件的存放路径</li>
<li>format：表示使用log_format指令设置的日志格式的名称</li>
<li>buffer：表示内存缓冲区的大小，例如：buffer&#x3D;32k</li>
</ul>
</blockquote>
<ol>
<li>如果不想记录日志，可以使用以下指令：<ul>
<li>access_log off;</li>
</ul>
</li>
<li>如果使用默认的combined格式的日志记录，可以使用以下示例：<ul>
<li>access_log &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;access.log;</li>
<li>access_log &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;access.log combined;</li>
</ul>
</li>
<li>如果使用自定义格式，示例如下：<ol>
<li>log_format mylogformat ‘$remote_addr - $remote_user [$time_local] “$request” $status $body_bytes_sent “$http_referer” “$http_user_agent” $http_x_forwarded_for’;</li>
<li>access_log &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;access.log mylogformat buffer&#x3D;32k;</li>
</ol>
</li>
</ol>
<h4 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h4><h5 id="最基本配置"><a href="#最基本配置" class="headerlink" title="最基本配置"></a>最基本配置</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    upstream test_server &#123;</span><br><span class="line">        server 192.169.10.129:9501;</span><br><span class="line">        server 192.169.10.129:9502;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        location /test &#123;</span><br><span class="line">            proxy_pass http://test_server;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="进阶参数"><a href="#进阶参数" class="headerlink" title="进阶参数"></a>进阶参数</h5><p>说明：weight 值越大，访问频率越高</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">upstream test_server &#123;</span><br><span class="line">     server 192.169.10.129:9501 weight=5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://juejin.cn/post/6970201759595626509">nginx安装与插件</a></li>
<li><a href="http://static.kancloud.cn/songshijie/architect/1706995">Nginx</a></li>
<li><a href="https://haicoder.net/nginx/nginx-tutorial.html">Nginx教程</a></li>
</ol>
]]></content>
      <categories>
        <category>中间件</category>
        <category>网关</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis原理介绍、备忘录等</title>
    <url>/2023/05/28/redis-notes/</url>
    <content><![CDATA[<h2 id="软件介绍"><a href="#软件介绍" class="headerlink" title="软件介绍"></a>软件介绍</h2><blockquote>
<p>Redis（REmote DIctionary Server的缩写）即远程字典服务器，采用字典结构以键值对的形式存储数据。使用C语言编写的，最初的设计目的是为了作为数据库来使用，随着其优秀的性能和稳定性，更多的被用来作为缓存和消息队列使用【我个人接触最多的使用方式是：分布式锁和缓存】。</p>
</blockquote>
<h2 id="内容简介"><a href="#内容简介" class="headerlink" title="内容简介"></a>内容简介</h2><ul>
<li>数据结构、常用命令、key淘汰及持久化策略</li>
<li>Redis普通、管道、事务及Lua脚本命令的区别</li>
</ul>
<span id="more"></span>

<h2 id="数据结构、常用命令、key淘汰及持久化策略"><a href="#数据结构、常用命令、key淘汰及持久化策略" class="headerlink" title="数据结构、常用命令、key淘汰及持久化策略"></a>数据结构、常用命令、key淘汰及持久化策略</h2><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><blockquote>
<p>Redis中每个键都有存储一个明确的类型，除了通用的命令；其它的专属类型命令滥用会导致报错（例如：用字符串类型的命令去操作散列类型的key）。</p>
</blockquote>
<p><strong>Redis常见的数据类型，详细说明参考 《Redis入门指南（第二版）.pdf》</strong>：</p>
<ol>
<li>字符串类型（string）：理论上所有类型都可以用字符串类型存储，区别在于字符串内容的组织方式（<strong>且由于无法支持对单个字段的原子性操作导致竞态问题</strong>）；整数，浮点数、bit位都是以字符串形式存储的。</li>
<li>散列类型（hash）：和Redis本身一样采用KV形式的字典结构，区别是K最多能存储2<del>32</del>个，V只能是字符串类型，不能嵌套【事实上，Redis的所有数据类型都不支持嵌套】。</li>
<li>队列类型（list）：可以用来存储一个有序的字符串列表（<strong>顺序不可调整</strong>），底层采用的数据结构是双向链表。优点是两段添加元素非常快，代价是下标方式获取元素较慢。同样最多能存储2<del>32</del><br>个元素。通过不通的PUSH和POP组合可以形成栈或队列，常用来记录日志，或作为消息队列。</li>
<li>集合类型（set）：集合是无序的，且元素具有唯一性；数据结构上采用值为空的HashTable实现的，查询非常快捷，且支持集合之间的并、交和差集运算。</li>
<li>有序集合类型（zset）：在集合的基础上为每一个元素都关联了一个得分字段（score），通过分数对集合进行排序，达到和列表同样的效果-有序性，且<strong>顺序可以根据score进行调整</strong>。</li>
</ol>
<blockquote>
<p><a href="https://redis.io/commands/">官方命令文档</a>，<strong>Redis命令之于Redis</strong> 就像 <strong>SQL之于关系型DB</strong>；官方文档提供了100+的命令，常用的只有<strong>十几个</strong>而已。</p>
<ul>
<li>官方提供的所有单个redis命令都是原子性操作。</li>
</ul>
</blockquote>
<h4 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h4><ul>
<li>常用指令：</li>
</ul>
<ol>
<li><p>EXISTS <em>key</em><br>判断key是否存在，存在返回1；否则返回0。</p>
</li>
<li><p>KEYS <em>pattern</em><br>查询符合规则的所有key列表，pattern为通配符格式。<br>注意：<strong>该命令会扫描所有的key存在严重的性能问题，生产环境是禁止使用的</strong>。</p>
</li>
<li><p>SCAN  <em>cursor</em> [<em>MATCH</em> <em>pattern</em>] [<em>COUNT</em> <em>count</em>] [<em>TYPE</em> <em>type</em>]<br>此命令可以理解为对KEYS命令的补充和使用的优化<br>注意：** <em>count</em>指的不是每次返回的记录条数，而是服务器要遍历的槽位数（需要结合HashTable的数据结构理解）；<em>cursor</em>很重要，用来记录完成遍历的槽位，初始为0**。</p>
</li>
<li><p>DEL <em>key</em><br>删除key，删除存在的key则返回1；否则返回0。<br>注意：删除key命令不支持多个key，可以通过编程方式实现批量删除。</p>
</li>
<li><p>TYPE <em>key</em><br>判断key存储的值类型，返回Redis已支持的数据类型。</p>
</li>
<li><p>EXPIRE <em>key</em> <em>seconds</em><br>设置过期时间，设置成功返回1，返回0表示键不存在，或设置失败。<br>注意：<strong>类似的命令还有PEXPIRE，单位为毫秒</strong>。</p>
</li>
<li><p>TTL <em>key</em><br>查看一个键还有多久过期，单位为秒；当键不存在时返回-2；当键没有设置过期时间时返回-1。<br>注意：<strong>类似的命令还有PTTL，单位为毫秒</strong>。</p>
</li>
<li><p>PERSIST <em>key</em><br>取消键的过期时间设置，取消成功返回1，当键不存在或者键原来就没有过期时间时返回0。</p>
</li>
<li><p>WATCH <em>key</em><br>监视一个键的值是否变化，通常配合事务一起用（仅作了解）<br>注意：<strong>WATCH监视的是键的值，当过期键失效时并不会触发WATCH动作</strong>。</p>
</li>
<li><p>OBJECT ENCODING <em>key</em><br>查看一个键的值，在Redis内部的数据结构。</p>
</li>
</ol>
<ul>
<li>进阶指令</li>
</ul>
<ol start="11">
<li>redis-cli -h <em>127.0.0.1</em> -p <em>6379</em> –bigkeys -i <em>0.1</em><br>官方扫描redis大key的方法：每隔100条指令休眠 <em>0.1s</em>，避免线上的ops太高</li>
</ol>
<h4 id="字符串类型命令"><a href="#字符串类型命令" class="headerlink" title="字符串类型命令"></a>字符串类型命令</h4><ul>
<li>常用命令：</li>
</ul>
<ol>
<li><p>SET <em>key</em> <em>value</em><br>设置成功返回 <strong>OK</strong></p>
</li>
<li><p>MSET <em>key</em> <em>value</em> [<em>key</em> <em>value</em> …]<br>批量设置KV</p>
</li>
<li><p>SETNX <em>key</em> <em>value</em><br>如果字段已经存在则不执行任何操作且返回0；如果不存在和SET相同且返回1。<br>注意：逻辑上可以理解为 <strong>EXISTS + SET</strong> 命令的组合；<strong>由于其原子操作特性，经常被用来作为分布式锁的操作</strong>。</p>
</li>
<li><p>GET <em>key</em></p>
</li>
<li><p>MGET <em>key</em> [<em>key</em> …]<br>批量查询key</p>
</li>
<li><p>INCR &#x2F; DECR <em>key</em><br>自增&#x2F;递减操作<br>注意：<strong>由于其原子操作特性，经常被用来实现限流</strong>。</p>
</li>
<li><p>INCRBY &#x2F; DECRBY <em>key</em> <em>increment</em><br>可以设置自增&#x2F;自减的步长</p>
</li>
<li><p>INCRBYFLOAT &#x2F; DECRBYFLOAT <em>key</em> <em>increment</em><br>经过测试，如果对整数 自增&#x2F;自减 小数数后便不能再使用 <strong>INCR&#x2F;DECR</strong> 或 <strong>INCRBY&#x2F;DECRBY</strong> 进行操作了（因为 <strong>字符串就不再可以转成整数</strong>）。</p>
</li>
<li><p>APPEND <em>key</em> <em>value</em><br>向末尾追加字符串</p>
</li>
<li><p>STRLEN <em>key</em><br>统计字符串的长度</p>
</li>
</ol>
<ul>
<li>位图命令：</li>
</ul>
<ol start="11">
<li><p>SETBIT <em>key</em> <em>offset</em> <em>value</em><br>相当于对字符串类型的字节级别的细部操作，<em>offset</em>：高&#x3D;&gt;低（从0开始），<em>value</em> 为 [<em>0</em>|<em>1</em>]。</p>
</li>
<li><p>GETBIT <em>key</em> <em>offset</em><br>查询指定的bit值，返回 [<em>0</em>|<em>1</em>]</p>
</li>
<li><p>BITCOUNT <em>key</em> [<em>start</em>] [<em>end</em>]<br>开始结束范围内值为1的个数</p>
</li>
<li><p>BITOP</p>
</li>
</ol>
<h4 id="散列类型命令"><a href="#散列类型命令" class="headerlink" title="散列类型命令"></a>散列类型命令</h4><ul>
<li>常用命令：</li>
</ul>
<ol>
<li><p>HEXISTS <em>key</em> <em>field</em><br>判断该key下field字段是否存在。</p>
</li>
<li><p>HSET <em>key</em> <em>field</em> <em>value</em><br>Redis中所有SET不区分插入还是更新，当插入成功时，返回1；更新时，返回0。</p>
</li>
<li><p>HMSET <em>key</em> <em>field</em> <em>value</em> [<em>field</em> <em>value</em> …]</p>
</li>
<li><p>HGET <em>key</em> <em>field</em></p>
</li>
<li><p>HMGET <em>key</em> <em>field</em> [<em>field</em> …]</p>
</li>
<li><p>HGETALL <em>key</em><br>返回key下所有KV，单行为K，双行为V。</p>
</li>
<li><p>HDEL <em>key</em> <em>field</em> [<em>field</em> …]<br>删除一个或多个字段</p>
</li>
<li><p>HSETNX <em>key</em> <em>field</em> <em>value</em><br>作用同SETNX</p>
</li>
<li><p>HINCRBY <em>key</em> <em>field</em> <em>increment</em><br>可以设置字段递增&#x2F;递减的步长<br>注意：没有HDECRBY，可用 <em><strong>-increment</strong></em> 代替</p>
</li>
<li><p>HKEYS &#x2F; HVALS <em>key</em><br>只获取所有的字段名&#x2F;字段值</p>
</li>
</ol>
<h4 id="列表类型命令"><a href="#列表类型命令" class="headerlink" title="列表类型命令"></a>列表类型命令</h4><ul>
<li>常用命令：</li>
</ul>
<ol>
<li><p>LPUSH &#x2F; RPUSH <em>key</em> <em>value</em> [<em>value</em> …]<br>向列表两端添加元素，返回值表示添加元素后的列表长度。</p>
</li>
<li><p>LPOP &#x2F; RPOP <em>key</em> <em>count</em><br>从列表两端弹出元素，count为一次性弹出数量，当不输入count时，默认为1；弹出的元素是有序的。<br>注意：<em><strong>BLPOP &#x2F; BRPOP 当列表中没有元素时，会阻塞当前线程，通常用来作为消息队里使用</strong></em>。</p>
</li>
<li><p>BLPOP &#x2F; BRPOP <em>key</em> <em>timeout</em><br>用法与 LPOP &#x2F; RPOP 一致，timeout的单位秒；表示超过timeout秒后还没获取到元素就返回空。<br>注意：<strong>当timeout&#x3D;0，表示如果获取不到元素就一直阻塞下去，知道接收到元素位置</strong>。</p>
</li>
<li><p>LLEN <em>key</em><br>返回列表的长度，当key不存在时返回0（由于列表只能两端操作，故length是维护的一个字段，查询效率为O<del>(1)</del>）。</p>
</li>
<li><p>LRANGE <em>key</em> <em>start</em> <em>stop</em><br>返回start~stop之间的列表<br>注意：<strong>start、stop的都是从0开始的</strong>；<strong>start、stop支持负索引，表示从右边开始</strong>；**[start, stop]是闭区间<strong>；</strong>如果start&gt;<br>stop则返回空列表，如果stop超过列表长度则以列表长度为准**。</p>
</li>
<li><p>LTRIM <em>key</em> <em>start</em> <em>stop</em><br>只保留指定索引范围内的元素，其它的都删掉<br>注意：<strong>长用来维持列表的总数，例如：只记录最近100条日志记录</strong></p>
</li>
<li><p>LREM <em>key</em> <em>count</em> <em>value</em><br><strong>删除列表中指定值的元素，返回实际删除的元素个数</strong><br>当 <strong>count&gt;0</strong> 时，从列表左边开始删除count个值为value的元素；<br>当 <strong>count&#x3D;0</strong> 时，从列表中删除所有值为value的元素；<br>当 <strong>count&lt;0</strong> 时，从列表右边开始删除count个值为value的元素；</p>
</li>
<li><p>LINDEX <em>key</em> <em>index</em><br>查询指定索引位置的元素<br>注意：<strong>index同样支持负值，表示从右边开始计数</strong></p>
</li>
<li><p>LINDEX <em>key</em> <em>index</em> <em>value</em><br>设置指定索引位置的元素值<br>注意：**由双向链表的特性导致查询的效率并不高，设置的效率O<del>(1)</del>**。</p>
</li>
<li><p>RPOPLPUSH <em>source</em> <em>destination</em><br>该命令会从source列表的右边弹出元素，添加到destination列表的左边，整个动作是原子性的。<br>注意：当 <strong>source &#x3D; destination</strong> 时，可以实现轮询任务。</p>
</li>
</ol>
<h4 id="集合类型命令"><a href="#集合类型命令" class="headerlink" title="集合类型命令"></a>集合类型命令</h4><ul>
<li>常用命令：</li>
</ul>
<ol>
<li><p>SADD &#x2F; SREM <em>key</em> <em>member</em> [<em>member</em> …]<br>向集合中添加&#x2F;删除一个或多个元素，当元素已存在&#x2F;不存在则忽略本次操作，返回值为有效插入&#x2F;删除的元素个数。</p>
</li>
<li><p>SMEMBERS <em>key</em><br>返回集合中所有元素</p>
</li>
<li><p>SISMEMBER <em>key</em> <em>member</em><br>判断元素是否存在，key或member不存在时返回0；否则返回1</p>
</li>
<li><p>SDIFF &#x2F; SINTER &#x2F; SUNION <em>key</em> [<em>key</em> …]<br>集合差、交、并集运算，返回运算后的集合<br>注意：<strong>当其中某个key对应的集合不存在时，则当成空集合{}处理</strong></p>
</li>
<li><p>SCARD <em>key</em><br>获取集合中元素的个数</p>
</li>
<li><p>SDIFFSTORE &#x2F; SINTERSTORE &#x2F; SUNIONSTORE <em>destination</em> <em>key</em> [<em>key</em> …]<br>用法和SDIFF &#x2F; SINTER &#x2F; SUNION ，区别在于可以把结果存在destination中，返回新集合的元素个数。</p>
</li>
<li><p>SRANDMEMBER <em>key</em> [<em>count</em>]<br><strong>随机获取count个的集合元素，count为空则默认为1</strong><br>当 <strong>count&gt;&#x3D;0</strong> 时，随机从集合中获取 min( <em>count</em> , <em>length</em> ) 个不重复元素<br>当 <strong>count&lt;0</strong> 时，随机从集合中获取 min( |<em>count</em>| , <em>length</em> ) 个可重复元素<br>注意：这里的随机是伪随机，由集合的数据结构决定的；<strong>集合采用典型的数组+链表（拉链法）形势存储。随机只在数组层面，当同一个hash桶中元素较多是，则其中的元素被选中的几率就会较低</strong>。</p>
</li>
<li><p>SPOP <em>key</em><br>从集合中 <em><strong>随机</strong></em> 弹出一个元素（数据结构导致的无序性），返回被弹出的元素。</p>
</li>
</ol>
<h4 id="有序集合类型命令"><a href="#有序集合类型命令" class="headerlink" title="有序集合类型命令"></a>有序集合类型命令</h4><ul>
<li>常用命令：</li>
</ul>
<ol>
<li><p>ZADD <em>key</em> <em>score</em> <em>member</em> [<em>score</em> <em>member</em>]<br>向有序集合中增加一个元素和该元素的分数，如果该元素已经存在则替换原有元素的分数。<br>注意：score分数可以支持双精度浮点数（+inf&#x2F;-inf表示正无穷，负无穷）。</p>
</li>
<li><p>ZSCORE <em>key</em> <em>member</em><br>获得元素分数，元素不存在的时，返回nil</p>
</li>
<li><p>ZRANGE &#x2F; ZREVRANGE <em>key</em> <em>start</em> <em>stop</em> [<em>WITHSCORES</em>]<br>按照元素分数<strong>从小到大</strong>或<strong>从大到小</strong>的顺序（如果分数相同则按照ascii码顺序从小到大排列）返回索引从 start 到 stop 之间的所有元素，如果需要同时返回分数则添加WITHSCORES参数。<br>注意：<strong>时间复杂度为O(log n+m)，n为集合元素个数，m为返回的元素个数</strong>。</p>
</li>
<li><p>ZRANGEBYSCORE &#x2F; ZREVRANGEBYSCORE <em>key</em> <em>min</em> <em>max</em> [<em>WITHSCORES</em>] [<em>LIMIT</em> <em>offset</em> <em>count</em>]<br>按照元素分数<strong>从小到大</strong>或<strong>从大到小</strong>的顺序（如果分数相同则按照ascii码顺序从小到大排列）返回索引从 start 到 stop 之间的所有元素分值在 min 和 max 之间（包含 min 和 max）的元素。</p>
</li>
<li><p>ZINCRBY <em>key</em> <em>increment</em> <em>member</em><br>增加某个元素的分支，步长为 increment 。</p>
</li>
<li><p>ZCARD <em>key</em><br>获得集合中元素的个数</p>
</li>
<li><p>ZCOUNT  <em>key</em> <em>min</em> <em>max</em><br>获得指定分数范围内的元素个数，[<em>min</em>, <em>max</em>] 闭区间。</p>
</li>
<li><p>ZREM <em>key</em> <em>member</em> [<em>member</em> …]<br>删除一个或多个元素，返回删除成功的元素个数</p>
</li>
<li><p>ZREMRANGEBYRANK <em>key</em> <em>start</em> <em>stop</em><br>删除处于索引 [<em>start</em>, <em>stop</em>] 范围内的所有元素，返回删除的元素数量</p>
</li>
<li><p>ZREMRANGEBYSCORE <em>key</em> <em>min</em> <em>max</em><br>删除处于分数 [<em>min</em>, <em>max</em>] 范围内的所有元素，返回删除的元素数量</p>
</li>
<li><p>ZRANK <em>key</em> <em>member</em><br>获得元素排名，从小到大排列，返回从0开始的排名</p>
</li>
<li><p>ZINTERSTORE <em>destination</em> <em>numkeys</em> <em>key</em> [<em>key</em> …] [<em>WEIGHTS</em> <em>weight</em> [<em>weight</em> …]] [<em>AGGREGATE</em> <em>SUM</em> | *<br>MIN* | <em>MAX</em>]<br>计算有序集合交集，结果存入destination中。</p>
</li>
</ol>
<h4 id="HyperLogLog命令"><a href="#HyperLogLog命令" class="headerlink" title="HyperLogLog命令"></a>HyperLogLog命令</h4><ol>
<li><p>PFADD <em>key</em> [<em>element</em> [<em>element</em> …]]<br>向集合中添加一个或多个元素，返回添加成功的元素个数<br>注意：<strong>HyperLogLog属于Set的高级数据结构，主要用来对大量数据做统计（例如：网站的UV，PV数据统计），存在一定误差。好处是相对Set结构节省了大量的存储空间</strong></p>
</li>
<li><p>PFCOUNT <em>key</em><br>统计元素个数</p>
</li>
<li><p>PFMERGE <em>destkey</em> <em>sourcekey</em> [<em>sourcekey</em> …]<br>累加指定一个或多个源key的元素个数，存放到目标key中</p>
</li>
</ol>
<h4 id="GeoHash命令（地图坐标）"><a href="#GeoHash命令（地图坐标）" class="headerlink" title="GeoHash命令（地图坐标）"></a>GeoHash命令（地图坐标）</h4><ol>
<li><p>GEOADD <em>key</em> <em>longitude</em> <em>latitude</em> <em>member</em> [<em>longitude</em> <em>latitude</em> <em>member</em> …]<br>添加GEO坐标键值</p>
</li>
<li><p>GEODIST <em>key</em> <em>member1</em> <em>member2</em> [<em>M</em>|<em>KM</em>|<em>FT</em>|<em>MI</em>]<br>计算两个坐标点之间的距离，M：米，KM：千米，FT：英里，MI：尺</p>
</li>
<li><p>GEOPOS <em>key</em> <em>member</em> [<em>member</em> …]<br>获取一个或多个元素的经纬度坐标<br>注意：<strong>获取到的经纬度和add的有些区别，是因为一维映射存在一定精度损失</strong></p>
</li>
<li><p>GEOHASH  <em>key</em> <em>member</em> [<em>member</em> …]<br>获取经纬度的一维映射值（base32编码）<br>注意：<strong>此值可以到<a href="http://geohash.org/$%7Bhash%7D%E8%A7%A3%E7%A0%81%E5%B9%B6%E6%9F%A5%E7%9C%8B%E5%9C%B0%E5%9B%BE%E4%B8%8A%E7%9A%84%E5%AE%9E%E9%99%85%E5%9D%90%E6%A0%87">http://geohash.org/${hash}解码并查看地图上的实际坐标</a></strong></p>
</li>
<li><p>GEORADIUS  <em>key</em> <em>longitude</em> <em>latitude</em> <em>radius</em> <em>M</em>|<em>KM</em>|<em>FT</em>|<em>MI</em> [<em>WITHCOORD</em>] [<em>WITHDIST</em>] [<em>WITHHASH</em>] [*<br>COUNT* <em>count</em> [<em>ANY</em>]] [<em>ASC</em>|<em>DESC</em>]<br>查询距离指定坐标 <em>radius</em> 范围内符合条件的所有元素</p>
</li>
<li><p>GEORADIUSBYMEMBER <em>key</em> <em>member</em> <em>radius</em> <em>M</em>|<em>KM</em>|<em>FT</em>|<em>MI</em> [<em>WITHCOORD</em>] [<em>WITHDIST</em>] [<em>WITHHASH</em>] [<em>COUNT</em> *<br>count* [<em>ANY</em>]] [<em>ASC</em>|<em>DESC</em>] [<em>STORE</em> <em>key</em>] [<em>STOREDIST</em> <em>key</em>]<br>和上面GEORADIUS的用法一致，距离计算对象为内部元素</p>
</li>
</ol>
<h4 id="排序命令"><a href="#排序命令" class="headerlink" title="排序命令"></a>排序命令</h4><ol>
<li>SORT … BY ASC | DESC LIMIT</li>
</ol>
<h3 id="事务特性"><a href="#事务特性" class="headerlink" title="事务特性"></a>事务特性</h3><p>Redis事务无法满足ACID原则中的一致性和持久性原则。当Redis开启事务后，遇到以下两种场景时的处理：</p>
<ol>
<li>语法错误：（可以静态检测出来的），将放弃所有操作；保证了事务的原子性。</li>
<li>运行错误：（例如：操作命令与类型不匹配），将记录执行错误命令的后续命令且Redis不提供 <strong>rollback</strong> 回滚操作；无法保证一致性。</li>
</ol>
<p>Redis事务的弊端：</p>
<ol>
<li>所有命令一起执行，无法把上一个命令的结果作为下一个命令的入参。</li>
<li>无法再多个命令之间穿插业务代码（<em>待定</em>…）。</li>
<li>运行出现错误后通过 <strong>rollback</strong> 恢复，需要自行处理。</li>
</ol>
<p><em><strong>官方推荐用redis lua执行事务既支持原子性操作，也支持报错回滚</strong></em>。</p>
<ul>
<li>关于普通命令、管道命令、事务命令以及lua脚本命令之间的区别，参考：<a href="#command_distinction">普通命令、管道命令、事务命令及lua脚本命令的区别</a></li>
</ul>
<h3 id="订阅发布"><a href="#订阅发布" class="headerlink" title="订阅发布"></a>订阅发布</h3><p><strong>订阅&#x2F;发布</strong> 模式中包含两个角色，分别为发布者和订阅者。订阅者可以订阅一个或多个频道（channel），而发布者可以向指定的频道发送消息，所有订阅此频道的订阅者都会收到此消息。</p>
<h4 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h4><ul>
<li><p>PUBLISH <em>channel</em> <em>message</em><br>发布消息命令：channel为频道（mq里面一般叫topic），message为发送的消息内容需要用引号括起来。发布消息成功后返回值为收到消息的订阅者数量。<br>注意：<strong>Redis中发布的消息即使没有订阅者消费，不会被持久化</strong>。</p>
</li>
<li><p>SUBSCRIBE <em>channel</em> [<em>channel</em> …]<br>订阅一个或多个频道<br>注意：收到的消息分三行，第一行为消息类型，有【subscribe | message | unsubscribe】三种可能性。</p>
</li>
<li><p>PSUBSCRIBE <em>channel-pattern</em><br>支持通配符订阅</p>
</li>
<li><p>UNSUBSCRIBE [<em>channel</em> [<em>channel</em> …]]<br>取消一个或多个频道订阅，不填channel则表示取消所有订阅</p>
</li>
<li><p>PUNSUBSCRIBE [<em>channel-pattern</em> [<em>channel-pattern</em> …]]<br>支持通配符取消订阅</p>
</li>
</ul>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 备份redis的两种方式</span></span><br><span class="line">redis 127.0.0.1:6379&gt; SAVE </span><br><span class="line">OK</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">127.0.0.1:6379&gt; bgsave</span><br><span class="line">Background saving started</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看备份目录（例：dump.rdb）</span></span><br><span class="line">127.0.0.1:6379&gt; config get <span class="built_in">dir</span></span><br><span class="line">1) <span class="string">&quot;dir&quot;</span></span><br><span class="line">2) <span class="string">&quot;/usr/local/redis-6.2.6/src&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复数据，只需要把恢复数据的文件放到$(config get dir)对应的目录下&amp;&amp;重启服务即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置登录密码（这种方式，重启服务端后就会失效）</span></span><br><span class="line">127.0.0.1:6379&gt; config <span class="built_in">set</span> requirepass 123456</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; config get <span class="built_in">dir</span></span><br><span class="line">(error) NOAUTH Authentication required.</span><br><span class="line">127.0.0.1:6379&gt; auth 123456</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; config get <span class="built_in">dir</span></span><br><span class="line">1) <span class="string">&quot;dir&quot;</span></span><br><span class="line">2) <span class="string">&quot;/usr/local/redis-6.2.6/src&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除登录密码（这种方式，重启服务端后就会失效）</span></span><br><span class="line">127.0.0.1:6379&gt; config <span class="built_in">set</span> requirepass <span class="string">&#x27;&#x27;</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; config get <span class="built_in">dir</span></span><br><span class="line">1) <span class="string">&quot;dir&quot;</span></span><br><span class="line">2) <span class="string">&quot;/usr/local/redis-6.2.6/src&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h3><p>根目录下redis.conf文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置登录密码，注意：行前不能有空格（指定配置文件，重启后也有效）</span></span><br><span class="line"><span class="comment"># requirepass foobared</span></span><br><span class="line">requirepass 123456</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改分区数量，默认为n=16，区间：[0,n-1]；当n=1时，只有一个分区</span></span><br><span class="line">databases 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定redis的端口</span></span><br><span class="line"><span class="comment"># bind 127.0.0.1 -::1  // 只允许回环网卡访问，即只允许本地客户端访问</span></span><br><span class="line"><span class="built_in">bind</span> * -::*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开放防火墙对应端口</span></span><br><span class="line">firewall-cmd --zone=public --add-port=6379/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<h3 id="持久化机制"><a href="#持久化机制" class="headerlink" title="持久化机制"></a>持久化机制</h3><p>为了防止数据因为故障而丢失，这种机制就叫持久化机制。Redis的持久化机制有两种（4.0+以后默认两种方式搭配使用）：</p>
<ul>
<li><strong>RDB：</strong> 内存数据的二进制序列化形式，格式上非常紧凑。</li>
<li><strong>AOF：</strong> 内存数据的修改修改指令记录，可能会随着时间变得非常庞大（通过重写的方式进行瘦身）。</li>
</ul>
<h4 id="RDB-Redis-DataBase"><a href="#RDB-Redis-DataBase" class="headerlink" title="RDB(Redis DataBase)"></a>RDB(Redis DataBase)</h4><p>RDB持久化是指在指定的时间间隔内将内存中的数据集快照写入磁盘。也是默认的持久化方式，这种方式是就是将内存中数据以快照的方式写入到二进制文件中,默认的文件名为dump.rdb。</p>
<h5 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h5><ol>
<li>开启子线程（save方式则直接在主线程中进行，无需开启子线程），接手快照持久化任务。</li>
<li>利用操作系统COW（copy on write）写时复制机制进行Redis进程共享数据段的读操作：<ol>
<li>内存数据都是由4k的数据页组成，当主线程发生对数据的写操作时，先把涉及到的页面复制一份，然后在上面进行修改操作。</li>
<li>由此可见占用的内存最大为快照的两倍，实际上会发生复制动作只有一些热数据。冷数据还是只有一份，所以内存占用一般都是小于2倍的。</li>
</ol>
</li>
<li>子线程在fork出来的瞬间，所看到的数据就已经固化了，这就是这种持久化方式也叫快照的原因。</li>
</ol>
<h5 id="触发方式"><a href="#触发方式" class="headerlink" title="触发方式"></a>触发方式</h5><h6 id="save命令"><a href="#save命令" class="headerlink" title="save命令"></a>save命令</h6><p>save命令：会阻塞主线程，期间redis无法处理其他命令，知道保存操作执行完成（注：如果已经存在dump.rdb文件则直接覆盖老的）。</p>
<p><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/redis/27e2a76dcafa471da0b1f8dfee652c62.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Ien6aaG6ZW_,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h6 id="bgsave命令"><a href="#bgsave命令" class="headerlink" title="bgsave命令"></a>bgsave命令</h6><p>bgsave命令：后台异步进行快照操作，快照同时还可以响应客户端请求（注：通过内部创建子线程方式执行保存操作，redis内部大多都采用bgsave命令；例如”自动触发”方式，就是采用bgsave命令实现的）。</p>
<p><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/redis/eae07e9f99194ec9a5fa52b34b668c0e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Ien6aaG6ZW_,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h6 id="自动触发"><a href="#自动触发" class="headerlink" title="自动触发"></a>自动触发</h6><p>自动触发：通过配置文件中的配置项实现定时快照。</p>
<p>save命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">################################ SNAPSHOTTING  ################################</span></span><br><span class="line"><span class="comment"># redis会在发生第二个参数指定个数的key发生变化的后第一个参数指定的描述后执行保存动作</span></span><br><span class="line"><span class="comment"># 保存database数据到磁盘，命令格式：</span></span><br><span class="line"><span class="comment"># save &lt;seconds&gt; &lt;changes&gt;</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># 通过设置空字符串参数禁用快照保存动作（或直接注释save行），如下：</span></span><br><span class="line"><span class="comment"># save &quot;&quot;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Unless specified otherwise, by default Redis will save the DB:</span></span><br><span class="line"><span class="comment">#   * After 3600 seconds (an hour) if at least 1 key changed</span></span><br><span class="line"><span class="comment">#   * After 300 seconds (5 minutes) if at least 100 keys changed</span></span><br><span class="line"><span class="comment">#   * After 60 seconds if at least 10000 keys changed</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 可以通过取消注释下面的三行来显式地设置这些内容</span></span><br><span class="line"><span class="comment"># save 3600 1</span></span><br><span class="line"><span class="comment"># save 300 100</span></span><br><span class="line"><span class="comment"># save 60 10000</span></span><br></pre></td></tr></table></figure>

<p>stop-writes-on-bgsave-error选项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认值为yes。当启用了RDB且最后一次后台保存数据失败，Redis是否停止接收数据。</span></span><br><span class="line"><span class="comment"># 这会让用户意识到数据没有正确持久化到磁盘上，否则没有人会注意到灾难（disaster）发生了。</span></span><br><span class="line"><span class="comment"># 如果Redis重启了，那么又可以重新开始接收数据了</span></span><br><span class="line">stop-writes-on-bgsave-error <span class="built_in">yes</span></span><br></pre></td></tr></table></figure>

<p>rdbcompression选项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认值是yes。对于存储到磁盘中的快照，可以设置是否进行压缩存储。</span></span><br><span class="line">rdbcompression <span class="built_in">yes</span></span><br></pre></td></tr></table></figure>

<p>rdbchecksum选项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认值是yes。在存储快照后，我们还可以让redis使用CRC64算法来进行数据校验，但是这样做会增加大约10%的性能消耗，如果希望获取到最大的性能提升，可以关闭此功能。</span></span><br><span class="line">rdbchecksum <span class="built_in">yes</span></span><br></pre></td></tr></table></figure>

<p>dbfilename参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置快照的文件名，默认是 dump.rdb</span></span><br><span class="line">dbfilename dump.rdb</span><br></pre></td></tr></table></figure>

<p>dir参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置快照文件的存放路径，这个配置项一定是个目录，而不能是文件名。</span></span><br><span class="line"><span class="built_in">dir</span> ./</span><br></pre></td></tr></table></figure>

<p>save命令与bgsave命令对比图：<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/redis/30524bce99a74791af9791d187445819.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Ien6aaG6ZW_,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h6 id="RDB的优势和劣势"><a href="#RDB的优势和劣势" class="headerlink" title="RDB的优势和劣势"></a>RDB的优势和劣势</h6><ol>
<li><p>优势</p>
<ul>
<li>RDB文件紧凑，全量备份，非常适合用于进行备份和灾难恢复。</li>
<li>生成RDB文件的时候，redis主进程会fork()一个子进程来处理所有保存工作，主进程不需要进行任何磁盘IO操作。</li>
<li>RDB 在恢复大数据集时的速度比 AOF 的恢复速度要快。</li>
</ul>
</li>
<li><p>劣势</p>
<ul>
<li>RDB快照是一次全量备份，存储的是内存数据的二进制序列化形式，存储上非常紧凑。当进行快照持久化时，会开启一个子进程专门负责快照持久化，子进程会拥有父进程的内存数据，父进程修改内存子进程不会反应出来，所以在快照持久化期间修改的数据不会被保存，可能丢失数据。</li>
</ul>
</li>
</ol>
<h4 id="AOF-Append-Only-File"><a href="#AOF-Append-Only-File" class="headerlink" title="AOF(Append Only File)"></a>AOF(Append Only File)</h4><p>全量备份总是耗时的，有时候我们提供一种更加高效的方式AOF，工作机制很简单，redis会将每一个收到的写命令都通过write函数追加到文件中。<br>通俗的理解就是日志记录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># aof策略的开关，可以与rdb同时工作（注：重启时优先从aof文件恢复，数据更完整）</span></span><br><span class="line">appendonly no</span><br><span class="line"><span class="comment"># aof策略的文件名 (默认: &quot;appendonly.aof&quot;，目录同样通过dir参数配置)</span></span><br><span class="line">appendfilename <span class="string">&quot;appendonly.aof&quot;</span></span><br><span class="line"><span class="comment"># aof策略的记录间隔</span></span><br><span class="line"><span class="comment"># 例： always   每次就该都记录</span></span><br><span class="line"><span class="comment">#     everysec 每秒一次</span></span><br><span class="line"><span class="comment">#     no       从不同步</span></span><br><span class="line">appendfsync everysec</span><br><span class="line"><span class="comment"># 当执行bgrewriteaof时，并发执行aof会发生磁盘竞争问题；</span></span><br><span class="line"><span class="comment"># 当no-appendfsync-on-rewrite=no时，相当于执行bgrewriteaof期间appendonly=no；aof只写数据到AOF重写缓存区（aof_rewrite_bug）不写到磁盘，如果此时redis进行挂了则会导致大量数据丢失</span></span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"><span class="comment"># 控制AOF重写缓存区（aof_rewrite_bug）每次只能写32m的数据到磁盘，避免在重写期间大量数据写到aof_rewrite_bug，同步到磁盘是瞬间大量的磁盘IO造成硬盘阻塞</span></span><br><span class="line">aof-rewrite-incremental-fsync <span class="built_in">yes</span></span><br><span class="line"><span class="comment"># 同上RDB方式</span></span><br><span class="line">rdb-save-incremental-fsync <span class="built_in">yes</span></span><br><span class="line"><span class="comment"># 当AOF文件大小超过上一次重写时的AOF文件大小的百分之多少时会再次进行重写，如果之前没有重写过，则以启动时的AOF文件大小为依据</span></span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line"><span class="comment"># 允许重写的最小AOF文件大小配置写入AOF文件后，要求系统刷新硬盘缓存的机制</span></span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line"><span class="comment"># redis在恢复时，会忽略最后一条可能存在问题的指令。默认值yes。即在aof写入时，可能存在指令写错的问题(突然断电，写了一半)，这种情况下，yes会log并继续，而no会直接恢复失败.</span></span><br><span class="line">aof-load-truncated <span class="built_in">yes</span></span><br></pre></td></tr></table></figure>

<h5 id="实现原理-1"><a href="#实现原理-1" class="headerlink" title="实现原理"></a>实现原理</h5><h6 id="实现原理图"><a href="#实现原理图" class="headerlink" title="实现原理图"></a>实现原理图</h6><p><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/redis/cf41bd4c2ccf4df4ba23abb970b9fa56.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Ien6aaG6ZW_,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"> </p>
<ul>
<li>每当有一个写命令过来时，就直接保存在我们的AOF文件中。</li>
</ul>
<h6 id="文件重写原理"><a href="#文件重写原理" class="headerlink" title="文件重写原理"></a>文件重写原理</h6><p>AOF的方式也同时带来了另一个问题。持久化文件会变的越来越大。为了压缩aof的持久化文件。redis提供了bgrewriteaof命令。将内存中的数据以命令的方式保存到临时文件中，同时会fork出一条新进程来将文件重写。<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/redis/518a858e0b474a18bbaa3eaf75a4b964.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Ien6aaG6ZW_,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>重写aof文件的操作，并没有读取旧的aof文件，而是将整个内存中的数据库内容用命令的方式重写了一个新的aof文件，这点和快照有点类似。</p>
<ol>
<li>fork一个子线程对内存中的数据遍历生成对应的指令记录（A-&gt;B-&gt;A改写成A；失效的数据将不记录在内，能显著减少AOF文件的体积）。</li>
<li>把发生在遍历期间的增量旧的AOF日志追加到新生成的AOF文件中。</li>
<li>用新生成的AOF文件替换旧的AOF文件。</li>
</ol>
<h5 id="触发方式-1"><a href="#触发方式-1" class="headerlink" title="触发方式"></a>触发方式</h5><h6 id="AOF也有三种触发机制"><a href="#AOF也有三种触发机制" class="headerlink" title="AOF也有三种触发机制"></a>AOF也有三种触发机制</h6><ol>
<li>每修改同步always：同步持久化 每次发生数据变更会被立即记录到磁盘 性能较差但数据完整性比较好</li>
<li>每秒同步everysec：异步操作，每秒记录 如果一秒内宕机，有数据丢失</li>
<li>不同no：从不同步<br>   <img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/redis/dc8bac3589da455da97aa45410b30c55.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Ien6aaG6ZW_,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></li>
</ol>
<h6 id="AOF的优势和劣势"><a href="#AOF的优势和劣势" class="headerlink" title="AOF的优势和劣势"></a>AOF的优势和劣势</h6><ol>
<li>优势<ol>
<li>AOF可以更好的保护数据不丢失，一般AOF会每隔1秒，通过一个后台线程执行一次fsync操作，最多丢失1秒钟的数据。（2）AOF日志文件没有任何磁盘寻址的开销，写入性能非常高，文件不容易破损。</li>
<li>AOF日志文件即使过大的时候，出现后台重写操作，也不会影响客户端的读写。</li>
<li>AOF日志文件的命令通过非常可读的方式进行记录，这个特性非常适合做灾难性的误删除的紧急恢复。比如某人不小心用flushall命令清空了所有数据，只要这个时候后台rewrite还没有发生，那么就可以立即拷贝AOF文件，将最后一条flushall命令给删了，然后再将该AOF文件放回去，就可以通过恢复机制，自动恢复所有数据</li>
</ol>
</li>
<li>劣势<ol>
<li>对于同一份数据来说，AOF日志文件通常比RDB数据快照文件更大</li>
<li>AOF开启后，支持的写QPS会比RDB支持的写QPS低，因为AOF一般会配置成每秒fsync一次日志文件，当然，每秒一次fsync，性能也还是很高的</li>
<li>以前AOF发生过bug，就是通过AOF记录的日志，进行数据恢复的时候，没有恢复一模一样的数据出来。</li>
</ol>
</li>
</ol>
<h4 id="RDB和AOF该如何选择？"><a href="#RDB和AOF该如何选择？" class="headerlink" title="RDB和AOF该如何选择？"></a>RDB和AOF该如何选择？</h4><p>选择的话，两者加一起才更好。因为两个持久化机制你明白了，剩下的就是看自己的需求了，需求不同选择的也不一定，但是通常都是结合使用。有一张图可供总结：<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/redis/309f6de9ea6b4b8eb972e2fc2e469f35.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Ien6aaG6ZW_,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h4 id="RDB-AOF混合持久化（redis-4-0-提供）"><a href="#RDB-AOF混合持久化（redis-4-0-提供）" class="headerlink" title="RDB-AOF混合持久化（redis 4.0+提供）"></a>RDB-AOF混合持久化（redis 4.0+提供）</h4><p>略，待补充…</p>
<h3 id="内存回收策略和Key过期策略"><a href="#内存回收策略和Key过期策略" class="headerlink" title="内存回收策略和Key过期策略"></a>内存回收策略和Key过期策略</h3><h4 id="限制内存使用"><a href="#限制内存使用" class="headerlink" title="限制内存使用"></a>限制内存使用</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 我们都知道如果我们要设置 Redis 的最大内存大小只需要在配置文件redis.conf 中配 # 置一行 maxmemory xxx 即可，或者我们通过 config set 命令在运行时动态配置 </span></span><br><span class="line"><span class="comment"># Redis 的内存大小。</span></span><br><span class="line">maxmemory &lt;bytes&gt;</span><br><span class="line"><span class="comment"># 那么当 Redis 内存不够的时候，我们要知道 Redis 是根据什么策略来淘汰数据的</span></span><br><span class="line"><span class="comment"># 我们可以看到策略的值由如下几种：</span></span><br><span class="line"><span class="comment">#   volatile-lru: 在所有带有过期时间的 key 中使用 LRU 算法淘汰数据；</span></span><br><span class="line"><span class="comment">#   alkeys-lru: 在所有的 key 中使用最近最少被使用 LRU 算法淘汰数据，保证新加入的数据正常；</span></span><br><span class="line"><span class="comment">#   volatile-random: 在所有带有过期时间的 key 中随机淘汰数据；</span></span><br><span class="line"><span class="comment">#   allkeys-random: 在所有的 key 中随机淘汰数据；</span></span><br><span class="line"><span class="comment">#   volatile-ttl: 在所有带有过期时间的 key 中，淘汰最早会过期的数据；</span></span><br><span class="line"><span class="comment">#   noeviction: 不回收，当达到最大内存的时候，在增加新数据的时候会返回 error，不会清除旧数据，这是 Redis 的默认策略；</span></span><br><span class="line"><span class="comment"># volatile-lru,volatile-random,volatile-ttl这几种情况在Redis中没有带有过期 Key 的时候跟 noeviction 策略是一样的。淘汰策略是可以动态调整的，调整的时候是不需要重启的，原文是这样说的，我们可以根据自己 Redis 的模式来动态调整策略</span></span><br><span class="line">maxmemory-policy noeviction</span><br><span class="line"><span class="comment"># LRU，LFU算法的近似采样数量；之所以不采样实际的 LRU 算法，是因为会耗费很多的内存</span></span><br><span class="line">maxmemory-samples 5</span><br></pre></td></tr></table></figure>

<h4 id="策略的执行过程"><a href="#策略的执行过程" class="headerlink" title="策略的执行过程"></a>策略的执行过程</h4><ol>
<li>客户端运行命令，添加数据申请内存；</li>
<li>Redis 会检查内存的使用情况，如果已经超过的最大限制，就是根据配置的内存淘汰策略去淘汰相应的 key，从而保证新数据正常添加；</li>
<li>继续执行命令。</li>
</ol>
<h5 id="LRU缓存"><a href="#LRU缓存" class="headerlink" title="LRU缓存"></a>LRU缓存</h5><p>像浏览器的缓存策略、memcached的缓存策略都是使用LRU这个算法，LRU算法会将近期最不会访问的数据淘汰掉。LRU如此流行的原因是实现比较简单，而且对于实际问题也很实用，良好的运行时性能，命中率较高。下面谈谈如何实现LRU缓存：<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/redis/857b2f07dc88460aa119b2a8130a1c17.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Ien6aaG6ZW_,size_12,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<ul>
<li>新数据插入到链表头部</li>
<li>每当缓存命中（即缓存数据被访问），则将数据移到链表头部</li>
<li>当链表满的时候，将链表尾部的数据丢弃</li>
</ul>
<p>LRU Cache具备的操作：</p>
<ul>
<li><p>set(key,value)<br>：如果key在hashmap中存在，则先重置对应的value值，然后获取对应的节点cur，将cur节点从链表删除，并移动到链表的头部；若果key在hashmap不存在，则新建一个节点，并将节点放到链表的头部。当Cache存满的时候，将链表最后一个节点删除即可。</p>
</li>
<li><p>get(key)：如果key在hashmap中存在，则把对应的节点放到链表头部，并返回对应的value值；如果不存在，则返回-1。</p>
</li>
</ul>
<p><strong>LRU</strong> 是最近最少使用页面置换算法(Least Recently Used),也就是首先淘汰最长时间未被使用的页面!</p>
<p><strong>LFU</strong> 是最近最不常用页面置换算法(Least Frequently Used),也就是淘汰一定时期内被访问次数最少的页!</p>
<h5 id="所有策略"><a href="#所有策略" class="headerlink" title="所有策略"></a>所有策略</h5><ul>
<li><strong>volatile-lru：</strong> 在内存不足时，Redis会再设置过了生存时间的key中干掉一个最近最少使用的key。</li>
<li><strong>allkeys-lru：</strong> 在内存不足时，Redis会在全部的key中干掉一个最近最少使用的key。</li>
<li><strong>volatile-lfu：</strong> 在内存不足时，Redis会再设置过了生存时间的key中干掉一个最近最少频次使用的key。</li>
<li><strong>allkeys-lfu：</strong> 在内存不足时，Redis会再全部的key中干掉一个最近最少频次使用的key。</li>
<li><strong>volatile-random：</strong> 在内存不足时，Redis会再设置过了生存时间的key中随机干掉一个。</li>
<li><strong>allkeys-random：</strong> 在内存不足时，Redis会再全部的key中随机干掉一个。</li>
<li><strong>volatile-ttl：</strong> 在内存不足时，Redis会再设置过了生存时间的key中干掉一个剩余生存时间最少的key。</li>
<li><strong>noeviction：</strong> 在内存不足时，只读不能写 <strong>（默认）</strong> 。</li>
</ul>
<blockquote>
<p><strong>建议使用：volatile-lru。这种是性能和安全之间最协调的。</strong></p>
</blockquote>
<h4 id="如何清除带有过期时间的-key"><a href="#如何清除带有过期时间的-key" class="headerlink" title="如何清除带有过期时间的 key"></a>如何清除带有过期时间的 key</h4><h5 id="定时策略"><a href="#定时策略" class="headerlink" title="定时策略"></a>定时策略</h5><blockquote>
<p>给每个 key 加一个定时器，这样当时间到达过期时间的时候就自动删除 key</p>
</blockquote>
<p><strong>弊端：</strong><br>这种方式对内存是友好的，因为可以及时清理过期的可以，但是由于每个带有过期时间的 key 都需要一个定时器，所以这种方式对 CPU 是不友好的，会占用很多的 CPU，另外这种方式是一种主动的行为。</p>
<h5 id="惰性策略"><a href="#惰性策略" class="headerlink" title="惰性策略"></a>惰性策略</h5><blockquote>
<p>每次访问一个 key 的时候再去判断这个 key 是否到达过期时间了，过期了就删除掉</p>
</blockquote>
<p><strong>弊端：</strong><br>这种方式对 CPU 是友好的，但是对应的也有一个问题，就是如果这些过期的 key 我们再也不会访问，那么永远就不会删除了。</p>
<h5 id="折中策略"><a href="#折中策略" class="headerlink" title="折中策略"></a>折中策略</h5><blockquote>
<p>服务器在真正实现的时候上面的两种方式都会用到，这样就可以得到一种折中的方式。</p>
</blockquote>
<p><strong>优化：</strong><br>对“定时策略”进行了变异，每秒执行如下步骤：</p>
<ol>
<li>在过期的key中随机抽取20个key</li>
<li>删除其中过期的key</li>
<li>如果过期的key&#x2F;20 &gt; 25%，则重复步骤1（最多10次）</li>
</ol>
<p><strong>结论：</strong><br>依赖key过期事件触发通知执行定时任务“不可靠”</p>
<h3 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h3><p>redis-benchmark在编译后的根目录下：.&#x2F;src&#x2F;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost src]<span class="comment"># ./redis-benchmark -n 10000 -q</span></span><br><span class="line">ERROR: NOAUTH Authentication required.</span><br><span class="line">ERROR: failed to fetch CONFIG from 127.0.0.1:6379</span><br><span class="line">[root@localhost src]<span class="comment"># ./redis-benchmark -n 10000 -a 654321  -q</span></span><br><span class="line">PING_INLINE: 64102.56 requests per second, p50=0.519 msec         </span><br><span class="line">PING_MBULK: 61349.69 requests per second, p50=0.511 msec                   </span><br><span class="line">SET: 64935.07 requests per second, p50=0.503 msec</span><br><span class="line">GET: 62500.00 requests per second, p50=0.519 msec                  </span><br><span class="line">INCR: 58479.53 requests per second, p50=0.527 msec                   </span><br><span class="line">LPUSH: 59523.81 requests per second, p50=0.527 msec</span><br><span class="line">RPUSH: 66225.17 requests per second, p50=0.511 msec                  </span><br><span class="line">LPOP: 59171.60 requests per second, p50=0.551 msec                   </span><br><span class="line">RPOP: 64516.13 requests per second, p50=0.543 msec</span><br><span class="line">SADD: 57803.47 requests per second, p50=0.591 msec                  </span><br><span class="line">HSET: 50000.00 requests per second, p50=0.695 msec                   </span><br><span class="line">SPOP: 46296.30 requests per second, p50=0.743 msec                   </span><br><span class="line">ZADD: 37593.98 requests per second, p50=0.951 msec                   </span><br><span class="line">ZPOPMIN: 42735.04 requests per second, p50=0.807 msec                   </span><br><span class="line">LPUSH (needed to benchmark LRANGE): 42194.09 requests per second, p50=0.831 msec                   </span><br><span class="line">LRANGE_100 (first 100 elements): 24096.39 requests per second, p50=1.447 msec                   </span><br><span class="line">LRANGE_300 (first 300 elements): 12004.80 requests per second, p50=2.743 msec                   </span><br><span class="line">LRANGE_500 (first 500 elements): 8223.68 requests per second, p50=3.967 msec                  </span><br><span class="line">LRANGE_600 (first 600 elements): 7007.71 requests per second, p50=4.679 msec                  </span><br><span class="line">MSET (10 keys): 36101.08 requests per second, p50=1.015 msec</span><br></pre></td></tr></table></figure>

<h2 id="普通命令、管道命令、事务命令及Lua脚本命令的区别"><a href="#普通命令、管道命令、事务命令及Lua脚本命令的区别" class="headerlink" title="普通命令、管道命令、事务命令及Lua脚本命令的区别"></a>普通命令、管道命令、事务命令及Lua脚本命令的区别</h2><div id="command_distinction"></div>

<h3 id="命令说明"><a href="#命令说明" class="headerlink" title="命令说明"></a>命令说明</h3><h4 id="普通命令"><a href="#普通命令" class="headerlink" title="普通命令"></a>普通命令</h4><p>只多个原生命令的执行。</p>
<h4 id="管道命令"><a href="#管道命令" class="headerlink" title="管道命令"></a>管道命令</h4><p>在Redis提供的管道流中多个原生命令一次性发送，并在所有命令执行完一次性获取执行结果（使用限制：多个命令之间不存在返回结果上的依赖）。</p>
<h4 id="事务命令"><a href="#事务命令" class="headerlink" title="事务命令"></a>事务命令</h4><p>开启事务后执行命令（使用限制：多个命令之间不存在返回结果上的依赖）。</p>
<h4 id="Lua脚本命令"><a href="#Lua脚本命令" class="headerlink" title="Lua脚本命令"></a>Lua脚本命令</h4><p>以lua脚本粘合多个原生命令，作为一个整体发送到服务器端执行。</p>
<h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><p>以下为普通、管道、事务类型命令执行流程的对比图：<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/redis/6032eb67602e4960a3bc735a487447f4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Ien6aaG6ZW_,size_20,color_FFFFFF,t_70,g_se,x_16" alt="执行过程示意图"></p>
<ul>
<li><strong>普通命令：</strong> 命令-&gt;结果、命令-&gt;结果；命令会被立即执行，命令与结果之间客户端阻塞，两次命令之间会被其它客户端插入。</li>
<li><strong>管道命令：</strong> 命令-&gt;结果缓存、命令-&gt;结果缓存，返回结果集合；命令会被立即执行，两次命令之间会被其它客户端插入，见过一次性返回（减少了多次网络传输成本，但是缓存结果会占用服务端的内存资源）。</li>
<li><strong>事务命令：</strong> 命令缓存、命令缓存、执行-&gt;返回结果；两次命令缓存之间会被其它客户端插入，执行期间不会被插入。</li>
</ul>
<h3 id="结果对比"><a href="#结果对比" class="headerlink" title="结果对比"></a>结果对比</h3><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><p>相比其它命令，lua脚本命令的优势：</p>
<ol>
<li>减少网络开销 ：本来5次网络请求的操作，可以用一个请求完成，原先5次请求的逻辑放在redis服务器上完成。使用脚本，减少了网络往返时延。这点跟管道类似。</li>
<li>原子操作 ：Redis会将整个脚本作为一个整体执行，中间不会被其他命令插入。管道不是原子的，不过redis的批量操作命令(类似mset)是原子的。</li>
<li>替代redis的事务功能 ：redis自带的事务功能很鸡肋，报错不支持回滚，而redis的lua脚本几乎实现了常规的事务功能，支持报错回滚操作，官方推荐如果要使用redis的事务功能可以用redis lua替代。</li>
<li>复用 ：客户端发送的脚本永久存在redis中，其他客户端可以复用脚本</li>
<li>可嵌入性 ：可嵌入JAVA，C#等多种编程语言，支持不同操作系统跨平台交互</li>
</ol>
<h4 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h4><ol>
<li>需要学习lua脚本语法</li>
</ol>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>不要在Lua脚本中出现死循环和耗时的运算，否则redis会阻塞，将不接受其他的命令， 所以使用时要注意不能出现死循环、耗时的运算。redis是单进程、单线程执行脚本。管道不会阻塞redis。</p>
]]></content>
      <categories>
        <category>中间件</category>
        <category>存储</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Redis服务</title>
    <url>/2023/05/28/redis-setup/</url>
    <content><![CDATA[<h2 id="单机模式"><a href="#单机模式" class="headerlink" title="单机模式"></a>单机模式</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><blockquote>
<p>这里使用 <a href="https://download.redis.io/releases/redis-6.2.6.tar.gz">redis-6.2.6</a> 版本</p>
</blockquote>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="下载并解压到安装目录"><a href="#下载并解压到安装目录" class="headerlink" title="下载并解压到安装目录"></a>下载并解压到安装目录</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost local]# wget https://download.redis.io/releases/redis-6.2.6.tar.gz</span><br><span class="line">[root@localhost local]# tar -zxf redis-6.2.6.tar.gz </span><br><span class="line">[root@localhost local]# mv redis-6.2.6 redis</span><br><span class="line">[root@localhost local]# ll</span><br><span class="line">总用量 2424</span><br><span class="line">drwxrwxr-x. 7 root root    4096 10月  4 2021 redis</span><br><span class="line">-rw-r--r--. 1 root root 2476542 10月  4 2021 redis-6.2.6.tar.gz</span><br><span class="line">[root@localhost local]# cd redis</span><br></pre></td></tr></table></figure>

<h4 id="检查编译环境无则安装"><a href="#检查编译环境无则安装" class="headerlink" title="检查编译环境无则安装"></a>检查编译环境无则安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost redis]# rpm -q gcc gcc-c++</span><br><span class="line">未安装软件包 gcc </span><br><span class="line">未安装软件包 gcc-c++</span><br><span class="line">[root@localhost redis]# yum -y install gcc gcc-c++</span><br></pre></td></tr></table></figure>

<h4 id="源码编译"><a href="#源码编译" class="headerlink" title="源码编译"></a>源码编译</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意执行编译的工作目录必须为redis</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">make install默认会把bin放到/usr/local/bin/下面，需要加上PREFIX=/usr/local/redis/指定目录</span></span><br><span class="line">[root@localhost redis]# make &amp;&amp; make install PREFIX=/usr/local/redis/</span><br><span class="line">cd src &amp;&amp; make install</span><br><span class="line">make[1]: 进入目录“/usr/local/redis/src”</span><br></pre></td></tr></table></figure>

<h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><blockquote>
<p>自启动服务配置参考：<a href="https://blog.csdn.net/u012285269/article/details/125674143">笔记【配置自启动服务 in Centos7.x】</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">日志路径</span></span><br><span class="line">[root@localhost redis]# mkdir log</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改配置</span></span><br><span class="line">[root@localhost redis]# cp redis.conf redis.my.conf</span><br><span class="line">[root@localhost redis]# vi redis.my.conf</span><br><span class="line">...</span><br><span class="line">bind 0.0.0.0</span><br><span class="line">protected-mode no</span><br><span class="line">daemonize yes</span><br><span class="line">logfile &quot;/usr/local/redis/log/redis.log&quot;</span><br><span class="line">...</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建服务</span></span><br><span class="line">[root@localhost redis]# vi /usr/lib/systemd/system/redis.service</span><br><span class="line">...</span><br><span class="line">[Unit]</span><br><span class="line">Description=redis</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/redis/bin/redis-server /usr/local/redis/redis.my.conf</span><br><span class="line">ExecReload=/usr/local/redis/bin/redis-server -s reload</span><br><span class="line">ExecStop=/usr/local/redis/bin/redis-server -s stop</span><br><span class="line">PrivateTmp=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">...</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 启动服务</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前服务状态如下</span></span><br><span class="line">[root@localhost redis]# systemctl status redis</span><br><span class="line">● redisd.service - redis</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/redis.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: inactive (dead)</span><br><span class="line">   </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加入开机启动项</span></span><br><span class="line">[root@localhost redis]# systemctl enable redis</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动服务</span></span><br><span class="line">[root@localhost redis]# systemctl start redis</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再次查看当前服务状态</span></span><br><span class="line">[root@localhost redis]# systemctl status redis</span><br><span class="line">● redisd.service - redis</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/redis.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since 五 2022-05-13 13:05:55 CST; 27s ago</span><br><span class="line"> Main PID: 25766 (redis-server)</span><br><span class="line">   CGroup: /system.slice/redis.service</span><br><span class="line">           └─25766 /usr/local/redis/bin/redis-server 0.0.0.0:6379</span><br></pre></td></tr></table></figure>

<ul>
<li>常用命令：<ul>
<li>systemctl start redis（启动redis服务）</li>
<li>systemctl restart redis（重启redis服务）</li>
<li>systemctl stop redis（停止redis服务）</li>
<li>systemctl enable redis（添加开机自启）</li>
<li>systemctl disable redis（禁止开机自启）</li>
<li>systemctl status redis（查看状态）</li>
</ul>
</li>
</ul>
<h4 id="开启防火墙端口"><a href="#开启防火墙端口" class="headerlink" title="开启防火墙端口"></a>开启防火墙端口</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost redis]# systemctl status firewalld</span><br><span class="line">● firewalld.service - firewalld - dynamic firewall daemon</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since 五 2022-05-13 10:59:02 CST; 2h 42min ago</span><br><span class="line">     Docs: man:firewalld(1)</span><br><span class="line"> Main PID: 670 (firewalld)</span><br><span class="line">   CGroup: /system.slice/firewalld.service</span><br><span class="line">           └─670 /usr/bin/python2 -Es /usr/sbin/firewalld --nofork --nopid</span><br><span class="line">[root@localhost redis]# firewall-cmd --zone=public --add-port=6379/tcp --permanent</span><br><span class="line">success</span><br><span class="line">[root@localhost redis]# firewall-cmd --reload</span><br><span class="line">success</span><br><span class="line">[root@localhost redis]# firewall-cmd --list-ports</span><br><span class="line">6379/tcp</span><br></pre></td></tr></table></figure>

<h4 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h4><blockquote>
<p>Increased maximum number of open files to 10032 (it was originally set to 1024).</p>
<ul>
<li>ulimit -n 10032</li>
</ul>
</blockquote>
<blockquote>
<p>The TCP backlog setting of 511 cannot be enforced because &#x2F;proc&#x2F;sys&#x2F;net&#x2F;core&#x2F;somaxconn is set to the lower value of</p>
</blockquote>
<ol start="128">
<li></li>
</ol>
<blockquote>
<ul>
<li>将net.core.somaxconn &#x3D; 1024添加到&#x2F;etc&#x2F;sysctl.conf中，然后执行sysctl -p生效配置。</li>
</ul>
</blockquote>
<blockquote>
<p>overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add<br>‘vm.overcommit_memory &#x3D; 1’ to&#x2F;etc&#x2F;sysctl.conf and then reboot or run the command ‘sysctl vm.overcommit_memory&#x3D;1’ for<br>this to take effect.</p>
<ul>
<li>将vm.overcommit_memory &#x3D; 1添加到&#x2F;etc&#x2F;sysctl.conf中，然后执行sysctl -p生效配置。</li>
</ul>
</blockquote>
<blockquote>
<p>you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues<br>with Redis. To fix thisissue run the command ‘echo never &gt; &#x2F;sys&#x2F;kernel&#x2F;mm&#x2F;transparent_hugepage&#x2F;enabled’ as root, and<br>add<br>it to your &#x2F;etc&#x2F;rc.local in order to retain thesetting after a reboot. Redis must be restarted after THP is disabled.</p>
<ul>
<li>将echo never &gt; &#x2F;sys&#x2F;kernel&#x2F;mm&#x2F;transparent_hugepage&#x2F;enabled添加到&#x2F;etc&#x2F;rc.local中，然后执行source &#x2F;etc&#x2F;rc.local生效配置</li>
</ul>
</blockquote>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost redis]# ./bin/redis-cli </span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt; set name zangh</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">&quot;zangh&quot;</span><br></pre></td></tr></table></figure>

<h2 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h2><h3 id="准备-1"><a href="#准备-1" class="headerlink" title="准备"></a>准备</h3><blockquote>
<p>这里使用 <a href="https://download.redis.io/releases/redis-6.2.6.tar.gz">redis-6.2.6</a> 版本</p>
</blockquote>
<h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><h4 id="下载并解压到安装目录-1"><a href="#下载并解压到安装目录-1" class="headerlink" title="下载并解压到安装目录"></a>下载并解压到安装目录</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost local]# wget https://download.redis.io/releases/redis-6.2.6.tar.gz</span><br><span class="line">[root@localhost local]# tar -zxf redis-6.2.6.tar.gz </span><br><span class="line">[root@localhost local]# mv redis-6.2.6 redis</span><br><span class="line">[root@localhost local]# ll</span><br><span class="line">总用量 2424</span><br><span class="line">drwxrwxr-x. 7 root root    4096 10月  4 2021 redis</span><br><span class="line">-rw-r--r--. 1 root root 2476542 10月  4 2021 redis-6.2.6.tar.gz</span><br><span class="line">[root@localhost local]# cd redis</span><br></pre></td></tr></table></figure>

<h4 id="检查编译环境无则安装-1"><a href="#检查编译环境无则安装-1" class="headerlink" title="检查编译环境无则安装"></a>检查编译环境无则安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost redis]# rpm -q gcc gcc-c++</span><br><span class="line">未安装软件包 gcc </span><br><span class="line">未安装软件包 gcc-c++</span><br><span class="line">[root@localhost redis]# yum -y install gcc gcc-c++</span><br></pre></td></tr></table></figure>

<h4 id="源码编译-1"><a href="#源码编译-1" class="headerlink" title="源码编译"></a>源码编译</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意执行编译的工作目录必须为redis</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">make install默认会把bin放到/usr/local/bin/下面，需要加上PREFIX=/usr/local/redis/指定目录</span></span><br><span class="line">[root@localhost redis]# make &amp;&amp; make install PREFIX=/usr/local/redis/</span><br><span class="line">cd src &amp;&amp; make install</span><br><span class="line">make[1]: 进入目录“/usr/local/redis/src”</span><br></pre></td></tr></table></figure>

<h4 id="启动服务-1"><a href="#启动服务-1" class="headerlink" title="启动服务"></a>启动服务</h4><h5 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">数据目录</span></span><br><span class="line">[root@redis01 redis]# mkdir data</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">日志路径</span></span><br><span class="line">[root@redis01 redis]# mkdir log</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改配置</span></span><br><span class="line">[root@redis01 redis]# cp sentinel.conf sentinel.my.conf</span><br><span class="line">[root@redis01 redis]# vi sentinel.my.conf</span><br><span class="line">...</span><br><span class="line">protected-mode no</span><br><span class="line">daemonize yes</span><br><span class="line">dir &quot;/usr/local/redis/data&quot;</span><br><span class="line">logfile &quot;/usr/local/redis/log/sentinel.log&quot;</span><br><span class="line">sentinel monitor mymaster 172.16.4.216 16379 2</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h5 id="创建自启动服务"><a href="#创建自启动服务" class="headerlink" title="创建自启动服务"></a>创建自启动服务</h5><blockquote>
<p>自启动服务配置参考：<a href="https://blog.csdn.net/u012285269/article/details/125674143">笔记【配置自启动服务 in Centos7.x】</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建服务</span></span><br><span class="line">[root@redis01 redis]# vi /usr/lib/systemd/system/sentinel.service</span><br><span class="line">...</span><br><span class="line">[Unit]</span><br><span class="line">Description=redis-sentinel</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/redis/bin/redis-sentinel /usr/local/redis/sentinel.my.conf</span><br><span class="line">ExecReload=/usr/local/redis/bin/redis-sentinel -s reload</span><br><span class="line">ExecStop=/usr/local/redis/bin/redis-sentinel -s stop</span><br><span class="line">PrivateTmp=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h5 id="启动服务-2"><a href="#启动服务-2" class="headerlink" title="启动服务"></a>启动服务</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@redis01 redis]# systemctl enable sentinel</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/sentinel.service to /usr/lib/systemd/system/sentinel.service.</span><br><span class="line">[root@redis01 redis]# systemctl start sentinel</span><br><span class="line">[root@redis01 redis]# systemctl status sentinel</span><br><span class="line">● sentinel.service - redis-sentinel</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/sentinel.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since 三 2022-07-13 15:29:59 CST; 3s ago</span><br><span class="line">  Process: 5950 ExecStart=/usr/local/redis/bin/redis-sentinel /usr/local/redis/sentinel.my.conf (code=exited, status=0/SUCCESS)</span><br><span class="line"> Main PID: 5951 (redis-sentinel)</span><br><span class="line">   CGroup: /system.slice/sentinel.service</span><br><span class="line">           └─5951 /usr/local/redis/bin/redis-sentinel *:26379 [sentinel]</span><br><span class="line"></span><br><span class="line">7月 13 15:29:59 redis01.zangh systemd[1]: Starting redis-sentinel...</span><br><span class="line">7月 13 15:29:59 redis01.zangh systemd[1]: Started redis-sentinel.</span><br></pre></td></tr></table></figure>

<ul>
<li>常用命令：<ul>
<li>systemctl start sentinel（启动sentinel服务）</li>
<li>systemctl restart sentinel（重启sentinel服务）</li>
<li>systemctl stop sentinel（停止sentinel服务）</li>
<li>systemctl enable sentinel（添加开机自启）</li>
<li>systemctl disable sentinel（禁止开机自启）</li>
<li>systemctl status sentinel（查看状态）</li>
</ul>
</li>
</ul>
<h4 id="开启防火墙端口-1"><a href="#开启防火墙端口-1" class="headerlink" title="开启防火墙端口"></a>开启防火墙端口</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@redis01 redis]# firewall-cmd --zone=public --add-port=26379/tcp --permanent</span><br><span class="line">success</span><br><span class="line">[root@redis01 redis]# firewall-cmd --reload</span><br><span class="line">success</span><br><span class="line">[root@redis01 redis]# firewall-cmd --list-ports</span><br><span class="line">26379/tcp</span><br></pre></td></tr></table></figure>

<h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@redis01 redis]# ./bin/redis-cli -p 26379</span><br><span class="line">127.0.0.1:26379&gt; info sentinel</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Sentinel</span></span><br><span class="line">sentinel_masters:1</span><br><span class="line">sentinel_tilt:0</span><br><span class="line">sentinel_running_scripts:0</span><br><span class="line">sentinel_scripts_queue_length:0</span><br><span class="line">sentinel_simulate_failure_flags:0</span><br><span class="line">master0:name=mymaster,status=ok,address=172.16.4.216:6379,slaves=2,sentinels=1</span><br></pre></td></tr></table></figure>

<h2 id="哨兵集群"><a href="#哨兵集群" class="headerlink" title="哨兵集群"></a>哨兵集群</h2><h3 id="术语说明"><a href="#术语说明" class="headerlink" title="术语说明"></a>术语说明</h3><blockquote>
<p>哨兵是特殊的redis服务，不提供读写服务，主要用来监控redis实例节点</p>
<ol>
<li>整个哨兵集群都在监听reids的主机和所有从机，从而判断某个机器是否宕机等问题；</li>
<li>当哨兵发现主节点宕机，会自动选择某个从节点当做主节点；</li>
</ol>
</blockquote>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><blockquote>
<p>如果没有哨兵架构，那么当主节点挂了的时候，需要运维人员手动将某个从节点设置为主节点，还需要修改IP等其他操作。</p>
</blockquote>
<h3 id="哨兵搭建"><a href="#哨兵搭建" class="headerlink" title="哨兵搭建"></a>哨兵搭建</h3><ul>
<li>redis-sentinel（5个高可用节点）</li>
</ul>
<table>
<thead>
<tr>
<th>节点名</th>
<th>角色</th>
<th>ip</th>
<th>port</th>
</tr>
</thead>
<tbody><tr>
<td>redis01</td>
<td>node</td>
<td>172.16.4.211</td>
<td>26379</td>
</tr>
<tr>
<td>redis02</td>
<td>node</td>
<td>172.16.4.212</td>
<td>26379</td>
</tr>
<tr>
<td>redis03</td>
<td>node</td>
<td>172.16.4.213</td>
<td>26379</td>
</tr>
<tr>
<td>redis04</td>
<td>node</td>
<td>172.16.4.214</td>
<td>26379</td>
</tr>
<tr>
<td>redis05</td>
<td>node</td>
<td>172.16.4.215</td>
<td>26379</td>
</tr>
</tbody></table>
<h4 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h4><blockquote>
<p>redis01单节点搭建，请参考 <a href="https://blog.csdn.net/u012285269/article/details/125764768">《安装【Redis of Sentinel in CentOS7.x】》</a></p>
</blockquote>
<ol>
<li>复制安装包和自启动文件到其它节点（**<font color="#dd00dd"><br>此处要特别注意：复制完成后要检查sentinel.my.conf文件中是否存在myid，如果存在需要删除。myid（自动生成）是用来唯一标识集群内不同sentinel节点的，如果相同会导致sentinel节点无法组成集群。</font>**<br>）</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 复制redis安装包（其它节点同理）</span></span><br><span class="line">[root@redis01 redis]<span class="comment"># scp -r /usr/local/redis/ root@172.16.4.212:/usr/local/</span></span><br><span class="line"><span class="comment"># 复制sentinel自启动服务（其它节点同理）</span></span><br><span class="line">[root@redis01 redis]<span class="comment"># scp -r /usr/lib/systemd/system/sentinel.service root@172.16.4.212:/usr/lib/systemd/system/sentinel.service</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在其它节点上，启动服务（使用ansible更简单）</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@redis02 redis]<span class="comment"># systemctl enable sentinel</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/sentinel.service to /usr/lib/systemd/system/sentinel.service.</span><br><span class="line">[root@redis02 redis]<span class="comment"># systemctl start sentinel</span></span><br><span class="line">[root@redis02 redis]<span class="comment"># systemctl status sentinel</span></span><br><span class="line">● sentinel.service - redis-sentinel</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/sentinel.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since 三 2022-07-13 16:08:21 CST; 4s ago</span><br><span class="line">  Process: 9316 ExecStart=/usr/local/redis/bin/redis-sentinel /usr/local/redis/sentinel.my.conf (code=exited, status=0/SUCCESS)</span><br><span class="line"> Main PID: 9317 (redis-sentinel)</span><br><span class="line">   CGroup: /system.slice/sentinel.service</span><br><span class="line">           └─9317 /usr/local/redis/bin/redis-sentinel *:26379 [sentinel]</span><br><span class="line"></span><br><span class="line">7月 13 16:08:21 redis02.zangh systemd[1]: Starting redis-sentinel...</span><br><span class="line">7月 13 16:08:21 redis02.zangh systemd[1]: Started redis-sentinel.</span><br></pre></td></tr></table></figure>

<h4 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h4><ol>
<li>查看集群状态</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@redis02 redis]<span class="comment"># ./bin/redis-cli -p 26379</span></span><br><span class="line">127.0.0.1:26379&gt; </span><br><span class="line">127.0.0.1:26379&gt; info sentinel</span><br><span class="line"><span class="comment"># Sentinel</span></span><br><span class="line">sentinel_masters:1</span><br><span class="line">sentinel_tilt:0</span><br><span class="line">sentinel_running_scripts:0</span><br><span class="line">sentinel_scripts_queue_length:0</span><br><span class="line">sentinel_simulate_failure_flags:0</span><br><span class="line">master0:name=mymaster,status=ok,address=172.16.4.219:6379,slaves=3,sentinels=3</span><br><span class="line"><span class="comment"># 查看master情况</span></span><br><span class="line">127.0.0.1:26379&gt; sentinel master mymaster</span><br><span class="line"> 1) <span class="string">&quot;name&quot;</span></span><br><span class="line"> 2) <span class="string">&quot;mymaster&quot;</span></span><br><span class="line"> 3) <span class="string">&quot;ip&quot;</span></span><br><span class="line"> 4) <span class="string">&quot;172.16.4.219&quot;</span></span><br><span class="line"> 5) <span class="string">&quot;port&quot;</span></span><br><span class="line"> 6) <span class="string">&quot;6379&quot;</span></span><br><span class="line"> 7) <span class="string">&quot;runid&quot;</span></span><br><span class="line"> 8) <span class="string">&quot;2585cdb3e14bdcd1fd6f1cf5772aaa7b6317fb47&quot;</span></span><br><span class="line"> 9) <span class="string">&quot;flags&quot;</span></span><br><span class="line">10) <span class="string">&quot;master&quot;</span></span><br><span class="line">11) <span class="string">&quot;link-pending-commands&quot;</span></span><br><span class="line">12) <span class="string">&quot;0&quot;</span></span><br><span class="line">13) <span class="string">&quot;link-refcount&quot;</span></span><br><span class="line">14) <span class="string">&quot;1&quot;</span></span><br><span class="line">15) <span class="string">&quot;last-ping-sent&quot;</span></span><br><span class="line">16) <span class="string">&quot;0&quot;</span></span><br><span class="line">17) <span class="string">&quot;last-ok-ping-reply&quot;</span></span><br><span class="line">18) <span class="string">&quot;732&quot;</span></span><br><span class="line">19) <span class="string">&quot;last-ping-reply&quot;</span></span><br><span class="line">20) <span class="string">&quot;732&quot;</span></span><br><span class="line">21) <span class="string">&quot;down-after-milliseconds&quot;</span></span><br><span class="line">22) <span class="string">&quot;30000&quot;</span></span><br><span class="line">23) <span class="string">&quot;info-refresh&quot;</span></span><br><span class="line">24) <span class="string">&quot;5670&quot;</span></span><br><span class="line">25) <span class="string">&quot;role-reported&quot;</span></span><br><span class="line">26) <span class="string">&quot;master&quot;</span></span><br><span class="line">27) <span class="string">&quot;role-reported-time&quot;</span></span><br><span class="line">28) <span class="string">&quot;437396&quot;</span></span><br><span class="line">29) <span class="string">&quot;config-epoch&quot;</span></span><br><span class="line">30) <span class="string">&quot;2&quot;</span></span><br><span class="line">31) <span class="string">&quot;num-slaves&quot;</span></span><br><span class="line">32) <span class="string">&quot;3&quot;</span></span><br><span class="line">33) <span class="string">&quot;num-other-sentinels&quot;</span></span><br><span class="line">34) <span class="string">&quot;2&quot;</span></span><br><span class="line">35) <span class="string">&quot;quorum&quot;</span></span><br><span class="line">36) <span class="string">&quot;2&quot;</span></span><br><span class="line">37) <span class="string">&quot;failover-timeout&quot;</span></span><br><span class="line">38) <span class="string">&quot;180000&quot;</span></span><br><span class="line">39) <span class="string">&quot;parallel-syncs&quot;</span></span><br><span class="line">40) <span class="string">&quot;1&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>sentinel之间是通过PubSub订阅发布通道实现的：<strong>sentinel</strong>:hello</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@redis06 redis]<span class="comment"># ./bin/redis-cli </span></span><br><span class="line">127.0.0.1:6379&gt; pubsub channels</span><br><span class="line">1) <span class="string">&quot;__sentinel__:hello&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; subscribe __sentinel__:hello</span><br><span class="line">Reading messages... (press Ctrl-C to quit) </span><br><span class="line"><span class="comment"># sentinel每秒都会向这个通道中发送消息，告诉其它sentinel自己的存在（这也是为什么sentinel发布时只需要配置redis的master节点就够了）</span></span><br><span class="line">1) <span class="string">&quot;subscribe&quot;</span></span><br><span class="line">2) <span class="string">&quot;__sentinel__:hello&quot;</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 1</span><br><span class="line">1) <span class="string">&quot;message&quot;</span></span><br><span class="line">2) <span class="string">&quot;__sentinel__:hello&quot;</span></span><br><span class="line">3) <span class="string">&quot;172.16.4.211,26379,515ae54e3543aeb1f4f8b1a5e08a2e7942dd0787,0,mymaster,172.16.4.216,6379,0&quot;</span></span><br><span class="line">1) <span class="string">&quot;message&quot;</span></span><br><span class="line">2) <span class="string">&quot;__sentinel__:hello&quot;</span></span><br><span class="line">3) <span class="string">&quot;172.16.4.215,26379,515ae54e3543aeb1f4f8b1a5e08a2e7942dd0787,0,mymaster,172.16.4.216,6379,0&quot;</span></span><br><span class="line">1) <span class="string">&quot;message&quot;</span></span><br><span class="line">2) <span class="string">&quot;__sentinel__:hello&quot;</span></span><br><span class="line">3) <span class="string">&quot;172.16.4.212,26379,515ae54e3543aeb1f4f8b1a5e08a2e7942dd0787,0,mymaster,172.16.4.216,6379,0&quot;</span></span><br><span class="line">1) <span class="string">&quot;message&quot;</span></span><br><span class="line">2) <span class="string">&quot;__sentinel__:hello&quot;</span></span><br><span class="line">3) <span class="string">&quot;172.16.4.214,26379,515ae54e3543aeb1f4f8b1a5e08a2e7942dd0787,0,mymaster,172.16.4.216,6379,0&quot;</span></span><br><span class="line">1) <span class="string">&quot;message&quot;</span></span><br><span class="line">2) <span class="string">&quot;__sentinel__:hello&quot;</span></span><br><span class="line">3) <span class="string">&quot;172.16.4.213,26379,515ae54e3543aeb1f4f8b1a5e08a2e7942dd0787,0,mymaster,172.16.4.216,6379,0&quot;</span></span><br><span class="line">1) <span class="string">&quot;message&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="故障转移"><a href="#故障转移" class="headerlink" title="故障转移"></a>故障转移</h4><h5 id="单节点sentinel故障转移演示"><a href="#单节点sentinel故障转移演示" class="headerlink" title="单节点sentinel故障转移演示"></a>单节点sentinel故障转移演示</h5><ol>
<li>修改配置文件，quorum改为1（表示只要有一票通过即可进行failover）</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@redis01 redis]<span class="comment"># vi sentinel.my.conf</span></span><br><span class="line">sentinel monitor mymaster 172.16.4.216 16379 1</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>重启sentinel服务</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@redis01 redis]<span class="comment"># systemctl restart sentinel</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>关闭redis当前主节点</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@redis06 redis]<span class="comment"># systemctl stop redis</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>查看sentinel日志</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@redis01 redis]<span class="comment"># tail -f log/sentinel.log </span></span><br><span class="line">6826:X 13 Jul 2022 16:55:22.817 <span class="comment"># Sentinel is now ready to exit, bye bye...</span></span><br><span class="line">6847:X 13 Jul 2022 16:55:22.828 <span class="comment"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span></span><br><span class="line">6847:X 13 Jul 2022 16:55:22.828 <span class="comment"># Redis version=6.2.6, bits=64, commit=00000000, modified=0, pid=6847, just started</span></span><br><span class="line">6847:X 13 Jul 2022 16:55:22.828 <span class="comment"># Configuration loaded</span></span><br><span class="line">6847:X 13 Jul 2022 16:55:22.829 * Increased maximum number of open files to 10032 (it was originally <span class="built_in">set</span> to 1024).</span><br><span class="line">6847:X 13 Jul 2022 16:55:22.829 * monotonic clock: POSIX clock_gettime</span><br><span class="line">6847:X 13 Jul 2022 16:55:22.829 * Running mode=sentinel, port=26379.</span><br><span class="line">6847:X 13 Jul 2022 16:55:22.829 <span class="comment"># WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span></span><br><span class="line">6847:X 13 Jul 2022 16:55:22.829 <span class="comment"># Sentinel ID is 515ae54e3543aeb1f4f8b1a5e08a2e7942dd0787</span></span><br><span class="line">6847:X 13 Jul 2022 16:55:22.829 <span class="comment"># +monitor master mymaster 172.16.4.216 6379 quorum 1</span></span><br><span class="line"><span class="comment"># 主观判断down掉了</span></span><br><span class="line">6847:X 13 Jul 2022 16:56:02.872 <span class="comment"># +sdown master mymaster 172.16.4.216 6379</span></span><br><span class="line"><span class="comment"># 客观判断down掉了（即：票数&gt;=quorum）</span></span><br><span class="line">6847:X 13 Jul 2022 16:56:02.872 <span class="comment"># +odown master mymaster 172.16.4.216 6379 #quorum 1/1</span></span><br><span class="line"><span class="comment"># 开启新一轮选举</span></span><br><span class="line">6847:X 13 Jul 2022 16:56:02.872 <span class="comment"># +new-epoch 1</span></span><br><span class="line">6847:X 13 Jul 2022 16:56:02.872 <span class="comment"># +try-failover master mymaster 172.16.4.216 6379</span></span><br><span class="line">6847:X 13 Jul 2022 16:56:02.879 <span class="comment"># +vote-for-leader 515ae54e3543aeb1f4f8b1a5e08a2e7942dd0787 1</span></span><br><span class="line">6847:X 13 Jul 2022 16:56:02.879 <span class="comment"># +elected-leader master mymaster 172.16.4.216 6379</span></span><br><span class="line"><span class="comment"># 开始故障转移</span></span><br><span class="line">6847:X 13 Jul 2022 16:56:02.879 <span class="comment"># +failover-state-select-slave master mymaster 172.16.4.216 6379</span></span><br><span class="line"><span class="comment"># 选择从节点172.16.4.218作为主节点</span></span><br><span class="line">6847:X 13 Jul 2022 16:56:02.942 <span class="comment"># +selected-slave slave 172.16.4.218:6379 172.16.4.218 6379 @ mymaster 172.16.4.216 6379</span></span><br><span class="line">6847:X 13 Jul 2022 16:56:02.942 * +failover-state-send-slaveof-noone slave 172.16.4.218:6379 172.16.4.218 6379 @ mymaster 172.16.4.216 6379</span><br><span class="line">6847:X 13 Jul 2022 16:56:03.001 * +failover-state-wait-promotion slave 172.16.4.218:6379 172.16.4.218 6379 @ mymaster 172.16.4.216 6379</span><br><span class="line">6847:X 13 Jul 2022 16:56:03.725 <span class="comment"># +promoted-slave slave 172.16.4.218:6379 172.16.4.218 6379 @ mymaster 172.16.4.216 6379</span></span><br><span class="line">6847:X 13 Jul 2022 16:56:03.725 <span class="comment"># +failover-state-reconf-slaves master mymaster 172.16.4.216 6379</span></span><br><span class="line">6847:X 13 Jul 2022 16:56:03.781 * +slave-reconf-sent slave 172.16.4.217:6379 172.16.4.217 6379 @ mymaster 172.16.4.216 6379</span><br><span class="line">6847:X 13 Jul 2022 16:56:04.761 * +slave-reconf-inprog slave 172.16.4.217:6379 172.16.4.217 6379 @ mymaster 172.16.4.216 6379</span><br><span class="line">6847:X 13 Jul 2022 16:56:04.761 * +slave-reconf-done slave 172.16.4.217:6379 172.16.4.217 6379 @ mymaster 172.16.4.216 6379</span><br><span class="line">6847:X 13 Jul 2022 16:56:04.821 <span class="comment"># +failover-end master mymaster 172.16.4.216 6379</span></span><br><span class="line"><span class="comment"># 切换主节点为172.16.4.218</span></span><br><span class="line">6847:X 13 Jul 2022 16:56:04.821 <span class="comment"># +switch-master mymaster 172.16.4.216 6379 172.16.4.218 6379</span></span><br><span class="line">6847:X 13 Jul 2022 16:56:04.821 * +slave slave 172.16.4.217:6379 172.16.4.217 6379 @ mymaster 172.16.4.218 6379</span><br><span class="line">6847:X 13 Jul 2022 16:56:04.821 * +slave slave 172.16.4.216:6379 172.16.4.216 6379 @ mymaster 172.16.4.218 6379</span><br><span class="line">6847:X 13 Jul 2022 16:56:04.988 * +slave slave 172.16.4.219:6379 172.16.4.219 6379 @ mymaster 172.16.4.218 6379</span><br><span class="line">6847:X 13 Jul 2022 16:56:34.836 <span class="comment"># +sdown slave 172.16.4.216:6379 172.16.4.216 6379 @ mymaster 172.16.4.218 6379</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>查看redis新的主节点配置</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@redis08 redis]<span class="comment"># ./bin/redis-cli </span></span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip=172.16.4.219,port=6379,state=online,offset=50538,lag=0</span><br><span class="line">slave1:ip=172.16.4.217,port=6379,state=online,offset=50538,lag=0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:f7db3ec7eaa29106b5b033363bee02cd80f5ffc8</span><br><span class="line">master_replid2:81c3e122f11d508eab164d3ac870a99a8ecb4145</span><br><span class="line">master_repl_offset:50538</span><br><span class="line">second_repl_offset:4570</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:50538</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>重启老的主节点，查看sentinel日志</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">6847:X 13 Jul 2022 16:56:04.821 <span class="comment"># +failover-end master mymaster 172.16.4.216 6379</span></span><br><span class="line">6847:X 13 Jul 2022 16:56:04.821 <span class="comment"># +switch-master mymaster 172.16.4.216 6379 172.16.4.218 6379</span></span><br><span class="line">6847:X 13 Jul 2022 16:56:04.821 * +slave slave 172.16.4.217:6379 172.16.4.217 6379 @ mymaster 172.16.4.218 6379</span><br><span class="line">6847:X 13 Jul 2022 16:56:04.821 * +slave slave 172.16.4.216:6379 172.16.4.216 6379 @ mymaster 172.16.4.218 6379</span><br><span class="line">6847:X 13 Jul 2022 16:56:04.988 * +slave slave 172.16.4.219:6379 172.16.4.219 6379 @ mymaster 172.16.4.218 6379</span><br><span class="line">6847:X 13 Jul 2022 16:56:34.836 <span class="comment"># +sdown slave 172.16.4.216:6379 172.16.4.216 6379 @ mymaster 172.16.4.218 6379</span></span><br><span class="line">6847:X 13 Jul 2022 17:08:11.141 <span class="comment"># -sdown slave 172.16.4.216:6379 172.16.4.216 6379 @ mymaster 172.16.4.218 6379</span></span><br><span class="line"><span class="comment"># 转为从节点</span></span><br><span class="line">6847:X 13 Jul 2022 17:08:21.091 * +convert-to-slave slave 172.16.4.216:6379 172.16.4.216 6379 @ mymaster 172.16.4.218 6379</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>再次查看新主节点信息</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:3</span><br><span class="line">slave0:ip=172.16.4.219,port=6379,state=online,offset=62044,lag=1</span><br><span class="line">slave1:ip=172.16.4.217,port=6379,state=online,offset=62044,lag=1</span><br><span class="line">slave2:ip=172.16.4.216,port=6379,state=online,offset=62044,lag=1</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:f7db3ec7eaa29106b5b033363bee02cd80f5ffc8</span><br><span class="line">master_replid2:81c3e122f11d508eab164d3ac870a99a8ecb4145</span><br><span class="line">master_repl_offset:62044</span><br><span class="line">second_repl_offset:4570</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:62044</span><br></pre></td></tr></table></figure>

<h5 id="多节点sentinel故障转移演示"><a href="#多节点sentinel故障转移演示" class="headerlink" title="多节点sentinel故障转移演示"></a>多节点sentinel故障转移演示</h5><blockquote>
</blockquote>
<p>redis-sentinel采用的是gossip协议，故没有半数选取的逻辑；节点之间通过redis的master、slave节点PubSub通道实现（订阅&#x2F;发布）。存在SDOWN（主观宕机）、ODOWN（客观宕机）两种状态。当满足主观当宕机数&gt;<br>&#x3D;quorum时，则SDOWN&#x3D;&gt;ODOWN，触发failover（故障转移）。</p>
<ol>
<li>修改配置文件，quorum改为1（表示只要有一票通过即可进行failover）</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@redis01 redis]<span class="comment"># vi sentinel.my.conf</span></span><br><span class="line">sentinel monitor mymaster 172.16.4.216 16379 2</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>重启sentinel服务</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@redis01 redis]<span class="comment"># systemctl restart sentinel</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>关闭redis当前主节点</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@redis06 redis]<span class="comment"># systemctl stop redis</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>待补充…</li>
</ol>
<h4 id="应用接入"><a href="#应用接入" class="headerlink" title="应用接入"></a>应用接入</h4><blockquote>
<p>java 客户端</p>
</blockquote>
<h3 id="主从搭建"><a href="#主从搭建" class="headerlink" title="主从搭建"></a>主从搭建</h3><blockquote>
<p>安装请参考：<a href="#redis_replication">主从模式</a></p>
</blockquote>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://www.cnblogs.com/williamjie/p/9505782.html">Redis Sentinel实现的机制与原理详解</a></p>
<h2 id="主从模式"><a href="#主从模式" class="headerlink" title="主从模式"></a>主从模式</h2><div id="redis_replication"></div>

<h3 id="主从搭建-1"><a href="#主从搭建-1" class="headerlink" title="主从搭建"></a>主从搭建</h3><blockquote>
<p>先准备3台redis服务器，安装请参考：<a href="https://blog.csdn.net/u012285269/article/details/124748274">《搭建【Redis in CentOS7.x】》</a></p>
</blockquote>
<ul>
<li>redis-cluster（1主3从）</li>
</ul>
<table>
<thead>
<tr>
<th>节点名</th>
<th>角色</th>
<th>ip</th>
<th>port</th>
</tr>
</thead>
<tbody><tr>
<td>redis06</td>
<td>master</td>
<td>172.16.4.216</td>
<td>6379</td>
</tr>
<tr>
<td>redis07</td>
<td>slave</td>
<td>172.16.4.217</td>
<td>6379</td>
</tr>
<tr>
<td>redis08</td>
<td>slave</td>
<td>172.16.4.218</td>
<td>6379</td>
</tr>
<tr>
<td>redis09</td>
<td>slave of redis08</td>
<td>172.16.4.219</td>
<td>6379</td>
</tr>
</tbody></table>
<h4 id="启动主节点"><a href="#启动主节点" class="headerlink" title="启动主节点"></a>启动主节点</h4><ul>
<li>配置 <strong>172.16.4.216</strong> 为主节点</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置自启动</span></span><br><span class="line">[root@redis-02 <span class="built_in">local</span>]<span class="comment"># systemctl enable redis-cluster</span></span><br><span class="line">[root@redis-02 <span class="built_in">local</span>]<span class="comment"># systemctl start redis-cluster</span></span><br><span class="line"><span class="comment"># 开启防火墙</span></span><br><span class="line">[root@redis-02 <span class="built_in">local</span>]<span class="comment"># firewall-cmd --zone=public --add-port=6379/tcp --permanent</span></span><br><span class="line">[root@redis-02 <span class="built_in">local</span>]<span class="comment"># firewall-cmd --reload</span></span><br></pre></td></tr></table></figure>

<h4 id="配置从节点"><a href="#配置从节点" class="headerlink" title="配置从节点"></a>配置从节点</h4><ul>
<li>配置 <strong>172.16.4.217</strong> 为从节点</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@redis06 redis]# vi /usr/local/redis/redis.my.conf</span><br><span class="line">...</span><br><span class="line">bind 0.0.0.0</span><br><span class="line">protected-mode no</span><br><span class="line">daemonize yes</span><br><span class="line">logfile &quot;/usr/local/redis/log/redis.log&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主从配置</span></span><br><span class="line">replicaof 172.16.4.216 6379</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">持久化配置</span></span><br><span class="line">dir /usr/local/redis/</span><br><span class="line">appendonly yes</span><br><span class="line">...</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置好后，重启服务</span></span><br><span class="line">[root@redis07 redis]# systemctl restart redis-cluster</span><br></pre></td></tr></table></figure>

<ul>
<li>配置 <strong>172.16.4.218</strong> 为从节点</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@redis08 redis]# vi /usr/local/redis/redis.my.conf</span><br><span class="line">...</span><br><span class="line">bind 0.0.0.0</span><br><span class="line">protected-mode no</span><br><span class="line">daemonize yes</span><br><span class="line">logfile &quot;/usr/local/redis/log/redis.log&quot;</span><br><span class="line">replicaof 172.16.4.218 6379</span><br><span class="line">...</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置好后，重启服务</span></span><br><span class="line">[root@redis-04 redis]# systemctl restart redis-cluster</span><br></pre></td></tr></table></figure>

<ul>
<li>配置 <strong>172.16.4.219</strong> 为 <strong>172.16.4.218</strong> 从节点的从节点</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@redis08 redis]# vi /usr/local/redis/redis.my.conf</span><br><span class="line">...</span><br><span class="line">bind 0.0.0.0</span><br><span class="line">protected-mode no</span><br><span class="line">daemonize yes</span><br><span class="line">logfile &quot;/usr/local/redis/log/redis.log&quot;</span><br><span class="line">replicaof 172.16.4.218 6379</span><br><span class="line">...</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置好后，重启服务</span></span><br><span class="line">[root@redis09 redis]# systemctl restart redis-cluster</span><br></pre></td></tr></table></figure>

<h4 id="各节点状态"><a href="#各节点状态" class="headerlink" title="各节点状态"></a>各节点状态</h4><ul>
<li>主节点 <strong>172.16.4.216</strong> 状态</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@redis06 redis]# ./bin/redis-cli </span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip=172.16.4.218,port=6379,state=online,offset=98,lag=1</span><br><span class="line">slave1:ip=172.16.4.217,port=6379,state=online,offset=98,lag=1</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:b55e9c85960e80a9657a81b5c2821546c4e8a2f9</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:98</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:98</span><br></pre></td></tr></table></figure>

<ul>
<li>从节点 <strong>172.16.4.217</strong> 状态</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@redis07 redis]<span class="comment"># ./bin/redis-cli </span></span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:172.16.4.216</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:6</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_read_repl_offset:126</span><br><span class="line">slave_repl_offset:126</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">replica_announced:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:b55e9c85960e80a9657a81b5c2821546c4e8a2f9</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:126</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:126</span><br></pre></td></tr></table></figure>

<ul>
<li>从节点 <strong>172.16.4.218</strong> 状态</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@redis08 redis]<span class="comment"># ./bin/redis-cli </span></span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:172.16.4.216</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:8</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_read_repl_offset:56</span><br><span class="line">slave_repl_offset:56</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">replica_announced:1</span><br><span class="line">connected_slaves:1</span><br><span class="line">slave0:ip=172.16.4.219,port=6379,state=online,offset=56,lag=0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:b55e9c85960e80a9657a81b5c2821546c4e8a2f9</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:56</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:56</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>中间件</category>
        <category>存储</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>SkyWalking链路追踪（容器）</title>
    <url>/2023/05/27/skywalking-docker/</url>
    <content><![CDATA[<h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>准备两台服务器</p>
<table>
<thead>
<tr>
<th>节点名</th>
<th>服务</th>
<th>ip</th>
<th>port</th>
</tr>
</thead>
<tbody><tr>
<td>skyworking-es</td>
<td>elasticseach</td>
<td>172.16.4.171</td>
<td>9200</td>
</tr>
<tr>
<td>skyworking-oap</td>
<td>skyworking-oap</td>
<td>172.16.4.172</td>
<td>12800</td>
</tr>
<tr>
<td>skyworking-ui</td>
<td>skyworking-ui</td>
<td>172.16.4.173</td>
<td>8080</td>
</tr>
</tbody></table>
<span id="more"></span>

<h3 id="服务安装"><a href="#服务安装" class="headerlink" title="服务安装"></a>服务安装</h3><h4 id="安装ElasticSearch"><a href="#安装ElasticSearch" class="headerlink" title="安装ElasticSearch"></a>安装ElasticSearch</h4><blockquote>
<p><a href="https://blog.csdn.net/u012285269/article/details/124515671">安装【es in docker】</a></p>
</blockquote>
<h4 id="安装SkyWalking"><a href="#安装SkyWalking" class="headerlink" title="安装SkyWalking"></a>安装SkyWalking</h4><h5 id="安装skywalking-oap服务"><a href="#安装skywalking-oap服务" class="headerlink" title="安装skywalking-oap服务"></a>安装skywalking-oap服务</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@skyworking ~]<span class="comment"># mkdir -p /usr/local/skyworking-oap/ &amp;&amp; cd /usr/local/skyworking-oap/</span></span><br></pre></td></tr></table></figure>

<p>restart.sh（启动服务）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">name=skyworking-oap-server</span><br><span class="line">cId=$(docker ps -a | grep <span class="variable">$name</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$name</span> container id : <span class="variable">$cId</span>&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$cId</span>&quot;</span> ]; <span class="keyword">then</span> </span><br><span class="line">     docker run --name <span class="variable">$name</span> \</span><br><span class="line">     -p 1234:1234 \</span><br><span class="line">     -p 11800:11800 \</span><br><span class="line">     -p 12800:12800 \</span><br><span class="line">     --restart always \</span><br><span class="line">     -e SW_STORAGE=elasticsearch \</span><br><span class="line">     -e SW_STORAGE_ES_CLUSTER_NODES=172.16.4.171:9200 \</span><br><span class="line">     -d apache/skywalking-oap-server:8.8.1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">     sId=$(docker ps | grep <span class="variable">$name</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line">     <span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$sId</span>&quot;</span> ]; <span class="keyword">then</span> </span><br><span class="line">         docker stop <span class="variable">$sId</span></span><br><span class="line">     <span class="keyword">fi</span></span><br><span class="line">     docker start <span class="variable">$cId</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>cleanup.sh（清理脚本）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/bash</span></span><br><span class="line">name=skyworking-oap</span><br><span class="line">cId=$(docker ps | grep <span class="variable">$name</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$cId</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;stop <span class="variable">$name</span> id:<span class="variable">$cId</span> ...&quot;</span></span><br><span class="line">   docker stop <span class="variable">$cId</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">sId=$(docker ps -a | grep <span class="variable">$name</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$sId</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;remove <span class="variable">$name</span> id:<span class="variable">$sId</span> !&quot;</span></span><br><span class="line">   docker <span class="built_in">rm</span> <span class="variable">$sId</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>调整vm.xxx参数（注意看启动日志）</p>
<h5 id="安装skywalking-ui服务"><a href="#安装skywalking-ui服务" class="headerlink" title="安装skywalking-ui服务"></a>安装skywalking-ui服务</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@skyworking ~]<span class="comment"># mkdir -p /usr/local/skyworking-ui/ &amp;&amp; cd /usr/local/skyworking-ui/</span></span><br></pre></td></tr></table></figure>

<p>restart.sh（启动服务）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">name=skyworking-ui</span><br><span class="line">cId=$(docker ps -a | grep <span class="variable">$name</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$name</span> container id : <span class="variable">$cId</span>&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$cId</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">     docker run --name <span class="variable">$name</span> \</span><br><span class="line">     -p 8080:8080 \</span><br><span class="line">     --restart always \</span><br><span class="line">     -e SW_OAP_ADDRESS=http://172.16.4.172:12800 \</span><br><span class="line">     -d apache/skywalking-ui:8.8.1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">     sId=$(docker ps | grep <span class="variable">$name</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line">     <span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$sId</span>&quot;</span> ]; <span class="keyword">then</span> </span><br><span class="line">         docker stop <span class="variable">$sId</span></span><br><span class="line">     <span class="keyword">fi</span></span><br><span class="line">     docker start <span class="variable">$cId</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>cleanup.sh（清理脚本）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/bash</span></span><br><span class="line">name=skyworking-ui</span><br><span class="line">cId=$(docker ps | grep <span class="variable">$name</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$cId</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;stop <span class="variable">$name</span> id:<span class="variable">$cId</span> ...&quot;</span></span><br><span class="line">   docker stop <span class="variable">$cId</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">sId=$(docker ps -a | grep <span class="variable">$name</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$sId</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;remove <span class="variable">$name</span> id:<span class="variable">$sId</span> !&quot;</span></span><br><span class="line">   docker <span class="built_in">rm</span> <span class="variable">$sId</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ol>
<li><a href="https://blog.csdn.net/u013360850/article/details/81322875">服务追踪工具 SkyWorking 搭建使用</a></li>
</ol>
]]></content>
      <categories>
        <category>中间件</category>
        <category>监控</category>
        <category>SkyWalking</category>
      </categories>
      <tags>
        <tag>日志链路</tag>
        <tag>SkyWalking</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot配置介绍、备忘录等</title>
    <url>/2023/05/28/springboot-cicd-notes/</url>
    <content><![CDATA[<h3 id="Dockerfile文件内容及位置"><a href="#Dockerfile文件内容及位置" class="headerlink" title="Dockerfile文件内容及位置"></a>Dockerfile文件内容及位置</h3><p>文件所在的目录<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/springboot/01410678b572433daef1524b1567bdad.png" alt="SpringBoot项目目录截图"></p>
<span id="more"></span>

<p>Dockerfile内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM registry.cn-hangzhou.aliyuncs.com/ejy365/ejy-jdk8:2.0.4</span><br><span class="line"># 添加当前包</span><br><span class="line">ADD ./target/eureka-*.jar app.jar</span><br><span class="line"># 环境变量</span><br><span class="line">ENV HOST_NAME 127.0.0.1</span><br><span class="line">ENV DEFAULT_ZONE http://127.0.0.1:8761/eureka/</span><br><span class="line"># 暴露端口</span><br><span class="line">EXPOSE 8761</span><br><span class="line"># 作者信息</span><br><span class="line">MAINTAINER zangh &lt;619144426@qq.com&gt;</span><br></pre></td></tr></table></figure>

<h3 id="SpringBoot依赖配置"><a href="#SpringBoot依赖配置" class="headerlink" title="SpringBoot依赖配置"></a>SpringBoot依赖配置</h3><p>dockerfile-maven-plugin插件为 <del>docker-maven-plugin（不再维护）</del> 的升级版本。</p>
<ul>
<li>通过系统变量DOCKER_HOST可指定docker服务接口</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dockerfile-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>build-image<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 如果package时不想用docker打包，就注释掉这个goal --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>build<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>push<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>tag<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 对应docker images下的REPOSITORY --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span>$&#123;docker.image.prefix&#125;/$&#123;docker.project.artifactId&#125;<span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 对应docker images下的TAG，默认latest --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tag</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">buildArgs</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">JAR_FILE</span>&gt;</span>target/$&#123;project.build.finalName&#125;<span class="tag">&lt;/<span class="name">JAR_FILE</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">buildArgs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Jenkins任务配置"><a href="#Jenkins任务配置" class="headerlink" title="Jenkins任务配置"></a>Jenkins任务配置</h3><h4 id="构建自由风格任务"><a href="#构建自由风格任务" class="headerlink" title="构建自由风格任务"></a>构建自由风格任务</h4><p>选择参数配置化项目<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/springboot/f5cc016b1545412fb497db23ca6d53c6.png" alt="参数配置化截图"></p>
<p>如果存在多个jenkins运行节点，给每个节点打上一个或多个标签（相同的标签节点会自动成组）。通过选择标签制定任务只能在制定的jenkins节点上执行。<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/springboot/f495995a6b9644e4bfde558e1bbc308e.png" alt="运行节点截图"></p>
<ul>
<li>例如有三个如下节点（当选择标签java时，则改jenkins任务只会在node01，node02上被执行）：<br>node01: centos java python<br>node02: centos java nodejs<br>node03: centos nodejs python</li>
</ul>
<p>配置托管源码的CVM<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/springboot/ac322dd19da9472c9421c13a6cc28708.png" alt="Gitee配置"></p>
<p>配置maven构建参数<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/springboot/31027383eec44c1d88eb53c6e6eba6eb.png" alt="maven相关配置"></p>
<ul>
<li>clean package命令打包后，dockerfile:build命令会使用Dockerfile文件通过DOCKER_HOST指定的docker服务接口打包成Docker镜像并调用docker<br>push命令推送镜像到云端（如需认证，<strong>还要填写-Ddockerfile.username&#x3D;xxx -Ddockerfile.password&#x3D;yyy</strong>）。</li>
</ul>
<p>在目标节点上启动服务<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/springboot/a6a4e41ca50d49b38d0bc724e3fad429.png" alt="SSH发布插件截图"></p>
<h3 id="服务节点配置"><a href="#服务节点配置" class="headerlink" title="服务节点配置"></a>服务节点配置</h3><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><p>安装docker服务参考，<a href="https://blog.csdn.net/u012285269/article/details/124479943">安装【docker in centos7.x】</a></p>
<h4 id="启动脚本"><a href="#启动脚本" class="headerlink" title="启动脚本"></a>启动脚本</h4><p>以下以service-order服务为例的服务脚本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">name=service-order</span><br><span class="line">cId=$(docker ps -a | grep <span class="variable">$name</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$name</span> container id : <span class="variable">$cId</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$cId</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">   sId=$(docker ps | grep <span class="variable">$name</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$sId</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">       <span class="built_in">echo</span> <span class="string">&quot;stop container id :&quot;</span></span><br><span class="line">       docker stop <span class="variable">$sId</span></span><br><span class="line">   <span class="keyword">fi</span></span><br><span class="line">   </span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;rm container id :&quot;</span></span><br><span class="line">   docker <span class="built_in">rm</span> <span class="variable">$cId</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;restart container&quot;</span></span><br><span class="line"></span><br><span class="line">docker login --username=1801****403 --password=***** registry.cn-hangzhou.aliyuncs.com</span><br><span class="line"></span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/ejy365/zanghcloud-service-order:1.0.0-SNAPSHOT</span><br><span class="line"></span><br><span class="line">docker run --name <span class="variable">$name</span> \</span><br><span class="line">--restart=always \</span><br><span class="line">-v /usr/local/www/services/order/logs:/ejy/logs \</span><br><span class="line">-p 9091:9091 \</span><br><span class="line">-e HOST_NAME=<span class="string">&quot;192.168.1.133&quot;</span> \</span><br><span class="line">-e DEFAULT_ZONE=<span class="string">&quot;http://admin:123456@192.168.1.130:8761/eureka/,http://admin:123456@192.168.1.131:8761/eureka/,http://admin:123456@192.168.1.132:8761/eureka/&quot;</span> \</span><br><span class="line">-e IP_ADDRESS=<span class="string">&quot;192.168.1.133&quot;</span> \</span><br><span class="line">-e jvmparams=<span class="string">&quot;-Xmx512m -Xms512m&quot;</span> \</span><br><span class="line">-e profile=<span class="string">&quot;test&quot;</span> \</span><br><span class="line">-d registry.cn-hangzhou.aliyuncs.com/ejy365/zanghcloud-service-order:1.0.0-SNAPSHOT</span><br></pre></td></tr></table></figure>

<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ol>
<li><a href="https://blog.51cto.com/u_1472521/5050615">使用maven插件dockerfile-maven-plugin进行镜像的build和push</a></li>
</ol>
]]></content>
      <categories>
        <category>云原生</category>
        <category>微服务</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>maven</tag>
        <tag>jenkins</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>uboot-notes</title>
    <url>/2023/06/30/uboot-nodes/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>安装SonarQube服务（容器）</title>
    <url>/2023/05/28/sonarqube-docker/</url>
    <content><![CDATA[<h3 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h3><h4 id="软件架构图"><a href="#软件架构图" class="headerlink" title="软件架构图"></a>软件架构图</h4><p>SonarQube系统架构图，来自<a href="https://docs.sonarqube.org/latest/setup/install-server/">官方文档</a>：</p>
<p><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/sonarqube/4277f765c5264122bf6c314769c90644.png" alt="SonarQube系统架构图"></p>
<ul>
<li>官方 <a href="https://hub.docker.com/_/sonarqube/">docker</a> 镜像 - &gt; <a href="https://hub.docker.com/_/sonarqube/tags?page=1&name=community">sonarqube</a></li>
</ul>
<span id="more"></span>

<h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><h4 id="安装postgres数据库"><a href="#安装postgres数据库" class="headerlink" title="安装postgres数据库"></a>安装postgres数据库</h4><ul>
<li>创建安装目录</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@sonarqube-postgres ~]<span class="comment"># cd /usr/local/</span></span><br><span class="line">[root@sonarqube-postgres <span class="built_in">local</span>]<span class="comment"># mkdir postgres &amp;&amp; cd postgres</span></span><br></pre></td></tr></table></figure>

<ul>
<li>restart.sh</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">dir</span>=/usr/local/postgres</span><br><span class="line">name=postgres-12</span><br><span class="line">containerId=$(docker ps --filter name=<span class="variable">$name</span> -aq)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$containerId</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="string">&quot;create container: <span class="variable">$name</span> (dir: <span class="variable">$dir</span>)&quot;</span></span><br><span class="line">     docker run --name <span class="variable">$name</span> \</span><br><span class="line">     --restart=always \</span><br><span class="line">     -p 5432:5432 \</span><br><span class="line">     -e POSTGRES_USER=sonar \</span><br><span class="line">     -e POSTGRES_PASSWORD=sonar \</span><br><span class="line">     -v <span class="variable">$dir</span>/postgresql/:/var/lib/postgresql/ \</span><br><span class="line">     -v <span class="variable">$dir</span>/postgresql_data/:/var/lib/postgresql/data/ \</span><br><span class="line">     -v /etc/localtime:/etc/localtime:ro \</span><br><span class="line">     -d postgres:12</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">     sContainerId=$(docker ps --filter name=<span class="variable">$name</span> -q)</span><br><span class="line">     <span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$sContainerId</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">         <span class="built_in">echo</span> <span class="string">&quot;restart container: <span class="variable">$name</span>&quot;</span></span><br><span class="line">         docker restart <span class="variable">$sContainerId</span></span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">         <span class="built_in">echo</span> <span class="string">&quot;start container: <span class="variable">$name</span>&quot;</span></span><br><span class="line">         docker start <span class="variable">$containerId</span></span><br><span class="line">     <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<ul>
<li>cleanup.sh</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">name=postgres-12</span><br><span class="line">cId=$(docker ps | grep <span class="variable">$name</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$cId</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;stop <span class="variable">$name</span> id:<span class="variable">$cId</span> ...&quot;</span></span><br><span class="line">   docker stop <span class="variable">$cId</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">sId=$(docker ps -a | grep <span class="variable">$name</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$sId</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;remove <span class="variable">$name</span> id:<span class="variable">$sId</span> !&quot;</span></span><br><span class="line">   docker <span class="built_in">rm</span> <span class="variable">$sId</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<ul>
<li>开放防火墙的端口</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@sonarqube-postgres postgres]<span class="comment"># firewall-cmd --zone=public --add-port=5432/tcp --permanent</span></span><br><span class="line">[root@sonarqube-postgres postgres]<span class="comment"># firewall-cmd --reload</span></span><br></pre></td></tr></table></figure>

<h4 id="安装sonarqube服务"><a href="#安装sonarqube服务" class="headerlink" title="安装sonarqube服务"></a>安装sonarqube服务</h4><ul>
<li>创建安装目录</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@sonarqube ~]<span class="comment"># cd /usr/local/</span></span><br><span class="line">[root@sonarqube <span class="built_in">local</span>]<span class="comment"># mkdir sonarqube &amp;&amp; cd sonarqube</span></span><br></pre></td></tr></table></figure>

<ul>
<li>restart.sh</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">dir</span>=/usr/local/sonarqube</span><br><span class="line">name=sonarqube</span><br><span class="line">containerId=$(docker ps --filter name=<span class="variable">$name</span> -aq)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$containerId</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="string">&quot;create container: <span class="variable">$name</span> (dir: <span class="variable">$dir</span>)&quot;</span></span><br><span class="line">     docker run --name <span class="variable">$name</span> \</span><br><span class="line">     --restart=always \</span><br><span class="line">     -p 9000:9000 \</span><br><span class="line">     -e SONAR_JDBC_URL=jdbc:postgresql://172.16.4.152:5432/sonar \</span><br><span class="line">     -e SONAR_JDBC_USERNAME=sonar \</span><br><span class="line">     -e SONAR_JDBC_PASSWORD=sonar \</span><br><span class="line">     -v <span class="variable">$dir</span>/data/:/opt/sonarqube/data/ \</span><br><span class="line">     -v <span class="variable">$dir</span>/logs/:/opt/sonarqube/logs \</span><br><span class="line">     -v <span class="variable">$dir</span>/extensions/:/opt/sonarqube/extensions \</span><br><span class="line">     -v /etc/localtime:/etc/localtime:ro \</span><br><span class="line">     -d sonarqube:community</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">     sContainerId=$(docker ps --filter name=<span class="variable">$name</span> -q)</span><br><span class="line">     <span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$sContainerId</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">         <span class="built_in">echo</span> <span class="string">&quot;restart container: <span class="variable">$name</span>&quot;</span></span><br><span class="line">         docker restart <span class="variable">$sContainerId</span></span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">         <span class="built_in">echo</span> <span class="string">&quot;start container: <span class="variable">$name</span>&quot;</span></span><br><span class="line">         docker start <span class="variable">$containerId</span></span><br><span class="line">     <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<ul>
<li>cleanup.sh</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">name=sonarqube</span><br><span class="line">cId=$(docker ps | grep <span class="variable">$name</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$cId</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;stop <span class="variable">$name</span> id:<span class="variable">$cId</span> ...&quot;</span></span><br><span class="line">   docker stop <span class="variable">$cId</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">sId=$(docker ps -a | grep <span class="variable">$name</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$sId</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;remove <span class="variable">$name</span> id:<span class="variable">$sId</span> !&quot;</span></span><br><span class="line">   docker <span class="built_in">rm</span> <span class="variable">$sId</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<ul>
<li>开放防火墙的端口</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@sonarqube-postgres postgres]<span class="comment"># firewall-cmd --zone=public --add-port=9000/tcp --permanent</span></span><br><span class="line">[root@sonarqube-postgres postgres]<span class="comment"># firewall-cmd --reload</span></span><br></pre></td></tr></table></figure>

<h4 id="登录SonarQube并配置"><a href="#登录SonarQube并配置" class="headerlink" title="登录SonarQube并配置"></a>登录SonarQube并配置</h4><ul>
<li>访问地址：<a href="http://172.16.4.151:9000/%EF%BC%8C%E9%BB%98%E8%AE%A4%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81%EF%BC%9Aadmin/admin">http://172.16.4.151:9000/，默认账号密码：admin/admin</a></li>
<li>初次登录需要重置密码：admin&#x2F;123456<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/sonarqube/db9dab7840cd4ba2b0f8da5a5aa67d97.png" alt="配置界面"></li>
</ul>
<h4 id="安装Chinese中文插件"><a href="#安装Chinese中文插件" class="headerlink" title="安装Chinese中文插件"></a>安装Chinese中文插件</h4><ul>
<li>选择“Administration” &#x3D;&gt; “Marketplace”，输入Chinese搜索中文汉化包（或者离线下载放到 <font color=#0000ff>$PWD&#x2F;extensions&#x2F;plugins</font> 目录下）<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/sonarqube/129b70efd7e34bf89646f571abaa1809.png" alt="安装插件"></li>
<li>重启SonarQube使插件生效</li>
</ul>
<h4 id="在IDEA安装SonarLint插件"><a href="#在IDEA安装SonarLint插件" class="headerlink" title="在IDEA安装SonarLint插件"></a>在IDEA安装SonarLint插件</h4><ul>
<li>SonarLint插件的 <a href="https://www.sonarqube.org/sonarlint/?referrer=sonarqube-welcome">使用说明</a><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/sonarqube/8670e07cad5947b58eed9e5712f65fa1.png" alt="在这里插入图片描述"></li>
</ul>
<h3 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h3><h4 id="错误信息-vm-max-map-count-配置问题"><a href="#错误信息-vm-max-map-count-配置问题" class="headerlink" title="错误信息 vm.max_map_count 配置问题"></a>错误信息 vm.max_map_count 配置问题</h4><ul>
<li><p>max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]<br>ERROR: [1] bootstrap checks failed. You must address the points described in the following [1] lines before starting<br>Elasticsearch.<br>bootstrap check failure [1] of [1]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at<br>least [262144]<br>ERROR: Elasticsearch did not exit normally - check the logs at &#x2F;opt&#x2F;sonarqube&#x2F;logs&#x2F;sonarqube.log</p>
</font>
</li>
<li><p>解决方法 <a href="https://blog.csdn.net/u012285269/article/details/126767192">修改linux配置</a></p>
<font color=#0000ff></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@sonarqube sonarqube]<span class="comment"># vi /etc/sysctl.conf</span></span><br><span class="line">……</span><br><span class="line">vm.max_map_count=262144</span><br><span class="line">……</span><br><span class="line">[root@sonarqube sonarqube]<span class="comment"># sysctl -p</span></span><br></pre></td></tr></table></figure>

<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ol>
<li><a href="https://blog.csdn.net/heian_99/article/details/124814780">Jenkins集成Sonar Qube</a></li>
</ol>
]]></content>
      <categories>
        <category>中间件</category>
        <category>代码质量</category>
        <category>SonarQube</category>
      </categories>
      <tags>
        <tag>容器</tag>
        <tag>SonarQube</tag>
      </tags>
  </entry>
  <entry>
    <title>永中在线文档应用</title>
    <url>/2023/09/12/weboffice-yozo-notes/</url>
    <content><![CDATA[<h3 id="流程结构"><a href="#流程结构" class="headerlink" title="流程结构"></a>流程结构</h3><p><img data-src="http://42.192.155.41/yozo/%E6%B0%B8%E4%B8%AD%E5%9C%A8%E7%BA%BF%E6%96%87%E6%A1%A3%E6%8E%A5%E5%85%A5%E6%B5%81%E7%A8%8B.png" alt="流程图"></p>
<span id="more"></span>

<h3 id="在线预览"><a href="#在线预览" class="headerlink" title="在线预览"></a>在线预览</h3><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><blockquote>
<p>永中FCS在线预览服务能做什么？</p>
<ol>
<li><p>在线预览功能：支持把 <em><strong>pdf</strong></em>、<em><strong>word</strong></em>、<em><strong>excel</strong></em>、ppt等文档转换成html&#x2F;html_canvas（<em>类似图片形式，可以防复制</em>）方式进行预览，支持对源文档的下载（<em><strong>目前只使用了该功能</strong></em>）。</p>
</li>
<li><p>文档格式转换：各种文档格式互相转换并下载（这里只做了解）。</p>
</li>
</ol>
</blockquote>
<h4 id="交互概览"><a href="#交互概览" class="headerlink" title="交互概览"></a>交互概览</h4><blockquote>
<p>参考文档<a href="http://42.192.155.41/yozo/fcs/%E6%B0%B8%E4%B8%AD%E6%96%87%E6%A1%A3%E5%9C%A8%E7%BA%BF%E9%A2%84%E8%A7%88%E8%BD%AF%E4%BB%B6-%E4%BA%A7%E5%93%81%E7%99%BD%E7%9A%AE%E4%B9%A6.pdf">《永中文档在线预览软件-产品白皮书.pdf》</a>第三章3.1、3.2小节</p>
</blockquote>
<h5 id="大致流程"><a href="#大致流程" class="headerlink" title="大致流程"></a>大致流程</h5><p><img data-src="http://42.192.155.41/yozo/fcs/20230914093622.png" alt="在线预览交互图"></p>
<h5 id="详细步骤"><a href="#详细步骤" class="headerlink" title="详细步骤"></a>详细步骤</h5><p><img data-src="http://42.192.155.41/yozo/fcs/20230914094906.png" alt="在线预览交互图"></p>
<ul>
<li>A、B、C三类步骤只适用于区分fcs内部对不同文档类型和服务的不同实现，应用接入的流程基本一致。只需看其中一种即可，例如A类。</li>
</ul>
<h3 id="在线编辑"><a href="#在线编辑" class="headerlink" title="在线编辑"></a>在线编辑</h3><h4 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h4><blockquote>
<p>永中WebOffice在线编辑服务能做什么？</p>
<ul>
<li>支持对 <em><strong>word</strong></em>、<em><strong>excel</strong></em>、ppt进行多人在线编辑（<strong>注：不支持pdf在线编辑</strong>）</li>
<li>提供套红、公文域、自动保存、批注、修订、查看历史记录、只读模式、限制编辑、保护工作表等功能</li>
<li>兼容Chrome、Firefox、Edge、IE11等主流的浏览器</li>
</ul>
</blockquote>
<h4 id="交互概览-1"><a href="#交互概览-1" class="headerlink" title="交互概览"></a>交互概览</h4><p><img data-src="http://42.192.155.41/yozo/wo/flow.png" alt="在线预览交互图"></p>
<ul>
<li>主要看 <em>上传调用</em> 和 <em>开档调用</em> 两部分：我们的接口调用都是内部，可以不考虑授权部分。</li>
</ul>
<h3 id="接入介绍"><a href="#接入介绍" class="headerlink" title="接入介绍"></a>接入介绍</h3><h4 id="模块介绍"><a href="#模块介绍" class="headerlink" title="模块介绍"></a>模块介绍</h4><blockquote>
<p>源码地址：<a href="http://192.168.125.2/group2/yozo-office.git">yozo-office</a> 分支master</p>
</blockquote>
<p><img data-src="http://42.192.155.41/yozo/20230914100929.png" alt="在线预览交互图"></p>
<ul>
<li>app（即demo项目）：展示业务系统如何通过sdk快速接入。</li>
<li>gateway：是自定义的网关，用于作为后续自定义功能的扩展点（例如：认证、负载均衡、限流、etc.）,也可以对接口做精细化控制（例如：控制接口的启用和禁用），目前只负责路由转发。</li>
<li>sdk：封装yozo的服务，简化接口调用，降低业务系统的接入成本。</li>
</ul>
<h5 id="gateway"><a href="#gateway" class="headerlink" title="gateway"></a>gateway</h5><blockquote>
<p>基于spring-cloud-gateway没有太多好介绍的，网上的资料很多（基于WebFlux框架，底层使用了高性能的Reactor模式通信框架Netty；另外它是一种反应式编程方式和我们通常写的命令式有所区别，有一定的学习成本），最主要是一个配置文件。</p>
</blockquote>
<ul>
<li>只截取路由配置的部分：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">18787</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">yozo-gateway</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">globalcors:</span>                              </span><br><span class="line">        <span class="attr">corsConfigurations:</span>                    <span class="comment">## 跨域配置</span></span><br><span class="line">          <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span>                             <span class="comment">## 允许所有请求通过</span></span><br><span class="line">            <span class="attr">allowedOrigins:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">            <span class="attr">allowedHeader:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">            <span class="attr">allowedMethods:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">GET</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">OPTION</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">POST</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">PUT</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">DELETE</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">fcs</span>                              <span class="comment">## 在线预览</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://192.168.11.199:18090</span></span><br><span class="line">          <span class="attr">order:</span> <span class="number">19</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/fcs/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RewritePath=fcs/(?&lt;segment&gt;.*),</span> <span class="string">/$\&#123;segment&#125;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">wo-demo</span>                          <span class="comment">## wo（weboffice缩写）演示项目，可以查看开发文档【生产环境不需要】</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://192.168.11.20:19090</span></span><br><span class="line">          <span class="attr">order:</span> <span class="number">20</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/wo-demo/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RewritePath=wo-demo/(?&lt;segment&gt;.*),</span> <span class="string">/$\&#123;segment&#125;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">wo-websocket</span>                     <span class="comment">## 在线编辑-websocket代理</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">ws://192.168.11.20:18080</span></span><br><span class="line">          <span class="attr">order:</span> <span class="number">21</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/wo/websocket/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RewritePath=wo/websocket/(?&lt;segment&gt;.*),</span> <span class="string">/$\&#123;segment&#125;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RemoveRequestHeader=Sec-WebSocket-Protocol</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">wo</span>                               <span class="comment">## 在线编辑</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://192.168.11.20:18080</span></span><br><span class="line">          <span class="attr">order:</span> <span class="number">29</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/wo/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RewritePath=wo/(?&lt;segment&gt;.*),</span> <span class="string">/$\&#123;segment&#125;</span></span><br></pre></td></tr></table></figure>

<h5 id="sdk"><a href="#sdk" class="headerlink" title="sdk"></a>sdk</h5><ul>
<li>代码结构</li>
</ul>
<p><img data-src="http://42.192.155.41/yozo/20230914103841.png" alt="在线预览交互图"></p>
<ul>
<li>打包方法</li>
</ul>
<p><img data-src="http://42.192.155.41/yozo/20230914104353.png" alt="在线预览交互图"></p>
<ul>
<li>引入方法</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;!-- 添加sdk依赖 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.ejy365.office&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;sdk&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;system&lt;/scope&gt;</span><br><span class="line">    &lt;systemPath&gt;$&#123;project.basedir&#125;/src/main/resources/lib/sdk-1.0.0-SNAPSHOT.jar&lt;/systemPath&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p><img data-src="http://42.192.155.41/readme/image/%E6%89%93%E5%8C%85%E5%BC%95%E5%85%A5_20230317145742.png" alt="引入位置"></p>
<h5 id="app（demo）"><a href="#app（demo）" class="headerlink" title="app（demo）"></a>app（demo）</h5><ul>
<li>目录说明</li>
</ul>
<p><img data-src="http://42.192.155.41/yozo/20230914104945.png" alt="在线预览交互图"></p>
<h6 id="主要的配置文件"><a href="#主要的配置文件" class="headerlink" title="主要的配置文件"></a>主要的配置文件</h6><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">yozo</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">office</span>:<span class="string"></span></span><br><span class="line"><span class="comment">    # 为应用的回掉地址，用于接收wo在线编辑文档的保存、关闭通知（改成自己的地址）</span></span><br><span class="line">    <span class="attr">callback</span>: <span class="string">http://192.168.65.142:11081/api/wo/callback</span></span><br><span class="line"><span class="comment">    # yozo-gateway网关地址</span></span><br><span class="line">    <span class="attr">api</span>: <span class="string">http://192.168.11.199:18787</span></span><br></pre></td></tr></table></figure>

<h6 id="在线预览接入关键代码"><a href="#在线预览接入关键代码" class="headerlink" title="在线预览接入关键代码"></a>在线预览接入关键代码</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (dto.getSource()) &#123;</span><br><span class="line">     <span class="keyword">case</span> <span class="number">1</span>:  <span class="comment">// 服务器文件，例如把文件放到nfs上，可以避免文件通过网络传输（不推荐，存在耦合性）</span></span><br><span class="line">         reqBuilder = FcsConvertServerReq.builder().srcRelativePath(dto.getFilePath());</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">     <span class="keyword">case</span> <span class="number">2</span>:  <span class="comment">// 本地文件，通过把文件序列化后放到body体里面，一起提交给fcs服务</span></span><br><span class="line">         reqBuilder = FcsConvertLocalReq.builder().filePath(dto.getFilePath());</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">     <span class="keyword">case</span> <span class="number">3</span>:  <span class="comment">// 网络地址，把url发送给fcs服务，由它进行下载（需要确保fcs到文件地址的网络通路）</span></span><br><span class="line">         reqBuilder = FcsConvertHttpReq.builder().fileUrl(dto.getFilePath());</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">     <span class="keyword">default</span>:</span><br><span class="line">         <span class="keyword">return</span> JsonResult.error(<span class="string">&quot;文件来源不合法：source=&quot;</span> + dto.getSource());</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">FcsFileConvertRet</span> <span class="variable">ret</span> <span class="operator">=</span> httpClient.fcsPost(reqBuilder.convertType(dto.getViewType())</span><br><span class="line">         .time(<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>)         <span class="comment">// 预览链接失效时间，这里设置为1天</span></span><br><span class="line">         .num(<span class="number">1</span>)                     <span class="comment">// 预览链接可用次数，防盗链</span></span><br><span class="line">         .isDelSrc(<span class="number">1</span>)                <span class="comment">// 生成预览后是否删除源文件</span></span><br><span class="line">         .isCopy(<span class="number">0</span>)                  <span class="comment">// HtmlCanvas文件是否能复制内容</span></span><br><span class="line">         .htmlTitle(<span class="string">&quot;文档预览-&quot;</span> + StrUtil.blankToDefault(dto.getFileName(), <span class="string">&quot;?&quot;</span>))</span><br><span class="line">         .htmlName(StrUtil.blankToDefault(dto.getFileName(), StrUtil.EMPTY))</span><br><span class="line">         .isDownload(<span class="number">0</span>)              <span class="comment">// 是否显示下载按钮</span></span><br><span class="line">         .isDccAsync(<span class="number">1</span>)              <span class="comment">// 是否边看边转换</span></span><br><span class="line">         .wmContent(<span class="string">&quot;ejy365&quot;</span>)        <span class="comment">// 文字水印，非必填</span></span><br><span class="line">         .otherFormMap(<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;() &#123;&#123;</span><br><span class="line">             <span class="comment">// 其它参数，可按文档说明传递</span></span><br><span class="line">             put(<span class="string">&quot;wmSize&quot;</span>, <span class="number">32</span>);      <span class="comment">// 水印文字大小</span></span><br><span class="line">             put(<span class="string">&quot;wmColor&quot;</span>, <span class="string">&quot;red&quot;</span>);  <span class="comment">// 水印文字颜色</span></span><br><span class="line">         &#125;&#125;)</span><br><span class="line">         .build(), FcsFileConvertRet.class);</span><br><span class="line"><span class="keyword">if</span> (ret.getErrorcode() != <span class="number">0</span>) &#123;</span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">YozoException</span>(ret.getErrorcode(), ret.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>请求参数说明：参考<a href="http://42.192.155.41/yozo/fcs/%E6%B0%B8%E4%B8%AD%E6%96%87%E6%A1%A3%E5%9C%A8%E7%BA%BF%E9%A2%84%E8%A7%88%E8%BD%AF%E4%BB%B6%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%E5%8F%8A%E8%B0%83%E7%94%A8%E7%A4%BA%E4%BE%8B.pdf">《永中文档在线预览软件接口文档及调用示例.pdf》</a>第三章，3.1、3.2小节。</li>
<li>响应参数说明：参考<a href="http://42.192.155.41/yozo/fcs/%E6%B0%B8%E4%B8%AD%E6%96%87%E6%A1%A3%E5%9C%A8%E7%BA%BF%E9%A2%84%E8%A7%88%E8%BD%AF%E4%BB%B6%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%E5%8F%8A%E8%B0%83%E7%94%A8%E7%A4%BA%E4%BE%8B.pdf">《永中文档在线预览软件接口文档及调用示例.pdf》</a>第三章，3.3小节。</li>
</ul>
<h6 id="在线编辑接入关键代码"><a href="#在线编辑接入关键代码" class="headerlink" title="在线编辑接入关键代码"></a>在线编辑接入关键代码</h6><ul>
<li>打开文档（支持两个打开方式：1.本地文件【<strong>需要先上传</strong>】 2.网络地址）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.文件类型</span></span><br><span class="line"><span class="keyword">if</span> (HttpUtil.isHttp(dto.getFilePath()) || HttpUtil.isHttps(dto.getFilePath())) &#123;</span><br><span class="line">    filePath = dto.getFilePath();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (FileUtil.isFile(dto.getFilePath())) &#123;</span><br><span class="line">    <span class="comment">// 本地文件需要先调用接口上传文件先</span></span><br><span class="line">    <span class="type">WoFileUploadRet</span> <span class="variable">ret</span> <span class="operator">=</span> httpClient.woPost(WoFileUploadReq.builder()</span><br><span class="line">                .filePath(dto.getFilePath())</span><br><span class="line">                .fileId(dto.getFileId())</span><br><span class="line">                .fileName(dto.getFileName())</span><br><span class="line">                .build(), WoFileUploadRet.class);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="string">&quot;0&quot;</span>.equals(ret.getErrorCode())) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">YozoException</span>(<span class="number">500</span>, <span class="string">&quot;上传文件失败：&quot;</span> + ret.getErrorMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    filePath = ret.getResult().getFilePath();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">YozoException</span>(<span class="number">500</span>, <span class="string">&quot;filePath仅本地文件（例如：C:/documents/1.docx）和网络文件（例如：http|https://xxx）&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2.发送请求</span></span><br><span class="line"><span class="type">WoFileOpenRet</span> <span class="variable">ret</span> <span class="operator">=</span> httpClient.woApiPost(WoApiFileOpenReq.builder()</span><br><span class="line">                .filePath(filePath)                                         <span class="comment">// 文件地址（必传）</span></span><br><span class="line">                .fileId(dto.getFileId())                                    <span class="comment">// 文件id（必传）</span></span><br><span class="line">                .fileName(dto.getFileName())                                <span class="comment">// 文件名称（必传）</span></span><br><span class="line">                .userId(dto.getUserId())                                    <span class="comment">// 业务方用户唯一标识（必传）</span></span><br><span class="line">                .userName(<span class="string">&quot;my-test0&quot;</span> + dto.getUserId())</span><br><span class="line">                .callbackUrl(httpClient.getProperties().getCallback())      <span class="comment">// 回调地址（必传，否则接收不到回调）</span></span><br><span class="line">                .userRight(dto.getUserRight())                              <span class="comment">// 0.编辑 1.只读 2.临时只读：UserRightTempReadonly = 2;此时页面上编辑—临时只读按钮，打开只能临时只读，不打开可以进行编辑</span></span><br><span class="line">                .saveFlag(<span class="literal">false</span>)                                            <span class="comment">// true：自动保存文档（会影响wo服务性能）；false：不自动保存文档（默认为true）</span></span><br><span class="line">                .build(), WoFileOpenRet.class);</span><br><span class="line"><span class="keyword">if</span> (!<span class="string">&quot;0&quot;</span>.equals(ret.getErrorCode())) &#123;</span><br><span class="line">    <span class="keyword">return</span> JsonResult.error(ret.getErrorMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>接口请求和响应参数说明参考：<a href="http://192.168.11.20:18080/s/help.html#api">永中WO帮助文档</a>，1.打开文档</p>
</blockquote>
<ul>
<li>保存文档</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">WoFileSaveRet</span> <span class="variable">ret</span> <span class="operator">=</span> httpClient.woApiPost(WoApiFileSaveReq.builder()</span><br><span class="line">                .fileId(dto.getFileId())</span><br><span class="line">                .build(), WoFileSaveRet.class);</span><br><span class="line"><span class="keyword">if</span> (!<span class="string">&quot;0&quot;</span>.equals(ret.getErrorCode())) &#123;</span><br><span class="line">    <span class="keyword">return</span> JsonResult.error(ret.getErrorMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>接口请求和响应参数说明参考：<a href="http://192.168.11.20:18080/s/help.html#api">永中WO帮助文档</a>，2.保存文档</p>
</blockquote>
<ul>
<li>回调接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存/关闭文档都会回调（触发业务端文档保存逻辑）</span></span><br><span class="line"><span class="comment"> * TODO：业务逻辑一定要放到woDownload方法中处理（位于下载子线程中），方法外同步处理会导致WebOffice卡顿，下载文件超时</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ret 回调参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;callback&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">callback</span><span class="params">(WoCallbackRet ret)</span> &#123;</span><br><span class="line">    httpClient.woDownload(ret, (bytes -&gt; &#123;</span><br><span class="line">        <span class="comment">// 替换为自己想保存的目录</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">targetFilePath</span> <span class="operator">=</span> String.format(<span class="string">&quot;D:/Documents/Ejy365/Downloads/yozo/wo/%s/%s.docx&quot;</span>,</span><br><span class="line">                 ret.getFileId(), <span class="string">&quot;tttt&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;文件位置：&#123;&#125;&quot;</span>, targetFilePath);</span><br><span class="line">        FileUtil.writeBytes(bytes, targetFilePath);</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>回调参数说明参考：<a href="http://192.168.11.20:18080/s/help.html#api">永中WO帮助文档</a>，1.打开文档 &#x3D;&#x3D;&gt; callbackUrl字段</p>
</blockquote>
<h3 id="功能演示"><a href="#功能演示" class="headerlink" title="功能演示"></a>功能演示</h3><blockquote>
<p>为了方便测试预览和编辑网络文件，在 <a href="http://192.168.11.20/">http://192.168.11.20</a> 服务器上搭建了httpd文件服务器。</p>
</blockquote>
<h4 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h4><ul>
<li><p>示例地址：<a href="http://127.0.0.1:18081/">http://127.0.0.1:18081/</a> (启动本项目app模块后访问)<br><img data-src="http://42.192.155.41/readme/image/%E7%A4%BA%E4%BE%8B%E5%9C%B0%E5%9D%80_20230317145141.png" alt="html"></p>
</li>
<li><p>在线预览（支持pdf、word、excel、ppt转html后预览）<br><img data-src="http://42.192.155.41/readme/image/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20230317095017.png" alt="html"><br><img data-src="http://42.192.155.41/readme/image/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20230317095354.png" alt="html"><br><img data-src="http://42.192.155.41/readme/image/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20230317095448.png" alt="html"></p>
</li>
<li><p>在线编辑（支持word、excel、ppt）<br><img data-src="http://42.192.155.41/readme/image/%E5%9C%A8%E7%BA%BF%E7%BC%96%E8%BE%91_20230317095854.png" alt="html"><br><img data-src="http://42.192.155.41/readme/image/%E5%9C%A8%E7%BA%BF%E7%BC%96%E8%BE%91_20230317095944.png" alt="html"><br><img data-src="http://42.192.155.41/readme/image/%E5%9C%A8%E7%BA%BF%E7%BC%96%E8%BE%91_20230317141013.png" alt="html"></p>
</li>
</ul>
<h4 id="在线预览-1"><a href="#在线预览-1" class="headerlink" title="在线预览"></a>在线预览</h4><p>实操演示 …</p>
<h4 id="在线编辑-1"><a href="#在线编辑-1" class="headerlink" title="在线编辑"></a>在线编辑</h4><p>实操演示 …</p>
<h3 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h3><blockquote>
<p>注：这里只做基本的预览、和在线编辑接入。更多的功能前期并未做接入，例如：批量文档转换、文档组装（套<br>红、 签批）、接口二次开发实现定制功能等。</p>
</blockquote>
<h4 id="预览文件在没有缓存情况下的打开速度？"><a href="#预览文件在没有缓存情况下的打开速度？" class="headerlink" title="预览文件在没有缓存情况下的打开速度？"></a>预览文件在没有缓存情况下的打开速度？</h4><ol>
<li>尝试增加转换并发数</li>
<li>增加fcs的jvm堆大小</li>
</ol>
<h4 id="文件格式转换失败后的具体原因不明确！"><a href="#文件格式转换失败后的具体原因不明确！" class="headerlink" title="文件格式转换失败后的具体原因不明确！"></a>文件格式转换失败后的具体原因不明确！</h4>]]></content>
      <categories>
        <category>中间件</category>
        <category>永中文档</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>永中在线文档部署</title>
    <url>/2023/09/12/weboffice-yozo-setup/</url>
    <content><![CDATA[<h3 id="服务简介"><a href="#服务简介" class="headerlink" title="服务简介"></a>服务简介</h3><p>永中文档在线预览软件（以下简称：永中DCS）是永中Office针对政企单位提供的文件预览与文件转换服务，可同时供多个业务系统进行对接和集成， 赋能业务系统实现Office文档、PDF、OFD等格式文档的在线预览与文档批量格式转换。软件包含两个独立的服务，需要业务系统同时集成这两个服务方可实现在线文档处理功能：</p>
<ul>
<li>在线预览：DCS（标准版）&#x2F; <strong>FCS（高级版）</strong></li>
<li>在线编辑：<strong>WebOffice</strong></li>
<li>以上两个服务可以独立部署、互不干涉的使用</li>
</ul>
<span id="more"></span>

<h3 id="FCS（高级版）部署"><a href="#FCS（高级版）部署" class="headerlink" title="FCS（高级版）部署"></a>FCS（高级版）部署</h3><h4 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h4><h5 id="推荐环境"><a href="#推荐环境" class="headerlink" title="推荐环境"></a>推荐环境</h5><blockquote>
<p> 如下，摘抄自<a href="http://42.192.155.41/yozo/fcs/%E6%B0%B8%E4%B8%AD%E6%96%87%E6%A1%A3DCS%E9%AB%98%E7%BA%A7%E7%89%88(FCS)%E8%AF%A6%E7%BB%86%E9%83%A8%E7%BD%B2%E8%AF%B4%E6%98%8E(%E5%8C%85%E5%90%AB%E5%9B%BD%E4%BA%A7%E5%8C%96).pdf">《永中文档DCS高级版(FCS)详细部署说明(包含国产化).pdf》</a>第二节。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">操作系统</th>
<th align="center">CPU架构</th>
<th align="center">Java环境</th>
<th align="center">中间件</th>
<th align="center">redis</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Centos7</td>
<td align="center">x86_64</td>
<td align="center">Sunjdk1.8</td>
<td align="center">Apache-Tomcat-9.0.37</td>
<td align="center">redis_x86.tar.gz</td>
</tr>
</tbody></table>
<h5 id="服务器节点"><a href="#服务器节点" class="headerlink" title="服务器节点"></a>服务器节点</h5><table>
<thead>
<tr>
<th align="center">主机名</th>
<th align="center">操作系统</th>
<th align="center">网络IP</th>
<th align="center">硬件配置</th>
<th align="center">预装软件</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ejy-kf2-jyxt2</td>
<td align="center">CentOS Linux release 7.5.1804 (Core)</td>
<td align="center">192.168.11.199</td>
<td align="center">8c16g-80g</td>
<td align="center">Docker-19.03.5</td>
</tr>
</tbody></table>
<h4 id="部署资料"><a href="#部署资料" class="headerlink" title="部署资料"></a>部署资料</h4><ol>
<li><a href="http://42.192.155.41/yozo/fcs/redis_x86.tar.gz">redis_86.tar.gz</a></li>
<li>yozo-gateway.jar（自定义的封装网关，后续可作为限流、鉴权的扩展点）</li>
<li>fonts.rar（中文字体库）</li>
<li>config.eni、fcs临时授权11.1.eni（授权证书）</li>
<li>jdk-8u221-linux-x64.tar.gz</li>
<li>apache-tomcat-9.0.65.tar.gz</li>
<li>fcscloud.war（官方安装包）</li>
</ol>
<h4 id="部署脚本"><a href="#部署脚本" class="headerlink" title="部署脚本"></a>部署脚本</h4><p>为了在允许的情况下尽量简化服务部署，本服务使用Docker容器化进行部署。</p>
<h5 id="Redis容器化"><a href="#Redis容器化" class="headerlink" title="Redis容器化"></a>Redis容器化</h5><blockquote>
<p>配置细节参考<a href="http://42.192.155.41/yozo/fcs/%E6%B0%B8%E4%B8%AD%E6%96%87%E6%A1%A3DCS%E9%AB%98%E7%BA%A7%E7%89%88(FCS)%E8%AF%A6%E7%BB%86%E9%83%A8%E7%BD%B2%E8%AF%B4%E6%98%8E(%E5%8C%85%E5%90%AB%E5%9B%BD%E4%BA%A7%E5%8C%96).pdf">《永中文档DCS高级版(FCS)详细部署说明(包含国产化).pdf》</a>第五章节。</p>
</blockquote>
<h6 id="整体目录预览"><a href="#整体目录预览" class="headerlink" title="整体目录预览"></a>整体目录预览</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@ejy-kf2-jyxt2 redis]# tree /usr/local/yozo/redis/</span><br><span class="line">/usr/local/yozo/redis/    # 服务所在目录*</span><br><span class="line">├── data				  # 用于映射进容器，作为持久化存储卷</span><br><span class="line">├── Dockerfile		 ### 注：Docker镜像生成脚本，后面详解**</span><br><span class="line">├── logs				  # 用于映射进容器，作为日志输出目录</span><br><span class="line">├── redis_x86             # 由redis_86.tar.gz解压出来的</span><br><span class="line">│   ├── bin</span><br><span class="line">│   │   ├── redis-benchmark</span><br><span class="line">│   │   ├── redis-check-aof</span><br><span class="line">│   │   ├── redis-check-rdb</span><br><span class="line">│   │   ├── redis-cli</span><br><span class="line">│   │   ├── redis-sentinel</span><br><span class="line">│   │   └── redis-server</span><br><span class="line">│   ├── redis.conf        # redis的配置文件，不多赘述</span><br><span class="line">│   └── start.sh     ### 注：我们自己编写的容器内服务启动脚本、后面详解**</span><br><span class="line">└── restart.sh       ### 注：我们自己编写的容器启动脚本、后面详解**</span><br></pre></td></tr></table></figure>

<h6 id="start-sh-容器脚本"><a href="#start-sh-容器脚本" class="headerlink" title="start.sh 容器脚本"></a>start.sh 容器脚本</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># 替换密码</span><br><span class="line">sed -i &quot;s/port 6379/port $&#123;PORT&#125;/&quot; /opt/redis/redis.conf</span><br><span class="line">sed -i &quot;s/# requirepass foobared/requirepass $&#123;PASSWD&#125;/&quot; /opt/redis/redis.conf</span><br><span class="line">sed -i &quot;s/databases 16/databases $&#123;DBS&#125;/&quot; /opt/redis/redis.conf</span><br><span class="line"># 启动服务</span><br><span class="line">./bin/redis-server redis.conf</span><br></pre></td></tr></table></figure>

<h6 id="Dockerfile-镜像生成档"><a href="#Dockerfile-镜像生成档" class="headerlink" title="Dockerfile 镜像生成档"></a>Dockerfile 镜像生成档</h6><blockquote>
<p>Dockerfile的语法规则，感兴趣可以自行百度，这里不多做赘述。</p>
</blockquote>
<figure class="highlight do"><table><tr><td class="code"><pre><span class="line">FROM centos:centos7</span><br><span class="line"># 作者信息</span><br><span class="line">MAINTAINER zangh&lt;zangh@ejy365.com&gt;</span><br><span class="line"># 复制redis到镜像</span><br><span class="line"><span class="keyword">COPY</span> redis_x86 /opt/redis</span><br><span class="line"># 兼容中文字符</span><br><span class="line">ENV LANG en_US.UTF-8</span><br><span class="line"># 工作目录</span><br><span class="line">WORKDIR /opt/redis</span><br><span class="line"><span class="keyword">RUN</span> <span class="keyword">mkdir</span> -p /opt/redis/data /opt/redis/logs</span><br><span class="line"># 环境变量</span><br><span class="line">ENV PORT 6379</span><br><span class="line">ENV PASSWD <span class="string">&quot;123456&quot;</span></span><br><span class="line">ENV DBS 3</span><br><span class="line"># 暴露端口</span><br><span class="line">EXPOSE 6379</span><br><span class="line"># 启动服务（此处用到了上面我们自己定义的服务启动脚本 *start.<span class="keyword">sh</span>*）</span><br><span class="line">ENTRYPOINT [<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;start.sh&quot;</span>]</span><br></pre></td></tr></table></figure>

<h6 id="restart-sh-启动脚本"><a href="#restart-sh-启动脚本" class="headerlink" title="restart.sh 启动脚本"></a>restart.sh 启动脚本</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">name=yozo-redis</span><br><span class="line">dir=/usr/local/yozo/redis</span><br><span class="line">cId=$(docker ps -a | grep $name | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">if [ -n &quot;$cId&quot; ]; then</span><br><span class="line">     echo &quot;$name container id : $cId&quot;</span><br><span class="line">else</span><br><span class="line">     echo &quot;$name init&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -n &quot;$cId&quot; ]; then</span><br><span class="line">     sId=$(docker ps | grep $name | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line">     if [ -n &quot;$sId&quot; ]; then</span><br><span class="line">         echo &quot;stop container id :&quot;</span><br><span class="line">         docker stop $sId</span><br><span class="line">     fi</span><br><span class="line">     echo &quot;rm container id :&quot;</span><br><span class="line">     docker rm $cId</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo &quot;restart container&quot;</span><br><span class="line">docker run --name $name \</span><br><span class="line">--restart=always \</span><br><span class="line">-v /etc/localtime:/etc/localtime:ro \</span><br><span class="line">-v $dir/data/:/opt/redis/data/ \</span><br><span class="line">-v $dir/logs/:/opt/redis/logs/ \</span><br><span class="line">-p 6379:6379 \</span><br><span class="line">-e &quot;PORT=6379&quot; \</span><br><span class="line">-e &quot;PASSWD=654321&quot; \</span><br><span class="line">-e &quot;DBS=3&quot; \</span><br><span class="line">-d yozo-redis:0.0.1</span><br></pre></td></tr></table></figure>

<h5 id="FCS容器化"><a href="#FCS容器化" class="headerlink" title="FCS容器化"></a>FCS容器化</h5><blockquote>
<p>配置细节参考<a href="http://42.192.155.41/yozo/fcs/%E6%B0%B8%E4%B8%AD%E6%96%87%E6%A1%A3DCS%E9%AB%98%E7%BA%A7%E7%89%88(FCS)%E8%AF%A6%E7%BB%86%E9%83%A8%E7%BD%B2%E8%AF%B4%E6%98%8E(%E5%8C%85%E5%90%AB%E5%9B%BD%E4%BA%A7%E5%8C%96).pdf">《永中文档DCS高级版(FCS)详细部署说明(包含国产化).pdf》</a>第四、六、七章节。</p>
</blockquote>
<h6 id="整体目录预览-1"><a href="#整体目录预览-1" class="headerlink" title="整体目录预览"></a>整体目录预览</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@ejy-kf2-jyxt2 yozo]# tree /usr/local/yozo/fcs/ -L 2</span><br><span class="line">/usr/local/yozo/fcs/           # 服务所在目录*</span><br><span class="line">├── conf</span><br><span class="line">│   ├── application.yml        # 整体的项目配置文件（不修改），这里我们通过resources/start.sh脚本进行了关键配置的简化</span><br><span class="line">│   ├── config.eni			   # 授权文件1（来自服务提供商*）</span><br><span class="line">│   └── fcs.eni                # 授权文件2（来自服务提供商，用前面的”fcs临时授权11.1.eni“替换*）</span><br><span class="line">├── Dockerfile         ### 注：Docker镜像生成脚本**</span><br><span class="line">├── docs                       # 用于映射进容器，作为持久化存储卷</span><br><span class="line">├── logs					   # 用于映射进容器，作为日志输出目录</span><br><span class="line">├── resources</span><br><span class="line">│   ├── apache-tomcat-9.0.65   # 由apache-tomcat-9.0.65.tar.gz解压的来，并按照官方部署文档要求，把fcs服务的代码放到tomcat里面</span><br><span class="line">│   ├── fonts                  # fonts.rar中文字体库（打包Windows系统的C:\Windows\Fonts得到）</span><br><span class="line">│   ├── jdk1.8.0_221		   # 解压jdk-8u221-linux-x64.tar.gz得到</span><br><span class="line">│   ├── jdk8.sh        ### 注：配置容器内jdk环境变量**</span><br><span class="line">│   └── start.sh       ### 注：我们自己编写的容器内服务启动脚本、后面详解**</span><br><span class="line">└── restart.sh         ### 注：我们自己编写的容器启动脚本、后面详解**</span><br></pre></td></tr></table></figure>

<h6 id="jdk8-sh-环境配置"><a href="#jdk8-sh-环境配置" class="headerlink" title="jdk8.sh 环境配置"></a>jdk8.sh 环境配置</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置jdk环境变量</span></span><br><span class="line">export JAVA_HOME=/opt/fcs/jdk</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br></pre></td></tr></table></figure>

<h6 id="start-sh-容器脚本-1"><a href="#start-sh-容器脚本-1" class="headerlink" title="start.sh 容器脚本"></a>start.sh 容器脚本</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使jdk8.sh配置的环境变量生效</span></span><br><span class="line">source /etc/profile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以下用docker的环境变量替换指定的项目、tomcat配置</span></span><br><span class="line">sed -i &quot;s/cacheMaxSize=\&quot;CACHE_MAX_SIZE\&quot;/cacheMaxSize=\&quot;$&#123;CACHE_MAX_SIZE&#125;\&quot;/g&quot; /opt/fcs/tomcat/conf/context.xml</span><br><span class="line">sed -i &quot;s/port=\&quot;HTTP_PORT\&quot;/port=\&quot;$&#123;HTTP_PORT&#125;\&quot;/g&quot; /opt/fcs/tomcat/conf/server.xml</span><br><span class="line">sed -i &quot;s/host: REDIS_HOST/host: $&#123;REDIS_HOST&#125;/g&quot; /opt/fcs/tomcat/webapps/ROOT/WEB-INF/classes/application.yml</span><br><span class="line">sed -i &quot;s/port: REDIS_PORT/port: $&#123;REDIS_PORT&#125;/g&quot; /opt/fcs/tomcat/webapps/ROOT/WEB-INF/classes/application.yml</span><br><span class="line">sed -i &quot;s/password: REDIS_PASS/password: $&#123;REDIS_PASS&#125;/g&quot; /opt/fcs/tomcat/webapps/ROOT/WEB-INF/classes/application.yml</span><br><span class="line">sed -i &quot;s/database: REDIS_DB/database: $&#123;REDIS_DB&#125;/g&quot; /opt/fcs/tomcat/webapps/ROOT/WEB-INF/classes/application.yml</span><br><span class="line">sed -i &quot;s#MY_LOG_HOME#$&#123;LOGS_PATH&#125;#g&quot; /opt/fcs/tomcat/webapps/ROOT/WEB-INF/classes/log4j2.xml</span><br><span class="line">sed -i &quot;s#MY_VIEW_DOMAIN#$&#123;VIEW_DOMAIN&#125;#g&quot; /opt/fcs/tomcat/webapps/ROOT/WEB-INF/classes/config.properties</span><br><span class="line">sed -i &quot;s#MY_INPUT_DIR#$&#123;INPUT_DIR&#125;#g&quot; /opt/fcs/tomcat/webapps/ROOT/WEB-INF/classes/config.properties</span><br><span class="line">sed -i &quot;s#MY_OUTPUT_DIR#$&#123;OUTPUT_DIR&#125;#g&quot; /opt/fcs/tomcat/webapps/ROOT/WEB-INF/classes/config.properties</span><br><span class="line">sed -i &quot;s/=MY_CONVERT_POOL_SIZE/=$&#123;CONVERT_POOL_SIZE&#125;/g&quot; /opt/fcs/tomcat/webapps/ROOT/WEB-INF/classes/config.properties</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动apache服务（需要前台启动）</span></span><br><span class="line">/opt/fcs/tomcat/bin/catalina.sh run</span><br></pre></td></tr></table></figure>

<h6 id="Dockerfile-镜像生成档-1"><a href="#Dockerfile-镜像生成档-1" class="headerlink" title="Dockerfile 镜像生成档"></a>Dockerfile 镜像生成档</h6><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:centos7</span><br><span class="line"><span class="comment"># 作者信息</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> zangh&lt;zangh@ejy365.com&gt;</span><br><span class="line"><span class="comment"># 复制所需软件到镜像</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> resources/jdk1.8.0_221 /opt/fcs/jdk</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> resources/apache-tomcat-9.0.65 /opt/fcs/tomcat</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> resources/jdk8.sh /etc/profile.d/jdk8.sh</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> resources/start.sh /opt/fcs/start.sh</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> resources/fonts /usr/X11R6/lib/X11/fonts/TrueType</span></span><br><span class="line"><span class="comment"># 兼容中文字符</span></span><br><span class="line"><span class="keyword">ENV</span> LANG en_US.UTF-<span class="number">8</span></span><br><span class="line"><span class="comment"># 环境变量（上一小节的start.sh需要用到）</span></span><br><span class="line"><span class="keyword">ENV</span> CACHE_MAX_SIZE <span class="number">10000</span></span><br><span class="line"><span class="keyword">ENV</span> HTTP_PORT <span class="number">18090</span></span><br><span class="line"><span class="keyword">ENV</span> VIEW_DOMAIN http://<span class="number">192.168</span>.<span class="number">11.20</span>:<span class="number">18090</span>/</span><br><span class="line"><span class="keyword">ENV</span> CONVERT_POOL_SIZE <span class="number">1</span></span><br><span class="line"><span class="keyword">ENV</span> INPUT_DIR /opt/fcs/docs/input</span><br><span class="line"><span class="keyword">ENV</span> OUTPUT_DIR /opt/fcs/docs/output</span><br><span class="line"><span class="keyword">ENV</span> LOGS_PATH /opt/fcs/logs</span><br><span class="line"><span class="comment"># Redis配置</span></span><br><span class="line"><span class="keyword">ENV</span> REDIS_HOST <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="keyword">ENV</span> REDIS_PORT <span class="number">6379</span></span><br><span class="line"><span class="keyword">ENV</span> REDIS_PASS <span class="number">654321</span></span><br><span class="line"><span class="keyword">ENV</span> REDIS_DB <span class="number">0</span></span><br><span class="line"><span class="comment"># 赋予执行权限</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> -R +x /opt/fcs/jdk/bin /opt/fcs/tomcat/bin /usr/X11R6/lib/X11/fonts/TrueType</span></span><br><span class="line"><span class="comment"># 工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /opt/fcs</span></span><br><span class="line"><span class="comment"># 暴露端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">18090</span></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;start.sh&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<h6 id="restart-sh-启动脚本-1"><a href="#restart-sh-启动脚本-1" class="headerlink" title="restart.sh 启动脚本"></a>restart.sh 启动脚本</h6><ul>
<li>其中<strong>config.eni</strong>：替换为服务商提供的证书，参考《永中文档DCS高级版(FCS)详细部署说明(包含国产化).pdf》第6.4小节</li>
<li>其中<strong>fcs.eni</strong>：替换为服务商提供的证书，参考《永中文档DCS高级版(FCS)详细部署说明(包含国产化).pdf》第6.3小节</li>
<li>其中<strong>VIEW_DOMAIN</strong>：为接口中返回的预览连接地址，<em>生产环境</em> 需要配置为外网的访问地址（此处为11.199则只能在内网访问）</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">name=yozo-fcs</span><br><span class="line">dir=/usr/local/yozo/fcs</span><br><span class="line">cId=$(docker ps -a | grep $name | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line">if [ -n &quot;$cId&quot; ]; then</span><br><span class="line">     echo &quot;$name container id : $cId&quot;</span><br><span class="line">else</span><br><span class="line">     echo &quot;$name init&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -n &quot;$cId&quot; ]; then</span><br><span class="line">     sId=$(docker ps | grep $name | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line">     if [ -n &quot;$sId&quot; ]; then</span><br><span class="line">         echo &quot;stop container id :&quot;</span><br><span class="line">         docker stop $sId</span><br><span class="line">     fi</span><br><span class="line">     echo &quot;rm container id :&quot;</span><br><span class="line">     docker rm $cId</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo &quot;restart container&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取消文件缓存目录映射（发现如果映射到nfs会导致预览变慢）：-v <span class="variable">$dir</span>/docs:/opt/fcs/docs \ </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-v /usr/local/webserver/nginx/html/eip/upload/weboffice/fcs:/opt/fcs/docs \</span></span><br><span class="line"><span class="language-bash">docker run --name <span class="variable">$name</span> \</span></span><br><span class="line"><span class="language-bash">--restart=always \</span></span><br><span class="line"><span class="language-bash">-v /etc/localtime:/etc/localtime:ro \</span></span><br><span class="line"><span class="language-bash">-v <span class="variable">$dir</span>/conf/fcs.eni:/opt/fcs/tomcat/webapps/ROOT/WEB-INF/classes/fcs.eni \</span></span><br><span class="line"><span class="language-bash">-v <span class="variable">$dir</span>/conf/config.eni:/opt/fcs/tomcat/webapps/ROOT/WEB-INF/classes/jar/dcc/dcsConvert_lib/Config/config.eni \</span></span><br><span class="line"><span class="language-bash">-v <span class="variable">$dir</span>/docs:/opt/fcs/docs \</span></span><br><span class="line"><span class="language-bash">-v <span class="variable">$dir</span>/logs/tomcat:/opt/fcs/tomcat/logs \</span></span><br><span class="line"><span class="language-bash">-v <span class="variable">$dir</span>/logs/fcs:/opt/fcs/logs \</span></span><br><span class="line"><span class="language-bash">-p 18090:18090 \</span></span><br><span class="line"><span class="language-bash">-e <span class="string">&quot;CACHE_MAX_SIZE=100000&quot;</span> \</span></span><br><span class="line"><span class="language-bash">-e <span class="string">&quot;HTTP_PORT=18090&quot;</span> \</span></span><br><span class="line"><span class="language-bash">-e <span class="string">&quot;VIEW_DOMAIN=http://192.168.11.199:18787/fcs/&quot;</span> \      <span class="comment">### 注：此处为比较重要一点*</span></span></span><br><span class="line">-e &quot;REDIS_HOST=192.168.11.199&quot; \</span><br><span class="line">-e &quot;REDIS_PORT=6379&quot; \</span><br><span class="line">-e &quot;REDIS_PASS=654321&quot; \</span><br><span class="line">-e &quot;REDIS_DB=1&quot; \</span><br><span class="line">-d yozo-fcs:0.0.1</span><br></pre></td></tr></table></figure>

<h5 id="Gateway容器化"><a href="#Gateway容器化" class="headerlink" title="Gateway容器化"></a>Gateway容器化</h5><blockquote>
<p>传送门：<a href="http://192.168.125.2/group2/yozo-office">网关源码</a>，内含sdk、gateway、app三个模块。</p>
<ul>
<li>gateway：为可独立部署的自定义网关</li>
<li>sdk：为方便业务系统接入的工具包</li>
<li>app：为接入演示的demo项目</li>
</ul>
</blockquote>
<h6 id="整体目录预览-2"><a href="#整体目录预览-2" class="headerlink" title="整体目录预览"></a>整体目录预览</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@ejy-kf2-jyxt2 gateway]# tree /usr/local/yozo/gateway/ -L 2</span><br><span class="line">/usr/local/yozo/gateway/          # 服务所在目录*</span><br><span class="line">├── Dockerfile				### 注：Docker镜像生成脚本**</span><br><span class="line">├── logs				          # 用于映射进容器，作为日志持久化目录 		</span><br><span class="line">│   ├── spring.log</span><br><span class="line">|   └── spring.log.2023-09-11.0.gz</span><br><span class="line">├── resources				### Dockerfile镜像生成需要用到的资料</span><br><span class="line">│   ├── jdk1.8.0_221              # 同上</span><br><span class="line">│   ├── jdk8.sh                   # 同上</span><br><span class="line">│   ├── start.sh            ### 注：我们自己编写的容器内服务启动脚本、后面详解**      </span><br><span class="line">│   └── yozo-gateway.jar          # 源码中gateway模块打包所得</span><br><span class="line">└── restart.sh              ### 注：我们自己编写的容器启动脚本、后面详解**</span><br></pre></td></tr></table></figure>

<h6 id="start-sh-容器脚本-2"><a href="#start-sh-容器脚本-2" class="headerlink" title="start.sh 容器脚本"></a>start.sh 容器脚本</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使jdk环境变量生效</span></span><br><span class="line">source /etc/profile</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动服务</span></span><br><span class="line">java -Djava.security.egd=file:/dev/./urandom -Duser.timezone=GMT+08 -Dfile.encoding=UTF-8 -server -Xverify:none -jar $&#123;jvmoptions&#125; app.jar --spring.profiles.active=$&#123;profile&#125;</span><br></pre></td></tr></table></figure>

<h6 id="Dockerfile-镜像生成档-2"><a href="#Dockerfile-镜像生成档-2" class="headerlink" title="Dockerfile 镜像生成档"></a>Dockerfile 镜像生成档</h6><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:centos7</span><br><span class="line"><span class="comment"># 作者信息</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> zangh&lt;zangh@ejy365.com&gt;</span><br><span class="line"><span class="comment"># 复制所需软件到镜像</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> resources/jdk1.8.0_221 /opt/gateway/jdk</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> resources/yozo-gateway.jar /opt/gateway/app.jar</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> resources/jdk8.sh /etc/profile.d/jdk8.sh</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> resources/start.sh /opt/gateway/start.sh</span></span><br><span class="line"><span class="comment"># 兼容中文字符</span></span><br><span class="line"><span class="keyword">ENV</span> LANG en_US.UTF-<span class="number">8</span></span><br><span class="line"><span class="comment"># 赋予执行权限</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> -R +x /opt/gateway/jdk/bin</span></span><br><span class="line"><span class="comment"># 工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /opt/gateway</span></span><br><span class="line"><span class="comment"># 环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> jvmoptions <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">ENV</span> profile <span class="string">&quot;dev&quot;</span></span><br><span class="line"><span class="comment"># 暴露端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">18787</span></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;start.sh&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<h6 id="restart-sh-启动脚本-2"><a href="#restart-sh-启动脚本-2" class="headerlink" title="restart.sh 启动脚本"></a>restart.sh 启动脚本</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">name=yozo-gateway</span><br><span class="line">dir=/usr/local/yozo/gateway</span><br><span class="line">cId=$(docker ps -a | grep $name | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">if [ -n &quot;$cId&quot; ]; then</span><br><span class="line">     echo &quot;$name container id : $cId&quot;</span><br><span class="line">else</span><br><span class="line">     echo &quot;$name init&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ -n &quot;$cId&quot; ]; then</span><br><span class="line">     sId=$(docker ps | grep $name | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line">     if [ -n &quot;$sId&quot; ]; then</span><br><span class="line">         echo &quot;stop container id :&quot;</span><br><span class="line">         docker stop $sId</span><br><span class="line">     fi </span><br><span class="line">     echo &quot;rm container id :&quot;</span><br><span class="line">     docker rm $cId</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo &quot;restart container&quot;</span><br><span class="line">docker run --name $name \</span><br><span class="line">--restart=always \</span><br><span class="line">-v /etc/localtime:/etc/localtime:ro \</span><br><span class="line">-v $dir/logs:/opt/gateway/logs \</span><br><span class="line">-p 18787:18787 \</span><br><span class="line">-e jvmoptions=&quot;-Xmx1g -Xms1g&quot; \</span><br><span class="line">-e profile=&quot;test&quot; \</span><br><span class="line">-d yozo-gateway:0.0.1</span><br></pre></td></tr></table></figure>

<h4 id="安装服务"><a href="#安装服务" class="headerlink" title="安装服务"></a>安装服务</h4><blockquote>
<p>前面脚本写好后，所有的镜像生成步骤基本一致（如果遇到问题则反复调整脚本即可）</p>
</blockquote>
<h5 id="目录预览"><a href="#目录预览" class="headerlink" title="目录预览"></a>目录预览</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@ejy-kf2-jyxt2 yozo]# tree /usr/local/yozo/ -L 1</span><br><span class="line">/usr/local/yozo/               # 上小节所有容器化资料和脚本都在这个下面</span><br><span class="line">├── fcs				### 永中FCS在线预览安装目录</span><br><span class="line">├── gateway         ### 自定义网关安装目录</span><br><span class="line">└── redis           ### Redis服务安装目录</span><br></pre></td></tr></table></figure>

<h5 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h5><h6 id="确保Docker服务正常"><a href="#确保Docker服务正常" class="headerlink" title="确保Docker服务正常"></a>确保Docker服务正常</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@ejy-kf2-jyxt2 yozo]# systemctl status docker</span><br><span class="line">● docker.service - Docker Application Container Engine</span><br><span class="line">   Loaded: loaded (/etc/systemd/system/docker.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since 五 2023-08-11 12:26:09 CST; 1 months 2 days ago</span><br><span class="line">     Docs: http://docs.docker.io</span><br><span class="line"> Main PID: 771 (dockerd)</span><br><span class="line">    Tasks: 381</span><br><span class="line">   Memory: 279.9M</span><br><span class="line">   略...</span><br><span class="line"></span><br><span class="line">[root@ejy-kf2-jyxt2 yozo]# docker --version</span><br><span class="line">Docker version 19.03.5, build 633a0ea</span><br><span class="line"></span><br><span class="line">[root@ejy-kf2-jyxt2 yozo]# cat /etc/docker/daemon.json </span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://dockerhub.azk8s.cn&quot;, &quot;https://docker.mirrors.ustc.edu.cn&quot;],  #==&gt; 更换镜像加速</span><br><span class="line">  &quot;bip&quot;:&quot;10.17.0.1/24&quot;,</span><br><span class="line">  &quot;max-concurrent-downloads&quot;: 10,</span><br><span class="line">  &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class="line">  &quot;log-level&quot;: &quot;warn&quot;,</span><br><span class="line">  &quot;log-opts&quot;: &#123;</span><br><span class="line">    &quot;max-size&quot;: &quot;10m&quot;,</span><br><span class="line">    &quot;max-file&quot;: &quot;3&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;data-root&quot;: &quot;/var/lib/docker&quot;   #==&gt; Docker服务数据所在位置，也可以按需更改</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="拉取基础镜像"><a href="#拉取基础镜像" class="headerlink" title="拉取基础镜像"></a>拉取基础镜像</h6><p>上述三个镜像都采用centos:centos7作为基础镜像，可以先拉取一下提升后面的构建速度。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@ejy-kf2-jyxt2 yozo]# docker pull centos:centos7</span><br><span class="line">centos7: Pulling from library/centos</span><br><span class="line">Digest: sha256:be65f488b7764ad3638f236b7b515b3678369a5124c47b8d32916d6487418ea4</span><br><span class="line">Status: Image is up to date for centos:centos7   #==&gt;我这里本地已经存在了，提示已是最新的了</span><br><span class="line">docker.io/library/centos:centos7</span><br></pre></td></tr></table></figure>

<h5 id="生成镜像"><a href="#生成镜像" class="headerlink" title="生成镜像"></a>生成镜像</h5><h6 id="生成Redis镜像"><a href="#生成Redis镜像" class="headerlink" title="生成Redis镜像"></a>生成Redis镜像</h6><p>镜像名称和版本号：yozo-redis:0.0.1</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@ejy-kf2-jyxt2 yozo]# cd redis/</span><br><span class="line">[root@ejy-kf2-jyxt2 yozo]# docker build --help</span><br><span class="line">Usage:  docker build [OPTIONS] PATH | URL | -</span><br><span class="line"></span><br><span class="line">Build an image from a Dockerfile</span><br><span class="line">Options:</span><br><span class="line">略...</span><br><span class="line">  -f, --file string             Name of the Dockerfile (Default is &#x27;PATH/Dockerfile&#x27;)</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">可以用-f指定Dockerfile文件的路径名</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">也可以不指定而用.表示Docker会在当前目录下查找名为Dockerfile的文件</span></span><br><span class="line">      --force-rm                Always remove intermediate containers</span><br><span class="line">      --iidfile string          Write the image ID to the file</span><br><span class="line">      --isolation string        Container isolation technology</span><br><span class="line">      --label list              Set metadata for an image</span><br><span class="line">略...</span><br><span class="line">  -t, --tag list                Name and optionally a tag in the &#x27;name:tag&#x27; format</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">指定需要生成的镜像名称，格式为name:tag（tag不指定则默认为latest）</span></span><br><span class="line">      --target string           Set the target build stage to build.</span><br><span class="line">      --ulimit ulimit           Ulimit options (default [])</span><br><span class="line">[root@ejy-kf2-jyxt2 redis]# docker build -t yozo-redis:0.0.1 .</span><br><span class="line">[root@ejy-kf2-jyxt2 redis]# docker images</span><br><span class="line">REPOSITORY    TAG       IMAGE ID        CREATED             SIZE</span><br><span class="line">yozo-redis    0.0.1     a5acbb3641dd    44 hours ago        221MB</span><br><span class="line">centos        centos7   eeb6ee3f44bd    24 months ago       204MB</span><br></pre></td></tr></table></figure>

<h6 id="生成FCS镜像"><a href="#生成FCS镜像" class="headerlink" title="生成FCS镜像"></a>生成FCS镜像</h6><p>步骤同上</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@ejy-kf2-jyxt2 yozo]# cd fcs/</span><br><span class="line">[root@ejy-kf2-jyxt2 redis]# docker build -t yozo-fcs:0.0.1 .</span><br><span class="line">略...</span><br><span class="line">[root@ejy-kf2-jyxt2 redis]# docker images</span><br><span class="line">REPOSITORY    TAG       IMAGE ID        CREATED             SIZE</span><br><span class="line">yozo-fcs      0.0.1     9fde45a17e64    37 hours ago        2.32GB</span><br><span class="line">yozo-redis    0.0.1     a5acbb3641dd    44 hours ago        221MB</span><br><span class="line">centos        centos7   eeb6ee3f44bd    24 months ago       204MB</span><br></pre></td></tr></table></figure>

<h6 id="生成gateway镜像"><a href="#生成gateway镜像" class="headerlink" title="生成gateway镜像"></a>生成gateway镜像</h6><p>步骤同上</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@ejy-kf2-jyxt2 yozo]# cd gateway/</span><br><span class="line">[root@ejy-kf2-jyxt2 redis]# docker build -t yozo-gateway:0.0.1 .</span><br><span class="line">略...</span><br><span class="line">[root@ejy-kf2-jyxt2 redis]# docker images</span><br><span class="line">REPOSITORY    TAG       IMAGE ID        CREATED             SIZE</span><br><span class="line">yozo-gateway  0.0.1     a797042b7d1f    42 hours ago        645MB</span><br><span class="line">yozo-fcs      0.0.1     9fde45a17e64    37 hours ago        2.32GB</span><br><span class="line">yozo-redis    0.0.1     a5acbb3641dd    44 hours ago        221MB</span><br><span class="line">centos        centos7   eeb6ee3f44bd    24 months ago       204MB</span><br></pre></td></tr></table></figure>

<h5 id="运行服务"><a href="#运行服务" class="headerlink" title="运行服务"></a>运行服务</h5><blockquote>
<p>一次运行Redis、FCS、gateway服务，依赖关系在应用篇中再做介绍。</p>
</blockquote>
<h6 id="启动Redis服务"><a href="#启动Redis服务" class="headerlink" title="启动Redis服务"></a>启动Redis服务</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@ejy-kf2-jyxt2 yozo]# cd redis/</span><br><span class="line">[root@ejy-kf2-jyxt2 redis]# sh restart.sh </span><br><span class="line">yozo-redis container id : 0e3afd8433af</span><br><span class="line">stop container id :</span><br><span class="line">0e3afd8433af</span><br><span class="line">rm container id :</span><br><span class="line">0e3afd8433af</span><br><span class="line">restart container</span><br><span class="line">8f83107ee7557b454867a174b9d32fe74490faf78e30c23f50da5d396188bd1f</span><br></pre></td></tr></table></figure>

<h6 id="启动FCS服务"><a href="#启动FCS服务" class="headerlink" title="启动FCS服务"></a>启动FCS服务</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@ejy-kf2-jyxt2 yozo]# cd fcs/</span><br><span class="line">[root@ejy-kf2-jyxt2 fcs]# sh restart.sh </span><br></pre></td></tr></table></figure>

<h6 id="启动gateway服务"><a href="#启动gateway服务" class="headerlink" title="启动gateway服务"></a>启动gateway服务</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@ejy-kf2-jyxt2 yozo]# cd gateway/</span><br><span class="line">[root@ejy-kf2-jyxt2 gateway]# sh restart.sh </span><br></pre></td></tr></table></figure>

<h4 id="服务验证"><a href="#服务验证" class="headerlink" title="服务验证"></a>服务验证</h4><h5 id="直接访问fcs服务（内网）"><a href="#直接访问fcs服务（内网）" class="headerlink" title="直接访问fcs服务（内网）"></a>直接访问fcs服务（内网）</h5><h6 id="服务版本"><a href="#服务版本" class="headerlink" title="服务版本"></a>服务版本</h6><p><img data-src="http://42.192.155.41/yozo/fcs/20230913105256.png" alt="查看在线预览的版本"></p>
<ul>
<li><a href="http://192.168.11.199:18090/query/version">打开查看</a></li>
</ul>
<h6 id="接口文档"><a href="#接口文档" class="headerlink" title="接口文档"></a>接口文档</h6><p><img data-src="http://42.192.155.41/yozo/fcs/20230913105404.png" alt="查看在线预览的版本"></p>
<ul>
<li><a href="http://192.168.11.199:18090/swagger-ui/index.html">打开查看</a></li>
</ul>
<h5 id="经过gateway网关访问"><a href="#经过gateway网关访问" class="headerlink" title="经过gateway网关访问"></a>经过gateway网关访问</h5><blockquote>
<p>18787为gateway的服务接口，fcs为路由键；配置在应用篇中再做介绍。</p>
</blockquote>
<h6 id="服务版本-1"><a href="#服务版本-1" class="headerlink" title="服务版本"></a>服务版本</h6><p><img data-src="http://42.192.155.41/yozo/fcs/20230913105513.png" alt="查看在线预览的版本"></p>
<ul>
<li><a href="http://192.168.11.199:18787/fcs/query/version">打开查看</a></li>
</ul>
<h6 id="接口文档-1"><a href="#接口文档-1" class="headerlink" title="接口文档"></a>接口文档</h6><p><img data-src="http://42.192.155.41/yozo/fcs/20230913105544.png" alt="查看在线预览的版本"></p>
<ul>
<li><a href="http://192.168.11.199:18787/fcs/swagger-ui/index.html">打开查看</a></li>
</ul>
<h3 id="WebOffice部署"><a href="#WebOffice部署" class="headerlink" title="WebOffice部署"></a>WebOffice部署</h3><blockquote>
<p>注：由于此服务的授权认证会检查采集 <strong>裸机固件号</strong> 或 <strong>Docker的容器id</strong> 导致无法容器化部署，导致部署相对繁琐。</p>
</blockquote>
<h4 id="环境要求-1"><a href="#环境要求-1" class="headerlink" title="环境要求"></a>环境要求</h4><h5 id="推荐配置"><a href="#推荐配置" class="headerlink" title="推荐配置"></a>推荐配置</h5><table>
<thead>
<tr>
<th align="center">操作系统</th>
<th align="center">推荐类型</th>
<th align="center">内存</th>
<th align="center">CPU</th>
<th align="center">机器数量</th>
</tr>
</thead>
<tbody><tr>
<td align="center">CentOS7.2 及以上</td>
<td align="center">X86服务器</td>
<td align="center">16G 及以上</td>
<td align="center">8核及以上</td>
<td align="center">1台及以上</td>
</tr>
</tbody></table>
<h5 id="服务器节点-1"><a href="#服务器节点-1" class="headerlink" title="服务器节点"></a>服务器节点</h5><table>
<thead>
<tr>
<th align="center">主机名</th>
<th align="center">操作系统</th>
<th align="center">网络IP</th>
<th align="center">硬件配置</th>
<th align="center">预装软件</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ejy-ys-kf2-web</td>
<td align="center">CentOS Linux release 7.5.1804 (Core)</td>
<td align="center">192.168.11.20</td>
<td align="center">8c32g-500g</td>
<td align="center">gcc、unzip</td>
</tr>
</tbody></table>
<h5 id="工具安装"><a href="#工具安装" class="headerlink" title="工具安装"></a>工具安装</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主要用于后续安装专用的redis服务（本地化编译）</span></span><br><span class="line">[root@ejy-ys-kf2-web weboffice]# yum -y install gcc gcc-c++ autoconf make</span><br><span class="line">[root@ejy-ys-kf2-web weboffice]# gcc -v</span><br><span class="line">Using built-in specs.</span><br><span class="line">COLLECT_GCC=gcc</span><br><span class="line">COLLECT_LTO_WRAPPER=/usr/libexec/gcc/x86_64-redhat-linux/4.8.5/lto-wrapper</span><br><span class="line">Target: x86_64-redhat-linux</span><br><span class="line">Configured with: ../configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --with-</span><br><span class="line">略...</span><br><span class="line">gcc version 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主要用于解压web_office.zip安装包</span></span><br><span class="line">[root@edit bin]# yum install -y unzip.x86_64</span><br></pre></td></tr></table></figure>

<h4 id="部署资料-1"><a href="#部署资料-1" class="headerlink" title="部署资料"></a>部署资料</h4><ol>
<li><a href="http://42.192.155.41/yozo/wo/weboffice3.3.5.0019-month.zip">weboffice3.3.5.0019-month.zip</a>（服务商提供的最新版本）</li>
<li><a href="http://42.192.155.41/yozo/wo/YZSY202309128-%E6%B1%9F%E8%8B%8F%E6%98%93%E4%BA%A4%E6%98%93%E4%BF%A1%E6%81%AF%E7%A7%91%E6%8A%80%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8-WO%E4%B8%B4%E6%97%B6%E6%8E%88%E6%9D%83.eni">YZSY202309128-江苏易交易信息科技有限公司-WO临时授权.eni</a>（服务商提供的授权文件）</li>
<li>fonts.rar（中文字体库）</li>
</ol>
<h4 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h4><blockquote>
<p>具体的安装细节和配置修改细节参考以下文档：</p>
<ol>
<li><a href="http://42.192.155.41/yozo/wo/1_WebOffice%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B.docx">《1_WebOffice部署教程.docx》</a></li>
<li><a href="http://42.192.155.41/yozo/wo/1_WebOffice%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%BB%B4%E6%89%8B%E5%86%8C.docx">《1_WebOffice基本运维手册.docx》</a></li>
</ol>
</blockquote>
<h5 id="解压并修改配置"><a href="#解压并修改配置" class="headerlink" title="解压并修改配置"></a>解压并修改配置</h5><h6 id="解压安装目录"><a href="#解压安装目录" class="headerlink" title="解压安装目录"></a>解压安装目录</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@ejy-ys-kf2-web yozo]# mkdir -p /usr/local/yozo/weboffice</span><br><span class="line">[root@ejy-ys-kf2-web yozo]# unzip weboffice3.3.5.0019-month.zip -d weboffice</span><br><span class="line">[root@ejy-ys-kf2-web yozo]# tree weboffice/ -L 2</span><br><span class="line">weboffice</span><br><span class="line">├── bin</span><br><span class="line">│   ├── checkWO.sh</span><br><span class="line">│   ├── config.sh</span><br><span class="line">│   ├── deploy.sh</span><br><span class="line">│   ├── dump.rdb</span><br><span class="line">│   ├── install_Config                  ## 全局配置文件</span><br><span class="line">│   ├── install.sh                      ## 安装脚本</span><br><span class="line">│   ├── nohup.out</span><br><span class="line">│   ├── protect.sh</span><br><span class="line">│   ├── README.txt</span><br><span class="line">│   ├── redisUp.sh</span><br><span class="line">│   ├── tomcatlog.sh</span><br><span class="line">│   ├── uninstall.sh</span><br><span class="line">│   ├── update</span><br><span class="line">│   ├── update.sh</span><br><span class="line">│   └── weboffice.sh</span><br><span class="line">├── README</span><br><span class="line">│   ├── pluginDemo_2021_03_01.zip</span><br><span class="line">│   ├── READ_ME.docx</span><br><span class="line">│   ├── Tomcat按天生成中间件日志操作手册.docx</span><br><span class="line">│   ├── ~$前端插件.docx</span><br><span class="line">│   └── 前端插件.docx</span><br><span class="line">├── ReadMe.txt</span><br><span class="line">├── res</span><br><span class="line">│   ├── __conf</span><br><span class="line">│   ├── repo</span><br><span class="line">│   └── res</span><br><span class="line">└── web_office.zip</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## 清理不必要的目录和文件</span></span></span><br><span class="line">[root@ejy-ys-kf2-web yozo]# rm -rf weboffice/README weboffice/ReadMe.txt</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## 创建必要目录，配置中要用</span></span></span><br><span class="line">[root@ejy-ys-kf2-web yozo]# mkdir -p weboffice/logs weboffice/docs</span><br></pre></td></tr></table></figure>

<h6 id="重要文件说明"><a href="#重要文件说明" class="headerlink" title="重要文件说明"></a>重要文件说明</h6><blockquote>
<p>配置修改参考《1_WebOffice部署教程.docx》第3、6小节，大致的文件作用如下：</p>
<ol>
<li>bin&#x2F;install_Config 全局配置文件</li>
<li>bin&#x2F;install.sh 总安装脚本，其它的如deploy.sh、config.sh、redisUp.sh等脚本都由此脚本调用</li>
<li>bin&#x2F;uninstall.sh 卸载脚本</li>
<li>bin&#x2F;protect.sh 保护进程脚本（定期检查weboffice的进程是否正常，如不正常则重启之）</li>
<li>web_office.zip 所有的服务程序都在此包中，由install.sh脚本负责自动化解压和部署</li>
</ol>
</blockquote>
<h6 id="初步修改配置"><a href="#初步修改配置" class="headerlink" title="初步修改配置"></a>初步修改配置</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@ejy-ys-kf2-web yozo]# cd bin &amp;&amp; vim install_Config</span><br><span class="line">...</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">项目的部署目录(不配置则自动获取当前目录位置)</span></span><br><span class="line">webofficePath=/usr/local/yozo/weboffice           ## ----&gt; 修改点1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">项目的部署服务器(不配置则自动获取本机第一个ip)</span></span><br><span class="line">hostIP=192.168.11.20                              ## ----&gt; 修改点2</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">需要部署的weboffice项目数量(不填则工具服务器配置分配数量)</span></span><br><span class="line">wonum=5                                           ## ----&gt; 修改点3</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">每个weboffice项目的内存大小(单位M)</span></span><br><span class="line">tomcatsize=4096                                   ## ----&gt; 修改点4</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">demo项目的http端口即weboffice项目的访问端口</span></span><br><span class="line">demo_httpPort=19090                               ## ----&gt; 修改点5</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">weboffice项目的起始server端口(默认会在配置的端口后面进行数学运算加1 如：配置8000则tomcat端口变为8001.8002....)</span></span><br><span class="line">wo_serverPort=18000</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">weboffice项目的起始http端口(默认会在配置的端口后面进行数学运算加1 如：配置8000则tomcat端口变为8001.8002....)</span></span><br><span class="line">wo_httpPort=18080</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">weboffice项目的起始conecter端口(默认会在配置的端口后面进行数学运算加1 如：配置8000则tomcat端口变为8001.8002....)</span></span><br><span class="line">wo_connectorPort=18800</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">websocket的初始端口(默认会在配置的端口后面进行数学运算加1 如：配置9940则websocket端口变为9941.9942....)</span></span><br><span class="line">websocketport=19940</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">jdk(可以配置客户自己的jdk路径)</span></span><br><span class="line">javaPath=/usr/local/yozo/weboffice/jdk1.8.0_161  ## ----&gt; 修改点6</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">文件路径</span></span><br><span class="line">filepath=/usr/local/yozo/weboffice/docs          ## ----&gt; 修改点7</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">日志路径</span></span><br><span class="line">logpath=/usr/local/yozo/weboffice/logs           ## ----&gt; 修改点8</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">agent端口</span></span><br><span class="line">agentport=18080                                  ## ----&gt; 修改点9（很重要的配置，服务方用golang写的代理服务）</span><br><span class="line">												 ##       负责服务节点的反向代理和负载均衡</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">redis密码(不填则不设置密码)</span></span><br><span class="line">redisPass=Yozo2022                               ## ----&gt; 修改点10，Yozo2022为默认密码</span><br><span class="line">                                                 ##       如果和fcs部署在同一台服务器上，则共用redis服务</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">mysql数据库安装地址            &gt;&gt;&gt;&gt;&gt; 不用管，weboffice没用到mysql服务为，以下不需要修改</span></span><br><span class="line">mysqlIp=172.18.21.4</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">mysql端口</span></span><br><span class="line">mysqlPort=3306</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">mysql密码(不填则默认没有密码)</span></span><br><span class="line">mysqlPass=123456</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h6 id="安装字体库"><a href="#安装字体库" class="headerlink" title="安装字体库"></a>安装字体库</h6><blockquote>
<p>参考：《1_WebOffice基本运维手册.docx》第4章节</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@ejy-ys-kf2-web yozo]# makedir -p /usr/share/fonts/truetype</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 解压fonts.rar到此目录下</span></span></span><br></pre></td></tr></table></figure>

<h5 id="获取并更新授权文件"><a href="#获取并更新授权文件" class="headerlink" title="获取并更新授权文件"></a>获取并更新授权文件</h5><blockquote>
<p>参考：《1_WebOffice部署教程.docx》第4小节、《1_WebOffice基本运维手册.docx》第三章节</p>
</blockquote>
<h6 id="生成机器码"><a href="#生成机器码" class="headerlink" title="生成机器码"></a>生成机器码</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@ejy-ys-kf2-web yozo]# cd weboffice/bin &amp;&amp; ./install.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 如果第一次安装会编译安装redis服务，过程可能会较慢</span></span></span><br><span class="line">[root@ejy-ys-kf2-web bin]# tree /usr/local/yozo/weboffice/ -L 1</span><br><span class="line">/usr/local/yozo/weboffice/</span><br><span class="line">├── agent</span><br><span class="line">├── bin</span><br><span class="line">├── jdk1.8.0_161</span><br><span class="line">├── logs</span><br><span class="line">├── redis-6.2.6</span><br><span class="line">├── res</span><br><span class="line">├── weboffice_1</span><br><span class="line">├── weboffice_2</span><br><span class="line">├── weboffice_3</span><br><span class="line">├── weboffice_4</span><br><span class="line">├── weboffice_5</span><br><span class="line">├── weboffice_demo</span><br><span class="line">└── web_office.zip</span><br><span class="line">[root@ejy-ys-kf2-web bin]# cd ../weboffice_1/webapps/ROOT/WEB-INF/lib/</span><br><span class="line">[root@ejy-ys-kf2-web bin]# /usr/local/yozo/weboffice/jdk1.8.0_161/bin/java -jar Register.jar </span><br><span class="line">[root@ejy-ys-kf2-web bin]# ll | grep register.txt</span><br><span class="line">-rw-r--r-- 1 root root       81 9月  13 14:52 register.txt</span><br></pre></td></tr></table></figure>

<h6 id="获取授权文件"><a href="#获取授权文件" class="headerlink" title="获取授权文件"></a>获取授权文件</h6><blockquote>
<p>把上述的register.txt文件交给服务提供商换取*.eni授权文件</p>
</blockquote>
<p>此处我们拿到了临时授权文件：YZSY202309128-江苏易交易信息科技有限公司-WO临时授权.eni</p>
<h6 id="替换授权文件"><a href="#替换授权文件" class="headerlink" title="替换授权文件"></a>替换授权文件</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@ejy-ys-kf2-web bin]# ll update/conf/</span><br><span class="line">-rwxr-xr-x 1 root root    37102 3月  15 20:16 fileManagement.jar</span><br><span class="line">-rwxr-xr-x 1 root root   446748 3月  15 20:16 legoMenu.eni</span><br><span class="line">-rwxr-xr-x 1 root root      196 9月  12 16:05 webConfig.eni       ## --&gt; 用零时授权文件替换webConfig.eni</span><br><span class="line">-rwxr-xr-x 1 root root 58329340 3月  15 20:16 Yozo_Office.jar</span><br><span class="line">[root@ejy-ys-kf2-web bin]# chmod 755 update/conf/webConfig.eni</span><br></pre></td></tr></table></figure>

<h6 id="更新服务"><a href="#更新服务" class="headerlink" title="更新服务"></a>更新服务</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@ejy-ys-kf2-web bin]# ./update.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 或</span></span></span><br><span class="line">[root@ejy-ys-kf2-web bin]# ./uninstall.sh &amp;&amp; ./install.sh</span><br><span class="line">[root@ejy-ys-kf2-web bin]# netstat -tunpl | grep java</span><br><span class="line">tcp        0      0 0.0.0.0:18081           0.0.0.0:*               LISTEN      27948/java          </span><br><span class="line">tcp        0      0 0.0.0.0:18082           0.0.0.0:*               LISTEN      27969/java          </span><br><span class="line">tcp        0      0 0.0.0.0:18083           0.0.0.0:*               LISTEN      27991/java          </span><br><span class="line">tcp        0      0 0.0.0.0:18084           0.0.0.0:*               LISTEN      28015/java          </span><br><span class="line">tcp        0      0 0.0.0.0:19941           0.0.0.0:*               LISTEN      27948/java          </span><br><span class="line">tcp        0      0 0.0.0.0:18085           0.0.0.0:*               LISTEN      28048/java          </span><br><span class="line">tcp        0      0 0.0.0.0:19942           0.0.0.0:*               LISTEN      27969/java          </span><br><span class="line">tcp        0      0 0.0.0.0:19943           0.0.0.0:*               LISTEN      27991/java          </span><br><span class="line">tcp        0      0 0.0.0.0:19944           0.0.0.0:*               LISTEN      28015/java          </span><br><span class="line">tcp        0      0 0.0.0.0:19945           0.0.0.0:*               LISTEN      28048/java          </span><br><span class="line">tcp        0      0 127.0.0.1:18001         0.0.0.0:*               LISTEN      27948/java          </span><br><span class="line">tcp        0      0 127.0.0.1:18002         0.0.0.0:*               LISTEN      27969/java          </span><br><span class="line">tcp        0      0 0.0.0.0:19090           0.0.0.0:*               LISTEN      28089/java          </span><br><span class="line">tcp        0      0 127.0.0.1:18003         0.0.0.0:*               LISTEN      27991/java          </span><br><span class="line">tcp        0      0 127.0.0.1:18004         0.0.0.0:*               LISTEN      28015/java                  </span><br><span class="line">tcp        0      0 127.0.0.1:18005         0.0.0.0:*               LISTEN      28048/java          </span><br></pre></td></tr></table></figure>

<ul>
<li>查看日志：tail -f &#x2F;usr&#x2F;local&#x2F;yozo&#x2F;weboffice&#x2F;agent&#x2F;nohup.out，出现以下红框中日志说明agent代理启动成功，监听18080端口</li>
</ul>
<p><img data-src="http://42.192.155.41/yozo/wo/20230913151200.png" alt="代理服务日志"></p>
<h5 id="运行及服务维护"><a href="#运行及服务维护" class="headerlink" title="运行及服务维护"></a>运行及服务维护</h5><blockquote>
<p>参考：《1_WebOffice部署教程.docx》第5小结、《1_WebOffice基本运维手册.docx》第五、六、七章节</p>
</blockquote>
<h6 id="启动保护进程"><a href="#启动保护进程" class="headerlink" title="启动保护进程"></a>启动保护进程</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@ejy-ys-kf2-web bin]# ./protect.sh start</span><br><span class="line">nohup: 把输出追加到&quot;nohup.out&quot;</span><br><span class="line">start protecy weboffice success...</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 查看保护进程是否存在，具体逻辑就是启动一个循环脚本不断检查指定端口</span></span></span><br><span class="line">[root@ejy-ys-kf2-web bin]# ps -ef | grep checkWO.sh | grep -v grep</span><br><span class="line">root     12553     1  0 15:18 pts/0    00:00:00 sh checkWO.sh</span><br></pre></td></tr></table></figure>

<h4 id="服务验证-1"><a href="#服务验证-1" class="headerlink" title="服务验证"></a>服务验证</h4><h5 id="直接访问weboffice服务"><a href="#直接访问weboffice服务" class="headerlink" title="直接访问weboffice服务"></a>直接访问weboffice服务</h5><h6 id="官方给的demo示例"><a href="#官方给的demo示例" class="headerlink" title="官方给的demo示例"></a>官方给的demo示例</h6><p><img data-src="http://42.192.155.41/yozo/wo/20230913152721.png" alt="官方demo演示项目"></p>
<ul>
<li><a href="http://192.168.11.20:19090/">打开查看</a></li>
</ul>
<h6 id="官方开发文档"><a href="#官方开发文档" class="headerlink" title="官方开发文档"></a>官方开发文档</h6><ul>
<li>开发需以此为准，给的开发文档<del><a href="http://42.192.155.41/yozo/wo/%E6%B0%B8%E4%B8%ADWebOffice3.3%E6%8E%A5%E5%8F%A3%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3-%E5%90%8E%E7%AB%AF.docx">《永中WebOffice3.3接口说明文档-后端.docx》</a></del>不一定准确。</li>
</ul>
<p><img data-src="http://42.192.155.41/yozo/wo/20230913152748.png" alt="官方开发文档"></p>
<ul>
<li><a href="http://192.168.11.20:18080/s/help.html">打开查看</a></li>
</ul>
<h5 id="经过gateway网关访问-1"><a href="#经过gateway网关访问-1" class="headerlink" title="经过gateway网关访问"></a>经过gateway网关访问</h5><h6 id="官方给的demo示例-1"><a href="#官方给的demo示例-1" class="headerlink" title="官方给的demo示例"></a>官方给的demo示例</h6><p><img data-src="http://42.192.155.41/yozo/wo/20230913153155.png" alt="官方demo演示项目"></p>
<ul>
<li><a href="http://192.168.11.199:18787/wo-demo/">打开查看</a></li>
</ul>
<h6 id="官方开发文档-1"><a href="#官方开发文档-1" class="headerlink" title="官方开发文档"></a>官方开发文档</h6><p><img data-src="http://42.192.155.41/yozo/wo/20230913153222.png" alt="官方开发文档"></p>
<ul>
<li><a href="http://192.168.11.199:18787/wo/s/help.html">打开查看</a></li>
</ul>
<h3 id="部署总结"><a href="#部署总结" class="headerlink" title="部署总结"></a>部署总结</h3><h4 id="便捷性"><a href="#便捷性" class="headerlink" title="便捷性"></a>便捷性</h4><h5 id="FCS服务"><a href="#FCS服务" class="headerlink" title="FCS服务"></a>FCS服务</h5><p>容器化后部署便利。</p>
<h5 id="WebOffice服务"><a href="#WebOffice服务" class="headerlink" title="WebOffice服务"></a>WebOffice服务</h5><p>费时费力，迁移成本高。</p>
<h4 id="高可用（HA）"><a href="#高可用（HA）" class="headerlink" title="高可用（HA）"></a>高可用（HA）</h4><h5 id="FCS服务-1"><a href="#FCS服务-1" class="headerlink" title="FCS服务"></a>FCS服务</h5><p>业务逻辑简单（本质上是一个文件格式转换服务），且使用redis作为存储器；且实现了容器化，很容易就能做到集群化的横向伸缩性部署。</p>
<h5 id="WebOffice服务-1"><a href="#WebOffice服务-1" class="headerlink" title="WebOffice服务"></a>WebOffice服务</h5><p>由于证书的认证逻辑暂无法容器化部署，且官方提供的原生部署方案，只能部署在单台服务器上。</p>
<p>尽管通过protect.sh保护程序尽力保证了多个weboffice服务可用，agent也还是存在单点问题。</p>
<h4 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h4><h5 id="链路信道安全（https）"><a href="#链路信道安全（https）" class="headerlink" title="链路信道安全（https）"></a>链路信道安全（https）</h5><blockquote>
<p>一般由企业级的nginx反向代理配置ssl安全层，服务层不配置。</p>
</blockquote>
<h5 id="防盗链"><a href="#防盗链" class="headerlink" title="防盗链"></a>防盗链</h5><h6 id="检查http头部的referer字段"><a href="#检查http头部的referer字段" class="headerlink" title="检查http头部的referer字段"></a>检查http头部的referer字段</h6><h6 id="业务回调接口检查"><a href="#业务回调接口检查" class="headerlink" title="业务回调接口检查"></a>业务回调接口检查</h6><p>文档《1WebOffice_Help页面API_说明文档(后端仅api.do.docx》第3.2小节有说明，但是没找到配置的地方？！！</p>
<h5 id="不落地文档"><a href="#不落地文档" class="headerlink" title="不落地文档"></a>不落地文档</h5><p>永中WebOffice支持打开不落地文档（即文档不会保存回到WebOffice服务所在的服务器上），WebOffice会获取用户提供的文档的文件流，后续对于该文档的一切操作都在内存中进行，不会存放到硬盘上，最终编辑结束后会将最新的文件流回传给客户服务器，为机密文档提供了安全保证。</p>
]]></content>
      <categories>
        <category>中间件</category>
        <category>永中文档</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>部署</tag>
      </tags>
  </entry>
  <entry>
    <title>JUC包及Future介绍</title>
    <url>/2023/05/23/java-juc-future-notes/</url>
    <content><![CDATA[<h3 id="JUC工具包介绍"><a href="#JUC工具包介绍" class="headerlink" title="JUC工具包介绍"></a>JUC工具包介绍</h3><h4 id="JUC是什么？"><a href="#JUC是什么？" class="headerlink" title="JUC是什么？"></a>JUC是什么？</h4><blockquote>
<p>是并发变成工具包（java.util.concurrent）的英文缩写，JUC的变迁历史：</p>
</blockquote>
<ul>
<li>从 JDK1.5 开始，Java 官⽅在 rt.jar 核⼼ jar 包⽂件中增加了 java.util.concurrent 并发包，由 Doug Lea ⼤⽜编写实现，并在后继的主要版本中不断对其增强、优化。</li>
<li>在 JDK1.6 中，主要对基础数据结构类进⾏了并发特性增强。</li>
<li>在 JDK1.7 中，主要对并发框架⼯具类进⾏了增强，新增了 ForkJoin 系列。</li>
<li>在 JDK1.8 中，主要对原⼦操作⼯具类进⾏了增强，增加了适⽤于更多场景的⼯具类。</li>
</ul>
<h4 id="JUC包目录结构"><a href="#JUC包目录结构" class="headerlink" title="JUC包目录结构"></a>JUC包目录结构</h4><table>
<thead>
<tr>
<th>包路径</th>
<th>主要内容</th>
<th>典型类型</th>
</tr>
</thead>
<tbody><tr>
<td>java.util.concurrent</td>
<td>提供很多种最基本的并发工具类，包含对各类数据结构的并发封装，并发框架主要接口</td>
<td>CountDownLatch、CyclicBarrier、Semaphore、Exchanger、Phaser、BlockingQueue、ConcurrentHashMap、ThreadPoolExecutor、ForkJoinPool</td>
</tr>
<tr>
<td>java.util.concurrent.atomic</td>
<td>提供各类原子操作工具类</td>
<td>AtomicInteger、DoubleAdder、LongAccumulator、AtomicReference</td>
</tr>
<tr>
<td>java.util.concurrent.locks</td>
<td>提供各类锁工具</td>
<td>Lock、ReadWriteLock、ReentrantLock、ReentrantReadWriteLock、StampedLock</td>
</tr>
</tbody></table>
<p><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/juc/7bcc461730cf4059ab8331745cdaf122.png" alt="包目录结构截图"></p>
<h4 id="JUC包内容分类"><a href="#JUC包内容分类" class="headerlink" title="JUC包内容分类"></a>JUC包内容分类</h4><p><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/juc/034d0f0f9e8349b98e28f339d2637e35.png" alt="包内容分类截图"><br>主要包含以下5个方面：</p>
<ul>
<li><em>锁（locks）：</em> 提供适合各类场合的锁⼯具；</li>
<li><em>原⼦变量（atomic）：</em> 原⼦变量类相关，是构建⾮阻塞算法的基础；</li>
<li><em>并发框架（executor）：</em> 提供线程池相关类型；</li>
<li><em>并发容器（collections）：</em> 提供⼀系列并发容器相关类型；</li>
<li><em>同步⼯具（tools）：</em> 提供相对独⽴，且场景丰富的各类同步⼯具，如信号量（Semaphore）、闭锁（CountDownLatch）、栅栏（CyclicBarrier）等功能；</li>
</ul>
<h4 id="JUC解决的问题"><a href="#JUC解决的问题" class="headerlink" title="JUC解决的问题"></a>JUC解决的问题</h4><p>用于解决多线程同步问题，给Java开发者提供便利的函数功能、数据结构。</p>
<h3 id="Future介绍"><a href="#Future介绍" class="headerlink" title="Future介绍"></a>Future介绍</h3><p>Future设计模式从本质上是用来解决的根本的问题在于可以让一个任务在异步执行，而任务执行完之后我们可以在未来的某一个时间点上去获取到这个任务执行的结果，不管这个任务是执行失败或成功。可以理解为对线程Fork&#x2F;Join的封装，使用变得更加简单便捷。</p>
<h4 id="常用子类及核心方法"><a href="#常用子类及核心方法" class="headerlink" title="常用子类及核心方法"></a>常用子类及核心方法</h4><p>下图为本文主要介绍的2种Future子类<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/juc/69b5d2ae54414baea9a3601aabcce665.png" alt="常用Future子类截图"></p>
<p>Future接口的核心方法</p>
<ol>
<li>boolean cancel(boolean mayInterruptIfRunning)<br>尝试取消此任务</li>
<li>boolean isCancelled()<br>如果此任务在正常完成之前被取消，则返回 true 。</li>
<li>boolean isDone()<br>是否任务执行完了</li>
<li>V get()<br>获取任务执行结果，如果任务没有完成，这个方法则会一直等待，没有超时机制</li>
<li>V get(long timeout, TimeUnit unit)<br>获取任务执行结果，如果任务没有完成，这个方法则会一直等待，直到超过限定时间，超过限定时间则会抛出异常</li>
</ol>
<h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><p>两个任务没有必然的前后关系，如果在一个线程中串行执行，就有些浪费时间，不如让两个线程去并行执行这两个任务，执行完了到主线程去汇报就可以了。</p>
<h4 id="常用的组合方式"><a href="#常用的组合方式" class="headerlink" title="常用的组合方式"></a>常用的组合方式</h4><h5 id="FutureTask"><a href="#FutureTask" class="headerlink" title="FutureTask"></a>FutureTask</h5><h6 id="类继承体系"><a href="#类继承体系" class="headerlink" title="类继承体系"></a>类继承体系</h6><ul>
<li>具备了Future接口对任务状态判断、取消及结果获取的能力</li>
<li>具备了Runnable接口处理业务的能力<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/juc/c9adfdc1e7254eafa28fd6745d753bbe.png" alt="FutureTask类集成体系截图"></li>
</ul>
<h6 id="构造方法public-FutureTask-Callable-callable"><a href="#构造方法public-FutureTask-Callable-callable" class="headerlink" title="构造方法public FutureTask(Callable callable)"></a>构造方法public FutureTask(Callable<V> callable)</h6><p>结合Thread使用示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FutureTaskTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        FutureTask&lt;String&gt; ft1 = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">MyCallable</span>(<span class="string">&quot;任务1&quot;</span>, <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">10</span>)));</span><br><span class="line">        FutureTask&lt;String&gt; ft2 = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">MyCallable</span>(<span class="string">&quot;任务2&quot;</span>, <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">10</span>)));</span><br><span class="line">        FutureTask&lt;String&gt; ft3 = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">MyCallable</span>(<span class="string">&quot;任务3&quot;</span>, <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">10</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启用子线程处理业务</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ft1).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ft2).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ft3).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 主线程处理其它事情</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">sec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">10</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;main, running ...\n will cost about &quot;</span> + sec + <span class="string">&quot; s &quot;</span>);</span><br><span class="line">            TimeUnit.SECONDS.sleep(sec);</span><br><span class="line">            System.out.println(<span class="string">&quot;main, continue ...&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 查看子线程运行状态</span></span><br><span class="line">            System.out.println(<span class="string">&quot;main, ft1, isDone=&quot;</span> + ft1.isDone() + <span class="string">&quot;, isCancelled=&quot;</span> + ft1.isCancelled());</span><br><span class="line">            System.out.println(<span class="string">&quot;main, ft2, isDone=&quot;</span> + ft2.isDone() + <span class="string">&quot;, isCancelled=&quot;</span> + ft2.isCancelled());</span><br><span class="line">            System.out.println(<span class="string">&quot;main, ft3, isDone=&quot;</span> + ft3.isDone() + <span class="string">&quot;, isCancelled=&quot;</span> + ft3.isCancelled());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取子线程返回结果</span></span><br><span class="line">            List&lt;String&gt; result = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">            result.add(ft1.get());</span><br><span class="line">            result.add(ft2.get());</span><br><span class="line">            result.add(ft3.get());</span><br><span class="line">            System.out.println(<span class="string">&quot;main, finished !\n处理结果：&quot;</span> + result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequiredArgsConstructor</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;String&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Integer sec;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;job:&quot;</span> + name + <span class="string">&quot;, running ... will cost about &quot;</span> + sec + <span class="string">&quot; s &quot;</span>);</span><br><span class="line">            TimeUnit.SECONDS.sleep(sec);</span><br><span class="line">            System.out.println(<span class="string">&quot;job:&quot;</span> + name + <span class="string">&quot;, finished !&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> name + <span class="string">&quot;:success&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结合JUC并发框架Executor使用示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FutureTaskTest2</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 生产环境不建议使用Executors工具类产生的ExecutorService，存在一定的弊端（例如：无界队列会导致OOM问题）</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        FutureTask&lt;String&gt; ft0 = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">MyCallable</span>(<span class="string">&quot;任务0&quot;</span>, <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">10</span>)));</span><br><span class="line">        FutureTask&lt;String&gt; ft1 = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">MyCallable</span>(<span class="string">&quot;任务1&quot;</span>, <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">10</span>)));</span><br><span class="line">        FutureTask&lt;String&gt; ft2 = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">MyCallable</span>(<span class="string">&quot;任务2&quot;</span>, <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">10</span>)));</span><br><span class="line">        FutureTask&lt;String&gt; ft3 = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">MyCallable</span>(<span class="string">&quot;任务3&quot;</span>, <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">10</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启用子线程处理业务</span></span><br><span class="line">        executorService.submit(ft0);</span><br><span class="line">        executorService.submit(ft1);</span><br><span class="line">        executorService.submit(ft2);</span><br><span class="line">        executorService.submit(ft3);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 主线程处理其它事情</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">sec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">10</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;main, running ...\n will cost about &quot;</span> + sec + <span class="string">&quot; s &quot;</span>);</span><br><span class="line">            TimeUnit.SECONDS.sleep(sec);</span><br><span class="line">            System.out.println(<span class="string">&quot;main, continue ...&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 查看子线程运行状态</span></span><br><span class="line">            System.out.println(<span class="string">&quot;main, ft0, isDone=&quot;</span> + ft0.isDone() + <span class="string">&quot;, isCancelled=&quot;</span> + ft0.isCancelled());</span><br><span class="line">            System.out.println(<span class="string">&quot;main, ft1, isDone=&quot;</span> + ft1.isDone() + <span class="string">&quot;, isCancelled=&quot;</span> + ft1.isCancelled() + <span class="string">&quot;, cancel=&quot;</span> + ft1.cancel(<span class="literal">false</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;main, ft2, isDone=&quot;</span> + ft2.isDone() + <span class="string">&quot;, isCancelled=&quot;</span> + ft2.isCancelled() + <span class="string">&quot;, cancel=&quot;</span> + ft2.cancel(<span class="literal">true</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;main, ft3, isDone=&quot;</span> + ft3.isDone() + <span class="string">&quot;, isCancelled=&quot;</span> + ft3.isCancelled() + <span class="string">&quot;, cancel=&quot;</span> + ft3.cancel(<span class="literal">false</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取子线程返回结果</span></span><br><span class="line">            List&lt;String&gt; result = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                result.add(ft0.get());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (CancellationException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;main, ft0, 被取消：&quot;</span> + e.getMessage());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;main, ft0, 执行错误：&quot;</span> + e.getMessage());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;main, ft0, 线程被中断：&quot;</span> + e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                result.add(ft1.get());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (CancellationException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;main, ft1, 被取消：&quot;</span> + e.getMessage());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;main, ft1, 执行错误：&quot;</span> + e.getMessage());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;main, ft1, 线程被中断：&quot;</span> + e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                result.add(ft2.get());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (CancellationException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;main, ft2, 被取消：&quot;</span> + e.getMessage());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;main, ft2, 执行错误：&quot;</span> + e.getMessage());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;main, ft2, 线程被中断：&quot;</span> + e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                result.add(ft3.get(<span class="number">7</span>, TimeUnit.SECONDS));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (CancellationException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;main, ft3, 被取消：&quot;</span> + e.getMessage());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;main, ft3, 执行错误：&quot;</span> + e.getMessage());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;main, ft3, 线程被中断：&quot;</span> + e.getMessage());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;main, ft3, 超时：&quot;</span> + e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;main, finished !\n处理结果：&quot;</span> + result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            executorService.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequiredArgsConstructor</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;String&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Integer sec;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;job:&quot;</span> + name + <span class="string">&quot;, running ... will cost about &quot;</span> + sec + <span class="string">&quot; s &quot;</span>);</span><br><span class="line">            TimeUnit.SECONDS.sleep(sec);</span><br><span class="line">            System.out.println(<span class="string">&quot;job:&quot;</span> + name + <span class="string">&quot;, finished !&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> name + <span class="string">&quot;:success&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="另一个构造方法public-FutureTask-Runnable-runnable-V-result"><a href="#另一个构造方法public-FutureTask-Runnable-runnable-V-result" class="headerlink" title="另一个构造方法public FutureTask(Runnable runnable, V result)"></a>另一个构造方法public FutureTask(Runnable runnable, V result)</h6><p>与public FutureTask(Callable<V> callable)类似，内部通过RunnableAdapter<T>把Runnable接口适配为Callable<T>并把result参数作为结果返回。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 核心适配器类</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">RunnableAdapter</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">final</span> Runnable task;</span><br><span class="line">    <span class="keyword">final</span> T result;</span><br><span class="line">    </span><br><span class="line">    RunnableAdapter(Runnable task, T result) &#123;</span><br><span class="line">        <span class="built_in">this</span>.task = task;</span><br><span class="line">        <span class="built_in">this</span>.result = result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 普通方式调用run方法，并未开启线程</span></span><br><span class="line">        task.run();</span><br><span class="line">        <span class="comment">// Runnable接口的run方法是没有返回值的】</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="CompletableFuture"><a href="#CompletableFuture" class="headerlink" title="CompletableFuture"></a>CompletableFuture</h5><p>上一小节介绍常用类FutureTask，然而实际的业务场景可能更为复杂，例如以下几种：</p>
<ol>
<li>多个执行单元的串行请求<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/juc/2aa00eb459cf414fb72ab82cf50d83fa.png" alt="串行阻塞截图01"></li>
<li>多个执行单元的并行请求<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/juc/83f9d01e51924fa889b66f51178f6706.png" alt="并行阻塞截图01"></li>
<li>阻塞等待，串行的后面跟多个并行<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/juc/e59920fc00f74a82833b93b05853c3a9.png" alt="阻塞等待截图011"></li>
<li>阻塞等待，多个并行的执行完毕后才执行某个<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/juc/2d30116d3d404ca89a94112eb32c15f5.png" alt="阻塞等待截图02"></li>
<li>串并行相互依赖<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/juc/6772e71b86a64c22917941cb4c1ad262.png" alt="串并依赖截图01"></li>
<li>复杂场景<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/juc/66f034fbdeb64e858dc73ee01141a771.png" alt="串并依赖截图02"></li>
</ol>
<p>面对以上几种场景，我们需要一种能够简化并发变成的“任务编排”工具</p>
<ul>
<li>这里推荐一个开源工具 <a href="https://gitee.com/jd-platform-opensource/asyncTool">京东零售 &#x2F; asyncTool</a>，有兴趣的可以看下。</li>
<li>CompletableFuture通过提供一系列方法使“任务编排”变的更加简单</li>
</ul>
<h6 id="类继承体系-1"><a href="#类继承体系-1" class="headerlink" title="类继承体系"></a>类继承体系</h6><ul>
<li>CompletableFuture实现了CompletionStage接口和Future接口，前者是对后者的一个扩展，增加了异步回调、流式处理、多个Future组合处理的能力，使Java在处理多任务的协同工作时更加顺畅便利。</li>
<li>同FutureTask相比，CompletableFuture最大的不同是支持流式（Stream）的计算处理，多个任务之间，可以前后相连，从而形成一个计算流。<br><img data-src="https://raw.githubusercontent.com/ForeverZang/ForeverZang/main/juc/ea334e3285334782a83cc1391bd395b7.png" alt="在这里插入图片描述"></li>
</ul>
<h6 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h6><ul>
<li>创建任务<ul>
<li>.supplyAsync： 创建一个带返回值的任务</li>
<li>.runAsync：创建一个不带返回值的任务</li>
</ul>
</li>
<li>异步回调<ul>
<li>.thenApply、.thenApplyAsync：带返回值的异步调用函数, 有入参, 有出参</li>
<li>.thenAccept、.thenAcceptAsync：不带返回值的异步回调函数, 有入参</li>
<li>.thenRun、.thenRunAsync：不带返回值的异步回调函数，无入参</li>
<li>.thenCombine、.thenCombineAsync：一般，在连接任务之间互相不依赖的情况下，可以使用thenCombine来连接任务，从而提升任务之间的并发度。</li>
<li>.thenCompose、.thenComposeAsync：与 .thenApply 类似</li>
<li>.whenComplete：当主任务出现异常时, 会终止任务,get的时候会抛出主任务的异常, 入参值为null, 否则正常运行</li>
<li>.handle、.handleAsync：与whenComplete的作用有些类似，但是handle接收的处理函数有返回值，而且返回值会影响最终获取的计算结果。</li>
<li>.exceptionally：异步任务出现异常调用的回调方法</li>
</ul>
</li>
<li>其中，带Async后缀的函数表示需要连接的后置任务会被单独提交到线程池中，从而相对前置任务来说是异步运行的。除此之外，两者没有其他区别。</li>
</ul>
<h4 id="具体场景示例"><a href="#具体场景示例" class="headerlink" title="具体场景示例"></a>具体场景示例</h4><h5 id="多个执行单元的串行请求"><a href="#多个执行单元的串行请求" class="headerlink" title="多个执行单元的串行请求"></a>多个执行单元的串行请求</h5><ul>
<li>当通过thenApply &#x2F; thenAccept &#x2F; thenRun连接的任务，当且仅当前置任务计算完成时，才会开始后置任务的计算。因此，这组函数主要用于连接前后有依赖的任务链。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompletableFutureTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        CompletableFuture&lt;Integer&gt; future1 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;compute 1&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;, executorService);</span><br><span class="line">        CompletableFuture&lt;Integer&gt; future2 = future1.thenApply((p) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;compute 2&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> p + <span class="number">10</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        CompletableFuture&lt;Integer&gt; future3 = future2.thenApply((p) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;compute 3&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> p + <span class="number">2</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;result: &quot;</span> + future3.join());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="多个执行单元的并行请求"><a href="#多个执行单元的并行请求" class="headerlink" title="多个执行单元的并行请求"></a>多个执行单元的并行请求</h5><p>在连接任务之间互相不依赖的情况下，可以使用thenCombine来连接任务，从而提升任务之间的并发度。注意：thenAcceptBoth、thenAcceptBothAsync、runAfterBoth、runAfterBothAsync的作用与thenConbime类似，唯一不同的地方是任务类型不同，分别是BiConumser、Runnable。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompletableFutureTest2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        CompletableFuture&lt;Integer&gt; future1 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;compute 1&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;, executorService);</span><br><span class="line">        CompletableFuture&lt;Integer&gt; future2 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;compute 2&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">        &#125;, executorService);</span><br><span class="line">        CompletableFuture&lt;Integer&gt; future3 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;compute 3&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">        &#125;, executorService);</span><br><span class="line">        CompletableFuture&lt;Integer&gt; future = future1.thenCombine(future2.thenCombine(future3, (r2, r3) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;compute 2: r2=&quot;</span> + r2 + <span class="string">&quot;, r3=&quot;</span> + r3);</span><br><span class="line">            <span class="keyword">return</span> r2 + r3;</span><br><span class="line">        &#125;), (r1, r23) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;compute 2: r1=&quot;</span> + r1 + <span class="string">&quot;, r23=&quot;</span> + r23);</span><br><span class="line">            <span class="keyword">return</span> r1 + r23;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;result: &quot;</span> + future.join());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="阻塞等待，串行的后面跟多个并行"><a href="#阻塞等待，串行的后面跟多个并行" class="headerlink" title="阻塞等待，串行的后面跟多个并行"></a>阻塞等待，串行的后面跟多个并行</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompletableFutureTest3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        CompletableFuture&lt;Integer&gt; future1 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;compute 1&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;, executorService);</span><br><span class="line">        CompletableFuture&lt;Integer&gt; future = future1.thenApply(r1 -&gt; &#123;</span><br><span class="line">            CompletableFuture&lt;Integer&gt; future2 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;compute 2&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">            &#125;, executorService);</span><br><span class="line">            CompletableFuture&lt;Integer&gt; future3 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;compute 3&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">            &#125;, executorService);</span><br><span class="line">            CompletableFuture&lt;Integer&gt; future23 = future2.thenCombine(future3, (r2, r3) -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;compute 2: r2=&quot;</span> + r2 + <span class="string">&quot;, r3=&quot;</span> + r3);</span><br><span class="line">                <span class="keyword">return</span> r2 + r3;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> r1 + future23.join();</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;result: &quot;</span> + future.join());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="阻塞等待，多个并行的执行完毕后才执行"><a href="#阻塞等待，多个并行的执行完毕后才执行" class="headerlink" title="阻塞等待，多个并行的执行完毕后才执行"></a>阻塞等待，多个并行的执行完毕后才执行</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompletableFutureTest4</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        CompletableFuture&lt;Integer&gt; future1 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;compute 1&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">        &#125;, executorService);</span><br><span class="line">        CompletableFuture&lt;Integer&gt; future2 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;compute 2&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">        &#125;, executorService);</span><br><span class="line">        CompletableFuture&lt;Integer&gt; future12 = future1.thenCombine(future2, (r1, r2) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;compute 12: r1=&quot;</span> + r1 + <span class="string">&quot;, r2=&quot;</span> + r2);</span><br><span class="line">            <span class="keyword">return</span> r1 + r2;</span><br><span class="line">        &#125;);</span><br><span class="line">        CompletableFuture&lt;Integer&gt; future = future12.thenCompose((r12) -&gt; CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;compute 3&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> r12 + <span class="number">1</span>;</span><br><span class="line">        &#125;, executorService));</span><br><span class="line">        System.out.println(<span class="string">&quot;result: &quot;</span> + future.join());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="串并行相互依赖"><a href="#串并行相互依赖" class="headerlink" title="串并行相互依赖"></a>串并行相互依赖</h5><p>请自行尝试，略…</p>
<h5 id="复杂场景"><a href="#复杂场景" class="headerlink" title="复杂场景"></a>复杂场景</h5><p>请自行尝试，略…</p>
<h4 id="子线程异常处理"><a href="#子线程异常处理" class="headerlink" title="子线程异常处理"></a>子线程异常处理</h4><blockquote>
<p>子线程中异常处理通常有以下3种处理方式：</p>
</blockquote>
<h5 id="子线程中使用try…catch…"><a href="#子线程中使用try…catch…" class="headerlink" title="子线程中使用try…catch…"></a>子线程中使用try…catch…</h5>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Object&gt; &#123;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> Object <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="comment">// 业务操作</span></span><br><span class="line">          &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">              System.out.println(<span class="string">&quot;错误：&quot;</span> + e.getMessage());</span><br><span class="line">              <span class="comment">// 弥补逻辑</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或</p>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             <span class="comment">// 业务操作</span></span><br><span class="line">         &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">             System.out.println(<span class="string">&quot;错误：&quot;</span> + e.getMessage());</span><br><span class="line">             <span class="comment">// 弥补逻辑</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="为线程设置未捕获异常处理器UncaughtExceptionHandler"><a href="#为线程设置未捕获异常处理器UncaughtExceptionHandler" class="headerlink" title="为线程设置未捕获异常处理器UncaughtExceptionHandler"></a>为线程设置未捕获异常处理器UncaughtExceptionHandler</h5><blockquote>
</blockquote>
<p>如果当前线程有异常处理器（默认没有），则优先使用该UncaughtExceptionHandler类；否则如果当前线程所属的线程组有异常处理器，则使用线程组的UncaughtExceptionHandler；否则，使用全局默认的DefaultUncaughtExceptionHandler；如果都没有的话，子线程就会退出。</p>
<blockquote>
<p>为线程设置异常处理器，有以下2中方式：</p>
<ol>
<li>通过Thread.setUncaughtExceptionHandler设置当前线程的异常处理器；</li>
<li>通过Thread.setDefaultUncaughtExceptionHandler设置整个程序默认的异常处理器</li>
</ol>
<p><strong>注意</strong>：子线程中发生了异常，如果没有任何类来接手处理的话，则直接退出，不会有任何的日志记录。所以，如果什么都不做的话，是会出现子线程任务没有执行陈宫，也没有任何日志提示的现象。</p>
</blockquote>
<p>为单个线程设置异常处理器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadUncaughtExceptionTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 设置全局默认异常处理器</span></span><br><span class="line">        Thread.setDefaultUncaughtExceptionHandler(<span class="keyword">new</span> <span class="title class_">ThreadUncaughtExceptionTest2</span>.ChildThreadExceptionHandler());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置当前线程异常处理器</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>(<span class="number">0</span>));</span><br><span class="line">        thread.setUncaughtExceptionHandler(<span class="keyword">new</span> <span class="title class_">ChildThreadExceptionHandler</span>());</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ChildThreadExceptionHandler</span> <span class="keyword">implements</span> <span class="title class_">Thread</span>.UncaughtExceptionHandler &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uncaughtException</span><span class="params">(Thread t, Throwable e)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;thread: &quot;</span> + t.getId() + <span class="string">&quot;, error: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequiredArgsConstructor</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Integer a;</span><br><span class="line">    </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;b=&quot;</span> + b + <span class="string">&quot;, b/a=&quot;</span> + b / a);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为线程组设置异常处理器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadGroupUncaughtExceptionTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ThreadGroup</span> <span class="variable">tg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThreadGroup</span>(<span class="string">&quot;TestThreadGroup&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(tg, <span class="keyword">new</span> <span class="title class_">MyRunnable</span>(<span class="number">0</span>));</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequiredArgsConstructor</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Integer a;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;b=&quot;</span> + b + <span class="string">&quot;, b/a=&quot;</span> + b / a);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyThreadGroup</span> <span class="keyword">extends</span> <span class="title class_">ThreadGroup</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyThreadGroup</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uncaughtException</span><span class="params">(Thread t, Throwable e)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;group: &quot;</span> + getName() + <span class="string">&quot;, thread: &quot;</span> + t.getId() + <span class="string">&quot;, error: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为线程池设置异常处理器：</p>
<ul>
<li>值得注意的是线程池的异常处理器，只有通过 execute 提交的任务，才能将它抛出的异常交给未捕获异常处理器，而通过 submit 提交的任务，无论是抛出的未检査异常还是已检査异常，都将被认为是任务返回状态的一部分。这也是为什么推荐通过捕获Future的get方法抛出异常类型的原因。</li>
<li>关于Executor并发框架的使用，不是本文主要内容，有机会可以另起一篇再作介绍。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExecutorUncaughtExceptionTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>, r -&gt; &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">        thread.setUncaughtExceptionHandler(<span class="keyword">new</span> <span class="title class_">ChildThreadExceptionHandler</span>());</span><br><span class="line">        <span class="keyword">return</span> thread;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 启用子线程处理业务</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            executorService.execute(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            executorService.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ChildThreadExceptionHandler</span> <span class="keyword">implements</span> <span class="title class_">Thread</span>.UncaughtExceptionHandler &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uncaughtException</span><span class="params">(Thread t, Throwable e)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;thread: &quot;</span> + t.getId() + <span class="string">&quot;, error: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequiredArgsConstructor</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Integer a;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;b=&quot;</span> + b + <span class="string">&quot;, b/a=&quot;</span> + b / a);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="通过捕获Future的get方法抛出异常类型（推荐）"><a href="#通过捕获Future的get方法抛出异常类型（推荐）" class="headerlink" title="通过捕获Future的get方法抛出异常类型（推荐）"></a>通过捕获Future的get方法抛出异常类型（推荐）</h5><p>参考FutureTask示例代码</p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ol>
<li><a href="http://ifeve.com/doug-lea/">《并发编程网》</a></li>
<li><a href="https://blog.csdn.net/weixin_37854829/article/details/122656639">《JUC并发编程包Future模式详解》</a></li>
<li><a href="https://blog.csdn.net/weixin_44912855/article/details/119269417">《CompletableFuture的使用介绍, CompletableFuture与FutureTask的区别》</a></li>
<li><a href="https://gitee.com/jd-platform-opensource/asyncTool">《asyncTool并行框架》</a></li>
<li><a href="https://wenku.baidu.com/view/510442df0142a8956bec0975f46527d3240ca601.html">《Java子线程中的异常处理（通用）》</a></li>
<li><a href="https://blog.csdn.net/u013672585/article/details/110305705">《CompletableFuture 并行及串行》</a></li>
<li><a href="https://blog.csdn.net/tongtest/article/details/107549749">《CompletableFuture 详解》</a></li>
</ol>]]></content>
      <categories>
        <category>开发语言</category>
        <category>Java</category>
        <category>JUC</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>任务编排</tag>
      </tags>
  </entry>
</search>
